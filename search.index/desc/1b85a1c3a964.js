rd_("AfReduced dimensionalityAjpositive quantisation stepAbDtype of this typeAhPeak L2 norm error boundEeCompute <code>$\\ln(x)$</code> over the elements of the input <code>data</code> array.ChStatically obtain the type for a statically typed codec.BlReturns the dtype of the type <code>T</code>BgReturns the type object for this codec.BlReturns the component object for this codec.AdRelative error boundAb<code>$2.0$</code>AdAbsolute error bound00Agpositive bits-per-pixelBjReturns a copy-on-write view of the array.DaDtype of the <code>dst</code> array into which the data is copiedDaShape of the <code>dst</code> array into which the data is copied6EcCompute <code>${e}^{x}$</code> over the elements of the input <code>data</code> \xe2\x80\xa6BeGet the positive floating point valueB`Get the once-computed interfacesCbReturns the total number of elements in the array.DgWraps the <code>config</code> so that it can be serialized together \xe2\x80\xa6D`Import the <code>numcodecs:abc/codec</code> interface from a \xe2\x80\xa6EeLoad a <code>DynCodecType</code> from a binary <code>wasm_component</code>, which \xe2\x80\xa6Bdpositive point-wise (absolute) error>>>DaDtype of the <code>src</code> array from which the data is copiedDaShape of the <code>src</code> array from which the data is copiedBbAutomatically detects a good mode.CfAutomatically detects a detects a good delta encoding.AmAn axis or all remaining axesCiDeny compressing non-finite values, i.e. return an error.0Ab<code>$0.5$</code>AjNever uses delta encoding.AjPeak signal-to-noise ratioBfPeak signal-to-noise ratio error boundAlRoot mean square error boundA`Compression rateCkMarker to signify all remaining (not explicitly named) axesB`Type object type for this codec.A`<code>0x0</code>ChThe permutation of the axes that is applied on encoding.AoThe invalid permutation of axesBnBinary precision of the encoded data where \xe2\x80\xa6AoReturns the argument unchanged.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BaCalls <code>U::from(self)</code>.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AjJPEG 2000 compression modeBkSpecifies how the mode should be determinedAfSPERR compression modeAdZFP compression modeAoThe unexpected compression mode10BeThe number of dimensions of the array0AjPeak signal-to-noise ratioBcpositive peak signal-to-noise ratioBfPeak signal to noise ratio error bound0ClCompression rate, e.g. <code>10.0</code> for x10 compressionAfRate in bits per value02ChThe seed for the random number generator used during \xe2\x80\xa6C`Seed for generating the random projection matrixAmSeed for the random generatorBcSeed for the random noise generatorDhCompute <code>$w \\cdot \\text{sinh}\\left( \\frac{x}{w} \\right)$</code> \xe2\x80\xa6BgReturns the size of the dtype in bytes.BfReturns a read-only view of the array.C`Type of the instances of this codec type object.E`Compression codec that <code>encode</code>s and <code>decode</code>s numeric \xe2\x80\xa6BlThe codec\xe2\x80\x99s implementation raised an errorCf<code>AnyArrayDType</code> representation of this typeBdThe dtype representation of the type000EhError type that may be returned during <code>encode</code>ing and <code>decode</code>\xe2\x80\xa6AeFloating point types.CiA merged combination of zero, one, or multiple input axesBiA single axis, as determined by its indexBfPeak signal to noise ratio error boundDiCompute <code>$w \\cdot \\text{asinh}\\left( \\frac{x}{w} \\right)$</code> \xe2\x80\xa6CdReturns the <code>PyCodecClass</code> of this codec.CiPath to the codec type to export, without the leading \xe2\x80\xa6BnThe <code>numcodecs:abc/codec</code> interfaceBmSpecifies how delta encoding should be chosenAoReturns the dtype of the array.BlThe <code>dtype</code> of the data to encodeBiThe unexpected dtype of the encoded array0AiDtype of the decoded dataClDtype of the provided array from which the data is to be \xe2\x80\xa62CkDtype of the array into which the encoded data is to be \xe2\x80\xa63333333AlThe out-of-bounds axis indexCcNumber of samples <code>N</code> in the input arrayCiCompression level, ranging from 0 (weak) over 8 (very \xe2\x80\xa6AgZlib compression level.AlZstandard compression level.BlRounds the input <code>data</code> using \xe2\x80\xa6DiCompute <code>$\\frac{x - o}{s}$</code> over the elements of the input \xe2\x80\xa6AfThe scale of the data.CeScale of the uniform noise, which is sampled from \xe2\x80\xa6AoReturns the shape of the array.BiThe unexpected shape of the encoded array000AjShape of the encoded array1BfThe invalid shape of the encoded array22B`The unexpected shape of the data30333DhGenerates two uniform random numbers from a random <code>hash</code> \xe2\x80\xa6DnCreate an array with zeros of <code>dtype</code> and shape <code>shape</code>.0BbBinary representation of this typeCkConfiguration type, from which the codec can be created \xe2\x80\xa6ClThe most general mode, which can describe all four other \xe2\x80\xa60AhPeak L2 norm error boundBeCodec providing compression using pcoDkThe random projection matrix is sparse where only <code>density</code>% \xe2\x80\xa6DmPerform an elementwise assignment to <code>self</code> from <code>src</code>.AlThe configuration parametersBlName of the numcodecs codec crate to compileCmDecodes the <code>encoded</code> data and returns the result.DgDecodes the data in the buffer <code>buf</code> and returns the result.1CeEncodes the <code>data</code> and returns the result.DfEncodes the <code>data</code> by training a fourier feature neural \xe2\x80\xa6DgEncodes the data in the buffer <code>buf</code> and returns the result.2AgThe offset of the data.CdNumber of samples <code>N</code> in the output arrayCoNumber of features <code>$D$</code> in the decoded output arrayBePath to which the wasm file is outputCbSpecifies how the chunk should be split into pagesAgThe source of the error00000AcOpaque source error000001100lSource error21111022222111111222211110211022AaThe runtime erroroThe codec error334334333433334ChAll remaining axes, each in a separate single-axis groupAjOnly uses the classic modeAk1st order Lorenzo predictorDgRepresents a <code>numcodecs.abc.Codec</code> <em>instance</em> object.DaRepresentation for an <code>ArrayBase</code> containing this typeCaThe codec\xe2\x80\x99s WebAssembly runtime raised an errorDlGets the <code>PyType</code> that this <code>PyCodecClass</code> represents.BfShape of the <code>decoded</code> dataCiThe <code>density</code> of the sparse projection matrix.AgMaximum distortion rateBkSmallest absolute bit plane number encoded.0ChReturns the least number greater than <code>self</code>.B`Return the strides of the array.DgTry to create a <code>ReinterpretCodec</code> that reinterprets the \xe2\x80\xa6DiCompute <code>$(x \\cdot s) + o$</code> over the elements of the input \xe2\x80\xa6AmExtract the semantic version.CnThe codec\xe2\x80\x99s encoding format version. Do not provide this \xe2\x80\xa60000000000000000BoVersion of the numcodecs codec crate to compile1111AdAbsolute error boundBeAn array that owns its data uniquely.AaCodec identifier.BdDynamically typed compression codec.DeThe reduced dimensionality <code>$K$</code>, to which the data is \xe2\x80\xa6AeFloating point types.0AdFloating point types0ClThe random projection matrix is dense and its components \xe2\x80\xa6DhLog codec which calculates <code>$c = \\ln(x)$</code> on encoding and \xe2\x80\xa6AdLossless compressiond-0.50BkDtypes that pco can compress and decompressAoThe codec\xe2\x80\x99s lock was poisonedAnPositive floating point number0AdRelative error boundBeCodec providing compression using SZ3BkDtypes that SZ3 can compress and decompressAfUnsigned binary types.BeCodec providing compression using ZFPBkDtypes that Zfp can compress and decompress0BkReturns the array\xe2\x80\x99s data as a byte slice.EcAccess the wrapped <code>PyCodec</code> to use its <code>PyCodecMethods</code> API.FbReturns the <code>U</code>-typed array in <code>Some(_)</code> iff the dtype of <code>U</code> \xe2\x80\xa6AaCodec identifier.AjGets the codec identifier.1A`The codec\xe2\x80\x99s id00DjCompress the <code>data</code> array using JPEG 2000 with the provided \xe2\x80\xa6DiCompresses the input <code>data</code> array using pco with the given \xe2\x80\xa6EeCompress the <code>data</code> array using SPERR with the provided <code>mode</code>.DjCompresses the input <code>data</code> array using SZ3, which consists \xe2\x80\xa6DgCompresses the input <code>data</code> array using tthresh with the \xe2\x80\xa6EcCompress the <code>data</code> array using ZFP with the provided <code>mode</code>.0E`Compress the <code>array</code> using Zlib with the provided <code>level</code>.EeCompress the <code>array</code> using Zstandard with the provided <code>level</code>.EcCompute <code>${e}^{x}$</code> over the elements of the input <code>data</code> \xe2\x80\xa6BaConverts from a <code>f64</code>.BeReturns an owned copy-on-write array.0BkReturns whether the array has any elements.BkThe number of bits of the mantissa to keep.BjThe number of bits of the mantissa to keepC`Maximum number of bits used to represent a block0BdMaximum number of bit planes encoded0DaNumber of features <code>$D$</code> in the encoded array metadataCkMinimum number of compressed bits used to represent a block0DiDtype of the <code>provided</code> array from which the data is to be \xe2\x80\xa6DiDtype of the <code>provided</code> array into which the data is to be \xe2\x80\xa6DiShape of the <code>provided</code> array into which the data is to be \xe2\x80\xa622DiLinear-quantize the elements in the <code>data</code> array using the \xe2\x80\xa6EeCreate a <code>ReinterpretCodec</code> that reinterprets <code>dtype</code> as bytes.AgTry dropping the codec.0BgReturns a read-write view of the array.CkAn axis group, potentially from a merged combination of \xe2\x80\xa6CnIn fixed-rate mode, each d-dimensional compressed block of \xe2\x80\xa60BiThe precision of this floating point typeCbCodec instantiated inside a WebAssembly component.BfCodec providing compression using ZlibAgZlib compression level.BkCodec providing compression using ZstandardAlZstandard compression level.CjFloating-point bit rounding, which drops the specified \xe2\x80\xa6CdInstantiate a codec from a configuration dictionary.CjHash the binary representation of the floating point value0ChReturns the greatest number less than <code>self</code>.CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc MainBcPrecision of the rounding operationBgThe precision of the rounding operationAlNumber of bit planes encoded0iPredictorDdMethod with which the reduced dimensionality <code>$K$</code> is \xe2\x80\xa6DhCompute <code>$w \\cdot \\text{sinh}\\left( \\frac{x}{w} \\right)$</code> \xe2\x80\xa6CgConverts the dtype to its (unsigned) binary equivalent.CcBit-cast the floating point value to its binary \xe2\x80\xa6EgCreate a  <code>ReinterpretCodec</code> that reinterprets <code>dtype</code> as its \xe2\x80\xa6AhAbsolute error tolerance0BeTry to <code>clone</code> this codec.CcTry cloning the codec by recreating it from its \xe2\x80\xa60CkArray-representation support for all dtypes included in \xe2\x80\xa6CfTypes which are included in <code>AnyArrayDType</code>CbAsinh codec, which applies a quasi-logarithmic \xe2\x80\xa6AgBinary <code>0x1</code>ClOpaque error type for errors that occur within the codec \xe2\x80\xa6BeAll remaining axes, combined into oneCeArray element types which can be compressed with pco.Ad1st order regressionCmLossless per-block compression that preserves integer and \xe2\x80\xa60CmCodec that rounds the data on encoding and passes through \xe2\x80\xa6BhCodec providing compression using SPERR.BmDtypes that SPERR can compress and decompressCeArray element types which can be compressed with SZ3.ClTries using the <code>IntMult</code> mode with a given base.CgDtype of the <code>configured</code> <code>dtype</code>0CnDtype of the <code>configured</code> <code>decode_dtype</code>CnDtype of the <code>configured</code> <code>encode_dtype</code>DgDecompress the <code>encoded</code> data into an array using JPEG 2000.CiDecompresses the <code>encoded</code> data into an array.DcDecompress the <code>encoded</code> data into an array using SPERR.11DaDecompress the <code>encoded</code> data into an array using ZFP.0DbDecompress the <code>encoded</code> data into an array using Zlib.DgDecompress the <code>encoded</code> data into an array using Zstandard.CoWraps a <code>PyCodec</code> to use the <code>Codec</code> API.BjConvert a usize to a floating point numberBcConverts from a <code>usize</code>.BeGet the configuration for this codec.CgSerializes the configuration parameters for this codec.CmReturns a dictionary holding configuration parameters for \xe2\x80\xa61DkUnwrap the <code>PyCodec</code> to use its <code>PyCodecMethods</code> API.DdConvert the <code>PcoDType</code> into an <code>AnyArrayDType</code>C`Get the corresponding <code>AnyArrayDType</code>0ClTurns the array into a uniquely owned array, cloning the \xe2\x80\xa6BcConverts into a <code>usize</code>.AjZFP non-finite values mode0BcThe number of blocks in the networkCeThe number of epochs for which the network is trainedCgProjection kind that is used to generate the random \xe2\x80\xa6CkCalculates the least nonnegative remainder of self (mod \xe2\x80\xa6CmUnsafely allow compressing non-finite values, even though \xe2\x80\xa60CgAn array where the data has shared ownership and is \xe2\x80\xa6BeAn array with copy-on-write behavior.BbNon-negative floating point number00AdPco compression modeClErrors that may occur when applying the <code>Pcodec</code>.BcStatically typed compression codec.CnTries delta encoding according to an extra latent variable \xe2\x80\xa6DhDecodes the <code>encoded</code> data and writes the result into the \xe2\x80\xa6EgDecodes the <code>encoded</code> data into the <code>decoded</code> output array by \xe2\x80\xa61oSZ3 error boundActthresh error boundClBit-cast the binary representation into a floating point \xe2\x80\xa6ChInstantiate a codec from its <code>config</code>uration.EcCreate a <code>ReinterpretCodec</code> that does not change the <code>dtype</code>.DiReconstruct the linear-quantized <code>encoded</code> array using the \xe2\x80\xa6CmApplies the (approximate) inverse of random projection to \xe2\x80\xa6CaNumeric n-dimensional arrays with dynamic shapes.AgA read-only array view.AhFixed bit-per-pixel rateCeType object for dynamically typed compression codecs.DhWrapper for a <code>StaticCodec</code> that automatically installs a \xe2\x80\xa6AbPco delta encodingDdRepresents a <code>numcodecs.abc.Codec</code> <em>class</em> object.CfOpaque error type for errors that occur within the \xe2\x80\xa6CgArray element types which can be compressed with SPERR.mSZ3 predictorCnTries using the <code>FloatMult</code> mode with a given base.BiCodec providing compression using tthreshFbReturns the <code>U</code>-typed array in <code>Some(_)</code> iff the dtype of <code>U</code> \xe2\x80\xa6CaDtype of the configured <code>decode_dtype</code>CaDtype of the configured <code>encode_dtype</code>DfExport a <code>StaticCodec</code> type using the WASM component model.CnThe width of the close-to-zero input value range where the \xe2\x80\xa6DhApplies random projection to the input <code>data</code> and outputs \xe2\x80\xa6DiCompute <code>$(x \\cdot s) + o$</code> over the elements of the input \xe2\x80\xa6CiEnum of all dtypes included in <code>AnyArrayBase</code>.BlCodec providing floating-point bit rounding.Dicannot assign from mismatching <code>src</code> array to <code>dst</code>CiIn fixed-accuracy mode, all transform coefficient bit \xe2\x80\xa60ClIdentity codec which applies the identity function, i.e. \xe2\x80\xa6BlCodec providing compression using JPEG 2000.CaDtypes that JPEG 2000 can compress and decompressCnErrors that may occur when applying the <code>LogCodec</code>.BfNumber of significant digits in base 2BmBinary mask to extract only the mantissa bitsDi<code>AsinhCodec</code> does not support non-finite (infinite or NaN) \xe2\x80\xa6Dj<code>FourierNetworkCodec</code> does not support non-finite (infinite \xe2\x80\xa6Dj<code>LinearQuantizeCodec</code> does not support non-finite (infinite \xe2\x80\xa6Dg<code>LogCodec</code> does not support non-finite (infinite or NaN) \xe2\x80\xa6Db<code>RandomProjectionCodec</code> does not support non-finite \xe2\x80\xa6Dg<code>ZfpCodec</code> does not support non-finite (infinite or NaN) \xe2\x80\xa6Di[<code>ZfpCodec</code>] does not support non-finite (infinite or NaN) \xe2\x80\xa6Dg<code>RandomProjectionCodec</code> only supports matrix / 2d-shaped \xe2\x80\xa6oPco paging modeEccannot assign from array of shape <code>src</code> to one of shape <code>dst</code>CnErrors that may occur when applying the <code>Sz3Codec</code>.oSZ3 error boundDiTries using the <code>FloatQuant</code> mode with the given number of \xe2\x80\xa6CnErrors that may occur when applying the <code>ZfpCodec</code>.BnThe standard deviation of the Fourier featuresBjthe base for the <code>IntMult</code> modeCeThe learning rate for the <code>Adam</code> optimizerCjCI Status MSRV Latest Version Rust Doc Crate Rust Doc Main000FeIf <code>codec</code> represents an exported <code>DynCodec</code> <code>T</code>, i.e. its class \xe2\x80\xa6FbIf <code>class</code> represents an exported <code>DynCodecType</code> <code>T</code>, i.e. it wasCbFloating point number in <code>$[0.0, 1.0)$</code>ChDivide the chunk into equal pages of up to this many \xe2\x80\xa6CnIn fixed-precision mode, the number of bits used to encode \xe2\x80\xa60CbFloating point number in <code>$(0.0, 1.0]$</code>CiOpaque error for when encoding or decoding with pco failsCkOpaque error for when encoding or decoding the header failsBaFixed point-wise (absolute) errorDgWrapper around <code>PyCodec</code>s to use the <code>Codec</code> API.BnMethods implemented for <code>PyCodec</code>s.CiOpaque error for when encoding or decoding with SZ3 fails4BjTries taking nth order consecutive deltas.CiArray element types which can be compressed with tthresh.66CoErrors that may occur when applying the <code>ZlibCodec</code>.CoErrors that may occur when applying the <code>ZstdCodec</code>.CkAccess the wrapped <code>PyCodecClass</code> to use its \xe2\x80\xa6CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc Main0AgRegister a codec class.CeTry cloning the codec into a different context by \xe2\x80\xa6CkProvides access to the array\xe2\x80\x99s data as a mutable byte \xe2\x80\xa6AhA read-write array view.D`Errors that may occur when applying the <code>AsinhCodec</code>.CkArray element types which can be compressed with JPEG 2000.Dj<code>LogCodec</code> does not support non-positive (negative or zero) \xe2\x80\xa6Bm<code>Pcodec</code> failed to decode the dataBm<code>Pcodec</code> failed to encode the dataBbDynamic registry of codec classes.D`Errors that may occur when applying the <code>RoundCodec</code>.D`Errors that may occur when applying the <code>SperrCodec</code>.ChOpaque error for when encoding or decoding a slice failsCdType object for statically typed compression codecs.Bo<code>Sz3Codec</code> failed to encode the dataBoCodec providing compression using ZFP (classic)Bo<code>ZfpCodec</code> failed to decode the dataCf<code>ZfpClassicCodec</code> failed to decode the dataBo<code>ZfpCodec</code> failed to encode the dataCf<code>ZfpClassicCodec</code> failed to encode the dataBnOpaque error for when decoding with Zlib failsCkOpaque error for when encoding or decoding the header failsCmOpaque error for when encoding or decoding with Zstandard \xe2\x80\xa61DoDecompresses the <code>encoded</code> data into the <code>decoded</code> array.EeDecompress the <code>encoded</code> data into a <code>decoded</code> array using ZFP.0EdDecompress the <code>encoded</code> data into a <code>decoded</code> array using \xe2\x80\xa60Blthe base for the <code>FloatMult</code> modeCaThe optional mini-batch size used during trainingCjCI Status MSRV Latest Version Rust Doc Crate Rust Doc Main00EeSwizzle and reshape the input <code>data</code> array with the new <code>axes</code>.Dd<code>SwizzleReshapeCodec</code> cannot encode or decode with an \xe2\x80\xa6Di<code>SwizzleReshapeCodec</code> cannot encode or decode with an axis \xe2\x80\xa6AgFixed quantisation stepCjCodec to reinterpret data between different compatible \xe2\x80\xa6CkOpaque error for when encoding or decoding with SPERR fails=Cb<code>AsinhCodec</code> does not support the dtypeCe<code>BitRoundCodec</code> does not support the dtypeCm<code>FixedOffsetScaleCodec</code> does not support the dtypeCk<code>FourierNetworkCodec</code> does not support the dtypeCe<code>Jpeg2000Codec</code> does not support the dtypeC`<code>LogCodec</code> does not support the dtypeBn<code>Pcodec</code> does not support the dtypeCm<code>RandomProjectionCodec</code> does not support the dtypeCb<code>RoundCodec</code> does not support the dtypeCb<code>SperrCodec</code> does not support the dtypeCo<code>StochasticRoundingCodec</code> does not support the dtypeCk<code>SwizzleReshapeCodec</code> does not support the dtypeC`<code>Sz3Codec</code> does not support the dtypeCd<code>TthreshCodec</code> does not support the dtypeCi<code>UniformNoiseCodec</code> does not support the dtypeC`<code>ZfpCodec</code> does not support the dtypeCg<code>ZfpClassicCodec</code> does not support the dtypeCh<code>ZlibCodec</code> failed to decode the encoded dataCh<code>ZstdCodec</code> failed to decode the encoded dataCh<code>ZstdCodec</code> failed to encode the encoded dataCithe number of bits to which floating-point values are \xe2\x80\xa6ClThe number of Fourier features that the data coordinates \xe2\x80\xa6DkWraps a <code>PyCodecClass</code> to use the <code>DynCodecType</code> API.EeUnwrap the <code>PyCodecClass</code> to use its <code>PyCodecClassMethods</code> API.CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc MainDiReconstruct the linear-quantized <code>encoded</code> array using the \xe2\x80\xa6CmApplies the (approximate) inverse of random projection to \xe2\x80\xa6EfCreate an array with zeros of <code>dtype</code> and shape <code>shape</code>, and \xe2\x80\xa60Eh<code>BitRoundCodec</code> encode <code>keepbits</code> exceed the mantissa size for \xe2\x80\xa6Dm<code>ZfpCodec</code> was configured with an invalid expert <code>mode</code>Ed<code>ZfpClassicCodec</code> was configured with an invalid expert <code>mode</code>Cb1st order Lorenzo predictor + 1st order regressionCc<code>Jpeg2000Codec</code> failed to decode a sliceC`<code>SperrCodec</code> failed to decode a sliceCc<code>Jpeg2000Codec</code> failed to encode a sliceC`<code>SperrCodec</code> failed to encode a sliceCa<code>SperrCodec</code> failed to decode the dataCa<code>SperrCodec</code> failed to encode the dataCnUtility struct to serialize a <code>StaticCodec</code>\xe2\x80\x99s \xe2\x80\xa6DbErrors that may occur when applying the <code>TthreshCodec</code>.Actthresh error boundBgCodec that adds <code>seed</code>ed \xe2\x80\xa6DkAdds <code>$\\text{U}(-0.5 \\cdot scale, 0.5 \\cdot scale)$</code> uniform \xe2\x80\xa6DiInstantiate a codec of this type from a serialized <code>config</code>\xe2\x80\xa6CdInstantiate a codec from a configuration dictionary.1Bcmaximum amount of numbers in a pageCjCI Status MSRV Latest Version Rust Doc Crate Rust Doc MainDeReinterpret the data elements of the <code>array</code> using the \xe2\x80\xa6DbErrors are bounded by <em>either</em> the absolute or relative \xe2\x80\xa6DcErrors that may occur when applying the <code>BitRoundCodec</code>.AcCubic interpolationDi<code>Jpeg2000Codec</code> decoded into an invalid shape not matching \xe2\x80\xa6Dj<code>SperrCodec</code> decoded into an invalid shape not matching the \xe2\x80\xa6Co<code>ZlibCodec</code> produced less decoded data than expectedCo<code>ZstdCodec</code> produced less decoded data than expectedCf<code>Jpeg2000Codec</code> failed to decode the headerCl<code>LinearQuantizeCodec</code> failed to decode the headerBo<code>Pcodec</code> failed to decode the headerCc<code>SperrCodec</code> failed to decode the headerCa<code>Sz3Codec</code> failed to decode the headerCa<code>ZfpCodec</code> failed to decode the headerCh<code>ZfpClassicCodec</code> failed to decode the headerCb<code>ZlibCodec</code> failed to encode the headerCb<code>ZstdCodec</code> failed to encode the headerCf<code>Jpeg2000Codec</code> failed to encode the headerCl<code>LinearQuantizeCodec</code> failed to encode the headerBo<code>Pcodec</code> failed to encode the headerCc<code>SperrCodec</code> failed to encode the headerCa<code>Sz3Codec</code> failed to encode the headerCa<code>ZfpCodec</code> failed to encode the headerCh<code>ZfpClassicCodec</code> failed to encode the header87DcErrors that may occur when applying the <code>IdentityCodec</code>.Db<code>Sz3Codec</code> cannot encode an array of <code>shape</code>Eh<code>ReinterpretCodec</code> cannot cannot bitcast the <code>decode_dtype</code> as \xe2\x80\xa6DcErrors that may occur when applying the <code>Jpeg2000Codec</code>.ChOpaque error for when encoding or decoding a slice failsCfNumber of bins for quantization, written in base-2 \xe2\x80\xa6Ak2nd order Lorenzo predictorDc<code>FourierNetworkCodec</code> failed during a neural network \xe2\x80\xa6CkOpaque error for when an error occurs in the neural networkCiMarker type that represents the semantic version of a \xe2\x80\xa6CkOpaque error for when encoding or decoding with tthresh \xe2\x80\xa6DkWebAssembly component that exports the <code>numcodecs:abc/codec</code> \xe2\x80\xa6AdZFP compression mode0EhExport the <code>DynCodecType</code> <code>ty</code> to Python by generating a fresh \xe2\x80\xa6CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc Main0DaErrors are bounded by <em>both</em> the absolute and relative \xe2\x80\xa6DeErrors that may occur when calling <code>AnyArrayBase::assign</code>.Dk<code>Jpeg2000Codec</code> failed to decode from an excessive number of \xe2\x80\xa6Dh<code>SperrCodec</code> failed to decode from an excessive number of \xe2\x80\xa6Di<code>FourierNetworkCodec</code> can only decode one-dimensional byte \xe2\x80\xa6Dj<code>Jpeg2000Codec</code> can only decode one-dimensional byte arrays \xe2\x80\xa6Dg<code>Pcodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Dk<code>SperrCodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Di<code>Sz3Codec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Di<code>TthreshCodec</code> can only decode one-dimensional byte arrays \xe2\x80\xa6Di<code>ZfpCodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6De<code>ZfpClassicCodec</code> can only decode one-dimensional byte \xe2\x80\xa6Dj<code>ZlibCodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Dj<code>ZstdCodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6CmFourier network codec which trains and overfits a fourier \xe2\x80\xa6Da<code>LinearQuantizeCodec</code> cannot decode the provided dtypeEd<code>ReinterpretCodec</code> cannot decode a byte array with <code>shape</code> \xe2\x80\xa6CmOpaque error for when encoding or decoding with JPEG 2000 \xe2\x80\xa6CkOpaque error for when encoding or decoding the header failsAdLinear interpolationCkLossy codec to reduce the precision of floating point data.DbData types which the <code>LinearQuantizeCodec</code> can quantizeAfPco compression level.EdWrapper around <code>PyCodecClass</code>es to use the <code>DynCodecType</code> API.CdMethods implemented for <code>PyCodecClass</code>es.CjCodec to swizzle/swap the axes of an array and reshape it.Cc<code>TthreshCodec</code> failed to decode the dataCc<code>TthreshCodec</code> failed to encode the dataBlJSON schema for the codec\xe2\x80\x99s configuration.0CmRead the codec\xe2\x80\x99s instruction counter, which is based on \xe2\x80\xa6CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc Main0DjStochastically rounds the <code>data</code> to the nearest multiple of \xe2\x80\xa6EhThe reduced dimensionality <code>$K$</code> is derived from <code>epsilon</code>, as \xe2\x80\xa6Cd<code>Jpeg2000Codec</code> failed to decode the dataCd<code>Jpeg2000Codec</code> failed to encode the dataCgProjection kind that is used to generate the random \xe2\x80\xa6AfSPERR compression modeDeErrors that may occur when applying the <code>ZfpClassicCodec</code>.Aothe order of the delta encoding8DjReverts the swizzle and reshape of the <code>encoded</code> array with \xe2\x80\xa6BmFixed offset-scale codec which calculates \xe2\x80\xa6Dh<code>ReinterpretCodec</code> cannot decode the provided dtype which \xe2\x80\xa6Dk<code>LinearQuantizeCodec</code> cannot encode the provided dtype which \xe2\x80\xa6Dh<code>ReinterpretCodec</code> cannot encode the provided dtype which \xe2\x80\xa6Df<code>FourierNetworkCodec</code> must be provided the output array \xe2\x80\xa6AiPco delta encoding order.CdCodec that uses random projections to reduce the \xe2\x80\xa6Ad2nd order regressionDfErrors that may occur when applying the <code>ReinterpretCodec</code>.CbCodec instantiated inside a WebAssembly component.CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc Main0De<code>SwizzleReshapeCodec</code> cannot decode from an array with \xe2\x80\xa6Dk<code>SwizzleReshapeCodec</code> can only encode or decode with an axis \xe2\x80\xa6D`<code>ZfpCodec</code> failed to decode the array metadata headerDg<code>ZfpClassicCodec</code> failed to decode the array metadata headerD`<code>ZfpCodec</code> failed to encode the array metadata headerDg<code>ZfpClassicCodec</code> failed to encode the array metadata headerDfWebAssembly Interface Type (WIT) interfaces for <code>numcodecs</code>B`Fixed peak signal-to-noise ratioDgErrors that may occur when applying the <code>UniformNoiseCodec</code>.AjZFP non-finite values mode0:DiReinterpret the data elements of the <code>encoded</code> array using \xe2\x80\xa6Ch<code>ZfpCodec</code> only supports 1-4 dimensional dataCo<code>ZfpClassicCodec</code> only supports 1-4 dimensional dataAjJPEG 2000 compression modeAo1st+2nd order Lorenzo predictorDf<code>RandomProjectionCodec</code> cannot encode or decode from an \xe2\x80\xa6ClCodec that stochastically rounds the data to the nearest \xe2\x80\xa6CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc MainDkApplies random projection to the input <code>data</code> with the given \xe2\x80\xa6Dj<code>LinearQuantizeCodec</code> decoded an invalid array shape header \xe2\x80\xa6Dh<code>Pcodec</code> decoded an invalid array shape header which does \xe2\x80\xa6Dj<code>Sz3Codec</code> decoded an invalid array shape header which does \xe2\x80\xa6Di<code>TthreshCodec</code> decoded an invalid array shape header which \xe2\x80\xa6DkErrors that may occur when applying the <code>FourierNetworkCodec</code>\xe2\x80\xa6DkErrors that may occur when applying the <code>LinearQuantizeCodec</code>\xe2\x80\xa6Eh<code>RandomProjectionCodec</code> cannot decode into an array with <code>$D$</code> \xe2\x80\xa6DkErrors that may occur when applying the <code>SwizzleReshapeCodec</code>\xe2\x80\xa6BgCubic interpolation + Lorenzo predictorCkOpaque error for when encoding or decoding the header failsCm<code>AsinhCodec</code> cannot decode into the provided arrayD`<code>BitRoundCodec</code> cannot decode into the provided arrayDh<code>FixedOffsetScaleCodec</code> cannot decode into the provided arrayDf<code>FourierNetworkCodec</code> cannot decode into the provided arrayD`<code>IdentityCodec</code> cannot decode into the provided arrayD`<code>Jpeg2000Codec</code> cannot decode into the provided arrayCk<code>LogCodec</code> cannot decode into the provided arrayCi<code>Pcodec</code> cannot decode into the provided arrayDh<code>RandomProjectionCodec</code> cannot decode into the provided arrayDc<code>ReinterpretCodec</code> cannot decode into the provided arrayCm<code>RoundCodec</code> cannot decode into the provided arrayCm<code>SperrCodec</code> cannot decode into the provided arrayDh<code>StochasticRoundingCodec</code> cannot decode into the provided \xe2\x80\xa6Df<code>SwizzleReshapeCodec</code> cannot decode into the provided arrayCk<code>Sz3Codec</code> cannot decode into the provided arrayCo<code>TthreshCodec</code> cannot decode into the provided arrayDd<code>UniformNoiseCodec</code> cannot decode into the provided arrayCk<code>ZfpCodec</code> cannot decode into the provided arrayDb<code>ZfpClassicCodec</code> cannot decode into the provided arrayCl<code>ZlibCodec</code> cannot decode into the provided arrayCl<code>ZstdCodec</code> cannot decode into the provided arrayDk<code>LinearQuantizeCodec</code> cannot decode the provided dtype which \xe2\x80\xa6Di<code>LinearQuantizeCodec</code> cannot decode the decoded array into \xe2\x80\xa6DdMethod with which the reduced dimensionality <code>$K$</code> is \xe2\x80\xa6CmType object for a codec instantiated inside a WebAssembly \xe2\x80\xa6DiUtility function to instantiate a codec of the given <code>ty</code>, \xe2\x80\xa6DdInstantiate a codec from the <code>PyCodecRegistry</code> with a \xe2\x80\xa6CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc Main00DjReverts the swizzle and reshape of the <code>encoded</code> array with \xe2\x80\xa6Dc<code>ZlibCodec</code> decode consumed less encoded data, which \xe2\x80\xa6Dc<code>ZstdCodec</code> decode consumed less encoded data, which \xe2\x80\xa6BkErrors that may occur when applying the \xe2\x80\xa6BhLinear interpolation + Lorenzo predictor1Ah1st+2nd order regressionDgErrors that can occur when using the <code>ReproducibleWasmCodec</code>EgExtract the provided <code>density</code> if it is <code>Some(_)</code>, or compute \xe2\x80\xa6Dg<code>RandomProjectionCodec</code> cannot decode from an array with \xe2\x80\xa6DgFind a \xe2\x80\x98safe\xe2\x80\x99 number of components <code>$K$</code> to randomly \xe2\x80\xa6:CmApplies the (approximate) inverse of random projection to \xe2\x80\xa6Di<code>FourierNetworkCodec</code> can only decode one-dimensional byte \xe2\x80\xa6Dj<code>Jpeg2000Codec</code> can only decode one-dimensional byte arrays \xe2\x80\xa6Dk<code>LinearQuantizeCodec</code> can only decode one-dimensional arrays \xe2\x80\xa6Dg<code>Pcodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Dk<code>SperrCodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Di<code>Sz3Codec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Di<code>TthreshCodec</code> can only decode one-dimensional byte arrays \xe2\x80\xa6Di<code>ZfpCodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6De<code>ZfpClassicCodec</code> can only decode one-dimensional byte \xe2\x80\xa6Dj<code>ZlibCodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Dj<code>ZstdCodec</code> can only decode one-dimensional byte arrays but \xe2\x80\xa6Df<code>ZfpCodec</code> does not support the fixed accuracy mode for \xe2\x80\xa6Di<code>ZfpClassicCodec</code> does not support the fixed accuracy mode \xe2\x80\xa6Cb1st order Lorenzo predictor + 2nd order regressionCb2nd order Lorenzo predictor + 1st order regressionDh<code>RandomProjectionCodec</code> cannot decode from an array with zeroBkErrors that may occur when applying the \xe2\x80\xa6CjCI Status MSRV Latest Version Rust Doc Crate Rust Doc Main0CmUtility function to serialize a codec\xe2\x80\x99s config together \xe2\x80\xa61CmApplies the (approximate) inverse of random projection to \xe2\x80\xa6Cf1st+2nd order Lorenzo predictor + 1st order regressionCj1st order Lorenzo predictor + 1st and 2nd order regressionCb2nd order Lorenzo predictor + 2nd order regressionCf1st+2nd order Lorenzo predictor + 2nd order regression9Cj1st+2nd order Lorenzo predictor + 1st+2nd order regression")