//! Raw FFI bindings to the EBCC C library.
//! 
//! This module contains the low-level, unsafe bindings generated by bindgen.
//! These should not be used directly - use the safe wrappers in the parent modules instead.

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

// Include the generated bindings
#[cfg(feature = "bindgen")]
include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

// If bindgen is not available, provide manual bindings for the core types
#[cfg(not(feature = "bindgen"))]
mod manual_bindings {
    use core::ffi::{c_float, c_double, c_uchar};
    
    pub const NDIMS: usize = 3;
    
    pub mod residual_t {
        pub type Type = ::core::ffi::c_uint;
        pub const NONE: Type = 0;
        pub const SPARSIFICATION_FACTOR: Type = 1;
        pub const MAX_ERROR: Type = 2;
        pub const RELATIVE_ERROR: Type = 3;
        pub const QUANTILE: Type = 4;
    }
    
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct codec_config_t {
        pub dims: [usize; NDIMS],
        pub base_cr: c_float,
        pub residual_compression_type: residual_t::Type,
        pub residual_cr: c_float,
        pub error: c_float,
        pub quantile: c_double,
    }
    
    unsafe extern "C" {
        pub fn encode_climate_variable(
            data: *mut c_float,
            config: *mut codec_config_t,
            out_buffer: *mut *mut c_uchar,
        ) -> usize;
        
        pub fn decode_climate_variable(
            data: *mut c_uchar,
            data_size: usize,
            out_buffer: *mut *mut c_float,
        ) -> usize;
        
        pub fn free_buffer(buffer: *mut ::core::ffi::c_void);
        
        pub fn print_config(config: *mut codec_config_t);
        
        pub fn log_set_level_from_env();
    }
}

#[cfg(not(feature = "bindgen"))]
pub use manual_bindings::*;