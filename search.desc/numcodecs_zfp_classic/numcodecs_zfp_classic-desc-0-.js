searchState.loadedDescShard("numcodecs_zfp_classic", 0, "CI Status MSRV Latest Version Rust Doc Crate Rust Doc Main\n<code>ZfpClassicCodec</code> can only decode one-dimensional byte …\n<code>ZfpClassicCodec</code> can only decode one-dimensional byte …\n<code>ZfpClassicCodec</code> only supports 1-4 dimensional data\nThe most general mode, which can describe all four other …\nIn fixed-accuracy mode, all transform coefficient bit …\n<code>ZfpClassicCodec</code> does not support the fixed accuracy mode …\nIn fixed-precision mode, the number of bits used to encode …\nIn fixed-rate mode, each d-dimensional compressed block of …\n<code>ZfpClassicCodec</code> failed to decode the header\n<code>ZfpClassicCodec</code> failed to encode the header\n<code>ZfpClassicCodec</code> was configured with an invalid expert <code>mode</code>\n<code>ZfpClassicCodec</code> failed to decode the array metadata header\n<code>ZfpClassicCodec</code> failed to encode the array metadata header\n<code>ZfpClassicCodec</code> cannot decode into the provided array\nLossless per-block compression that preserves integer and …\n<code>ZfpClassicCodec</code> does not support the dtype\nCodec providing compression using ZFP (classic)\nErrors that may occur when applying the <code>ZfpClassicCodec</code>.\nZFP compression mode\nDtypes that Zfp can compress and decompress\n<code>ZfpClassicCodec</code> failed to decode the data\n<code>ZfpClassicCodec</code> failed to encode the data\nOpaque error for when encoding or decoding the header fails\nCompress the <code>data</code> array using ZFP with the provided <code>mode</code>.\nDecompress the <code>encoded</code> data into an array using ZFP.\nDecompress the <code>encoded</code> data into a <code>decoded</code> array using ZFP.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the corresponding <code>AnyArrayDType</code>\nZFP compression mode\nThe unexpected dtype of the encoded array\nThe unexpected compression mode\nThe unexpected shape of the data\nThe unexpected shape of the encoded array\nOpaque source error\nOpaque source error\nThe source of the error\nMaximum number of bits used to represent a block\nMaximum number of bit planes encoded\nMinimum number of compressed bits used to represent a block\nSmallest absolute bit plane number encoded.\nNumber of bit planes encoded\nRate in bits per value\nAbsolute error tolerance")