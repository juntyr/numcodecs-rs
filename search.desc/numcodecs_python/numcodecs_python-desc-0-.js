searchState.loadedDescShard("numcodecs_python", 0, "CI Status MSRV Latest Version Rust Doc Crate Rust Doc Main\nRepresents a <code>numcodecs.abc.Codec</code> <em>instance</em> object.\nRepresents a <code>numcodecs.abc.Codec</code> <em>class</em> object.\nMethods implemented for <code>CodecClass</code>es.\nMethods implemented for <code>Codec</code>s.\nWrapper around Python <code>Codec</code>s to use the Rust <code>Codec</code> API.\nWrapper around Python <code>CodecClass</code>es to use the Rust …\nDynamic registry of codec classes.\nAccess the wrapped <code>Codec</code> to use its Python <code>CodecMethods</code> …\nAccess the wrapped <code>CodecClass</code> to use its Python …\nReturns the <code>CodecClass</code> of this codec.\nInstantiate a codec from a configuration dictionary.\nGets the codec identifier.\nDecodes the data in the buffer <code>buf</code> and returns the result.\nEncodes the data in the buffer <code>buf</code> and returns the result.\nExport the <code>DynCodecType</code> <code>ty</code> to Python by generating a fresh …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWraps a <code>Codec</code> to use the Rust <code>Codec</code> API.\nWraps a <code>CodecClass</code> to use the Rust <code>DynCodecType</code> API.\nInstantiate a codec from the <code>Registry</code> with a serialized …\nInstantiate a codec from a configuration dictionary.\nReturns a dictionary holding configuration parameters for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the <code>Codec</code> to use its Python <code>CodecMethods</code> API.\nUnwrap the <code>CodecClass</code> to use its Python <code>CodecClassMethods</code> …\nRegister a codec class.")