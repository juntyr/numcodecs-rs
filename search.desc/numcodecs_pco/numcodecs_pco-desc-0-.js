searchState.loadedDescShard("numcodecs_pco", 0, "CI Status MSRV Latest Version Rust Doc Crate Rust Doc Main\nAutomatically detects a good mode.\nAutomatically detects a detects a good delta encoding.\nOnly uses the classic mode\nThe dtype representation of the type\n<code>Pcodec</code> decoded an invalid array shape header which does …\n<code>Pcodec</code> can only decode one-dimensional byte arrays but …\n<code>Pcodec</code> can only decode one-dimensional byte arrays but …\nDivide the chunk into equal pages of up to this many …\n<code>Pcodec</code> failed to decode the header\n<code>Pcodec</code> failed to encode the header\n<code>Pcodec</code> cannot decode into the provided array\nNever uses delta encoding.\nOpaque error for when encoding or decoding with pco fails\nPco compression level.\nDtypes that pco can compress and decompress\n<code>Pcodec</code> failed to decode the data\nPco delta encoding order.\nPco delta encoding\nArray element types which can be compressed with pco.\n<code>Pcodec</code> failed to encode the data\nOpaque error for when encoding or decoding the header fails\nPco compression mode\nPco paging mode\nCodec providing compression using pco\nErrors that may occur when applying the <code>Pcodec</code>.\nTries taking nth order consecutive deltas.\nTries using the <code>FloatMult</code> mode with a given base.\nTries using the <code>FloatQuant</code> mode with the given number of …\nTries using the <code>IntMult</code> mode with a given base.\nTries delta encoding according to an extra latent variable …\n<code>Pcodec</code> does not support the dtype\nCompresses the input <code>data</code> array using pco with the given …\nDecompresses the <code>encoded</code> data into an array.\nDecompresses the <code>encoded</code> data into the <code>decoded</code> array.\nSpecifies how delta encoding should be chosen\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>PcoDType</code> into an <code>AnyArrayDType</code>\nCompression level, ranging from 0 (weak) over 8 (very …\nSpecifies how the mode should be determined\nSpecifies how the chunk should be split into pages\nThe codec’s encoding format version. Do not provide this …\nthe order of the delta encoding\nthe base for the <code>FloatMult</code> mode\nthe number of bits to which floating-point values are …\nthe base for the <code>IntMult</code> mode\nmaximum amount of numbers in a page\nThe unexpected dtype of the encoded array\nThe unexpected shape of the encoded array\nOpaque source error\nOpaque source error\nOpaque source error\nOpaque source error\nSource error\nThe source of the error")