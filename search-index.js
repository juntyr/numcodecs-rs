var searchIndex = new Map(JSON.parse('[\
["numcodecs",{"t":"IIGGGIIIKKTKRTPKKRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRRPKFRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRNNNNNNNNNNNNNNNNNNNMNHMNNMMNNMNNNNNNNNNNNMMNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNMNNNNNNNNNNNOOOO","n":["AnyArcArray","AnyArray","AnyArrayAssignError","AnyArrayBase","AnyArrayDType","AnyArrayView","AnyArrayViewMut","AnyCowArray","AnyRawData","ArrayDType","CODEC_ID","Codec","Codec","DTYPE","DTypeMismatch","DynCodec","DynCodecType","Error","F32","F32","F32","F32","F32","F32","F32","F32","F64","F64","F64","F64","F64","F64","F64","F64","I16","I16","I16","I16","I16","I16","I16","I16","I32","I32","I32","I32","I32","I32","I32","I32","I64","I64","I64","I64","I64","I64","I64","I64","I8","I8","I8","I8","I8","I8","I8","I8","RawData","ShapeMismatch","StaticCodec","StaticCodecType","Type","U16","U16","U16","U16","U16","U16","U16","U16","U32","U32","U32","U32","U32","U32","U32","U32","U64","U64","U64","U64","U64","U64","U64","U64","U8","U8","U8","U8","U8","U8","U8","U8","as_bytes","as_typed","as_typed_mut","assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","codec_from_config","codec_from_config","codec_from_config_with_id","codec_id","codec_id","cow","decode","decode_into","deserialize","dtype","encode","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_config","get_config","hash","into","into","into","into","into_cow","into_cow","into_owned","is_empty","len","of","of","serialize","serialize_codec_config_with_id","shape","size","strides","to_binary","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","view","view_mut","with_bytes_mut","with_zeros_bytes","with_zeros_bytes","zeros","zeros","dst","dst","src","src"],"q":[[0,"numcodecs"],[188,"numcodecs::AnyArrayAssignError"],[192,"numcodecs::array"],[193,"alloc::borrow"],[194,"ndarray::aliases"],[195,"ndarray"],[196,"core::option"],[197,"core::result"],[198,"numcodecs::codec"],[199,"serde::de"],[200,"core::marker"],[201,"core::error"],[202,"core::fmt"],[203,"serde::ser"],[204,"core::hash"],[205,"ndarray::data_repr"],[206,"alloc::string"],[207,"core::any"],[208,"core::ops::function"]],"i":[0,0,0,0,0,0,0,0,0,0,21,0,16,46,12,0,0,25,47,26,30,31,23,1,14,6,47,26,30,31,23,1,14,6,47,26,30,31,23,1,14,6,47,26,30,31,23,1,14,6,47,26,30,31,23,1,14,6,47,26,30,31,23,1,14,6,46,12,0,0,18,47,26,30,31,23,1,14,6,47,26,30,31,23,1,14,6,47,26,30,31,23,1,14,6,47,26,30,31,23,1,14,6,1,1,1,1,1,20,14,12,1,20,14,12,1,14,1,14,1,14,14,16,20,0,16,20,1,25,25,14,1,25,1,14,1,14,14,12,12,1,20,14,12,21,25,14,1,20,14,12,26,1,1,1,1,20,14,14,0,1,14,1,14,1,14,14,12,1,20,14,12,1,20,14,12,18,1,20,14,12,1,1,1,26,1,26,1,48,49,48,49],"f":"```````````````````````````````````````````````````````````````````````````````````````````````````````{{{d{{b{c}}}}}{{j{{h{f}}}}}l}{{{d{{b{c}}}}}{{Ab{{d{{A`{n}}}}}}}l}{{{d{Ad{b{c}}}}}{{Ab{{d{Ad{A`{n}}}}}}}l}{{{d{Ad{b{c}}}}{d{{b{e}}}}}{{Aj{AfAh}}}ll}{d{{d{c}}}{}}000{{{d{Ad}}}{{d{Adc}}}{}}000{{{d{{b{c}}}}}{{b{c}}}l}{{{d{Al}}}Al}{{d{d{Adc}}}Af{}}0{dAf}00{{{d{{B`{}{{An{c}}}}}}e}{{Aj{c}}}{{Bd{}{{Bb{}}}}}Bf}{{{d{{Bh{c}}}}e}{{Aj{g}}}BjBf{}}{{{d{c}}e}AjB`Bf}{{{d{{B`{}{{An{c}}}}}}}{{d{Bl}}}{{Bd{}{{Bb{}}}}}}{{{d{{Bh{c}}}}}{{d{Bl}}}Bj}{{{d{{b{c}}}}}Bnl}{{{d{{Cb{}{{C`{c}}}}}}Bn}{{Aj{Cdc}}}{CfChCj}}{{{d{{Cb{}{{C`{c}}}}}}ClCn}{{Aj{Afc}}}{CfChCj}}{c{{Aj{Al}}}Bf}{{{d{{b{c}}}}}All}3{{{d{{b{c}}}}{d{{b{c}}}}}D`l}{{{d{Al}}{d{Al}}}D`}{{{d{{b{c}}}}{d{AdDb}}}Ddl}{{{d{Al}}{d{AdDb}}}Dd}0{{{d{Ah}}{d{AdDb}}}Dd}0{cc{}}000{c{{Aj{Bj}}}Bf}{{{d{{Cb{}{{C`{c}}}}}}e}Aj{CfChCj}Df}{{{d{Al}}{d{Adc}}}AfDh}{{}c{}}000{CdBn}{{{b{{Dj{Af}}}}}Bn}{{{b{c}}}Cdl}{{{d{{b{c}}}}}D`l}{{{d{{b{c}}}}}Dll}{{}{{Bh{c}}}Bj}{{}Al}{{{d{Al}}c}AjDf}{{{d{c}}{d{e}}g}AjDnBdDf}{{{d{{b{c}}}}}{{d{{h{Dl}}}}}l}{AlDl}{{{d{{b{c}}}}}{{d{{h{E`}}}}}l}{AlAl}{dc{}}0{dEb}0{c{{Aj{e}}}{}{}}000{{}{{Aj{c}}}{}}000{{{d{{Bd{}{{Bb{c}}}}}}}cB`}{dEd}000{{{d{{b{c}}}}}Cll}{{{d{Ad{b{c}}}}}Cnl}{{{d{Ad{b{c}}}}g}el{}{{Eh{{d{Ad{h{f}}}}}{{Ef{e}}}}}}{{Al{d{{h{Dl}}}}e}{{Ej{Cdc}}}{}{{Eh{{d{Ad{h{f}}}}}{{Ef{c}}}}}}{{Al{d{{h{Dl}}}}e}{{Ej{{b{{Dj{Af}}}}c}}}{}{{Eh{{d{Ad{h{f}}}}}{{Ef{c}}}}}}{{Al{d{{h{Dl}}}}}Cd}{{Al{d{{h{Dl}}}}}{{b{{Dj{Af}}}}}}````","D":"Hl","p":[[6,"AnyArrayBase",0,192],[1,"reference"],[1,"u8"],[1,"slice"],[6,"Cow",193],[10,"AnyRawData",0,192],[8,"IxDyn",194],[5,"ArrayBase",195],[6,"Option",196],[0,"mut"],[1,"unit"],[6,"AnyArrayAssignError",0,192],[6,"Result",197],[6,"AnyArrayDType",0,192],[17,"Codec"],[10,"DynCodecType",0,198],[17,"Type"],[10,"DynCodec",0,198],[10,"Deserializer",199],[5,"StaticCodecType",0,198],[10,"StaticCodec",0,198],[1,"str"],[8,"AnyCowArray",0,192],[17,"Error"],[10,"Codec",0,198],[8,"AnyArray",0,192],[10,"Send",200],[10,"Sync",200],[10,"Error",201],[8,"AnyArrayView",0,192],[8,"AnyArrayViewMut",0,192],[1,"bool"],[5,"Formatter",202],[8,"Result",202],[10,"Serializer",203],[10,"Hasher",204],[5,"OwnedRepr",205],[1,"usize"],[10,"Serialize",203],[1,"isize"],[5,"String",206],[5,"TypeId",207],[17,"Output"],[10,"FnOnce",208],[1,"tuple"],[10,"ArrayDType",0],[8,"AnyArcArray",0],[15,"DTypeMismatch",188],[15,"ShapeMismatch",188]],"r":[[0,192],[1,192],[2,192],[3,192],[4,192],[5,192],[6,192],[7,192],[8,192],[9,192],[11,198],[15,198],[16,198],[68,198],[69,198],[124,198],[159,198]],"b":[[136,"impl-Debug-for-AnyArrayDType"],[137,"impl-Display-for-AnyArrayDType"],[138,"impl-Debug-for-AnyArrayAssignError"],[139,"impl-Display-for-AnyArrayAssignError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAHoACwATAC8ASAAfAGwADgB8AAAAfwAAAIMAAACGAAYAkwAAAJ8AAAClAAsAsgADAA=="}],\
["numcodecs_bit_round",{"t":"TRFGPKTTPTPHNNNNNNNNNNNNNNNNMNNNNONNMNNNNNNNNNOOO","n":["BINARY_ONE","Binary","BitRoundCodec","BitRoundCodecError","ExcessiveKeepBits","Float","MANITSSA_BITS","MANTISSA_MASK","MismatchedDecodeIntoArray","TY","UnsupportedDtype","bit_round","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_binary","from_config","get_config","into","into","keepbits","serialize","source","to_binary","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","dtype","keepbits","source"],"q":[[0,"numcodecs_bit_round"],[46,"numcodecs_bit_round::BitRoundCodecError"],[49,"ndarray"],[50,"core::result"],[51,"ndarray::data_traits"],[52,"ndarray::dimension::dimension_trait"],[53,"numcodecs::array"],[54,"serde::de"],[55,"core::fmt"],[56,"core::marker"],[57,"core::ops::bit"],[58,"core::ops::arith"],[59,"serde::ser"],[60,"core::error"],[61,"core::option"],[62,"alloc::string"],[63,"core::any"]],"i":[6,6,0,0,4,0,6,6,4,6,4,0,12,4,12,4,12,12,12,12,12,12,12,4,4,12,4,4,6,12,12,12,4,12,12,4,6,12,4,12,4,12,4,12,12,4,37,37,38],"f":"```````````{{{b{eg}}d}{{j{{f{cg}}h}}}l{{A`{}{{n{c}}}}}Ab}{Ad{{Ad{c}}}{}}0{{{Ad{Af}}}{{Ad{Afc}}}{}}0{{{Ad{Ah}}}Ah}{{Ad{Ad{Afc}}}Aj{}}{AdAj}{{{Ad{Ah}}Al}{{j{Anc}}}{}}{{{Ad{Ah}}B`Bb}{{j{Ajc}}}{}}{c{{j{Ah}}}Bd}2{{{Ad{h}}{Ad{AfBf}}}Bh}0{cc{}}0{Bjh}{c{{l{}{{Bl{c}}}}}{Bn{Cb{}{{C`{c}}}}{Cf{Cd}{{C`{c}}}}{Ch{c}{{C`{c}}}}{Cj{c}}{Cl{c}{{C`{c}}}}{Cn{c}}}}4{{{Ad{Ah}}c}jD`}{{}c{}}0`1{{{Ad{h}}}{{Dd{{Ad{Db}}}}}}{{{l{}{{Bl{c}}}}}c{Bn{Cb{}{{C`{c}}}}{Cf{Cd}{{C`{c}}}}{Ch{c}{{C`{c}}}}{Cj{c}}{Cl{c}{{C`{c}}}}{Cn{c}}}}{Adc{}}{AdDf}{c{{j{e}}}{}{}}0{{}{{j{c}}}{}}0{Ad}{AdDh}0```","D":"Bn","p":[[5,"ArrayBase",49],[1,"u8"],[8,"Array",49],[6,"BitRoundCodecError",0],[6,"Result",50],[10,"Float",0],[17,"Elem"],[10,"Data",51],[10,"Dimension",52],[1,"reference"],[0,"mut"],[5,"BitRoundCodec",0],[1,"unit"],[8,"AnyCowArray",53],[8,"AnyArray",53],[8,"AnyArrayView",53],[8,"AnyArrayViewMut",53],[10,"Deserializer",54],[5,"Formatter",55],[8,"Result",55],[6,"AnyArrayAssignError",53],[17,"Binary"],[10,"Copy",56],[17,"Output"],[10,"Not",57],[1,"u32"],[10,"Shr",57],[10,"Add",58],[10,"AddAssign",58],[10,"BitAnd",57],[10,"BitAndAssign",57],[10,"Serializer",59],[10,"Error",60],[6,"Option",61],[5,"String",62],[5,"TypeId",63],[15,"ExcessiveKeepBits",46],[15,"MismatchedDecodeIntoArray",46]],"r":[],"b":[[23,"impl-Debug-for-BitRoundCodecError"],[24,"impl-Display-for-BitRoundCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABoABQANAAwAHAAAAB4AAQAjAAEAJgAIAA=="}],\
["numcodecs_identity",{"t":"FGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNO","n":["IdentityCodec","IdentityCodecError","MismatchedDecodeIntoArray","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_config","get_config","into","into","serialize","source","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","source"],"q":[[0,"numcodecs_identity"],[34,"numcodecs_identity::IdentityCodecError"],[35,"numcodecs::array"],[36,"core::result"],[37,"serde::de"],[38,"core::fmt"],[39,"serde::ser"],[40,"core::error"],[41,"core::option"],[42,"alloc::string"],[43,"core::any"]],"i":[0,0,11,3,11,3,11,3,3,3,3,3,3,3,11,11,3,11,11,3,3,3,11,3,11,3,11,3,11,3,11,3,3,11,20],"f":"```{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{{b{f}}j}{{n{lc}}}{}}{{{b{f}}A`Ab}{{n{hc}}}{}}{c{{n{f}}}Ad}2{{{b{Af}}{b{dAh}}}Aj}0{cc{}}{AlAf}13{{{b{f}}c}nAn}{{}c{}}01{{{b{Af}}}{{Bb{{b{B`}}}}}}{bc{}}{bBd}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{b}{bBf}0`","D":"Ab","p":[[1,"reference"],[0,"mut"],[5,"IdentityCodec",0],[1,"unit"],[8,"AnyCowArray",35],[8,"AnyArray",35],[6,"Result",36],[8,"AnyArrayView",35],[8,"AnyArrayViewMut",35],[10,"Deserializer",37],[6,"IdentityCodecError",0],[5,"Formatter",38],[8,"Result",38],[6,"AnyArrayAssignError",35],[10,"Serializer",39],[10,"Error",40],[6,"Option",41],[5,"String",42],[5,"TypeId",43],[15,"MismatchedDecodeIntoArray",34]],"r":[],"b":[[14,"impl-Display-for-IdentityCodecError"],[15,"impl-Debug-for-IdentityCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABoABAAEAAwAEgAAABQAAQAYAAoA"}],\
["numcodecs_linear_quantize",{"t":"PPPPKPPPGFGGFPPPPTKTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPONNNNNNNNNNMNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNMMMHHHMNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOO","n":["DecodeInvalidShapeHeader","EncodedDataNotOneDimensional","F32","F64","Float","HeaderDecodeFailed","HeaderEncodeFailed","InvalidEncodedDType","LinearQuantizeBins","LinearQuantizeCodec","LinearQuantizeCodecError","LinearQuantizeDType","LinearQuantizeHeaderError","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","MismatchedEncodeDType","NonFiniteData","ONE","Unsigned","ZERO","ZERO","_1B1","_1B10","_1B11","_1B12","_1B13","_1B14","_1B15","_1B16","_1B17","_1B18","_1B19","_1B2","_1B20","_1B21","_1B22","_1B23","_1B24","_1B25","_1B26","_1B27","_1B28","_1B29","_1B3","_1B30","_1B31","_1B32","_1B33","_1B34","_1B35","_1B36","_1B37","_1B38","_1B39","_1B4","_1B40","_1B41","_1B42","_1B43","_1B44","_1B45","_1B46","_1B47","_1B48","_1B49","_1B5","_1B50","_1B51","_1B52","_1B53","_1B54","_1B55","_1B56","_1B57","_1B58","_1B59","_1B6","_1B60","_1B61","_1B62","_1B63","_1B64","_1B7","_1B8","_1B9","bits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clamp","clone","clone","clone","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","decode","decode_into","deserialize","deserialize","deserialize","dtype","encode","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_config","get_config","into","into","into","into","into","is_finite","maximum","minimum","quantize","reconstruct","reconstruct_into","scale_for_bits","serialize","serialize","serialize","source","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","configured","configured","decoded","dtype","provided","provided","provided","shape","source","source","source"],"q":[[0,"numcodecs_linear_quantize"],[168,"numcodecs_linear_quantize::LinearQuantizeCodecError"],[179,"numcodecs::array"],[180,"core::result"],[181,"serde::de"],[182,"core::fmt"],[183,"ndarray::error"],[184,"serde::ser"],[185,"ndarray"],[186,"alloc::vec"],[187,"ndarray::data_traits"],[188,"ndarray::dimension::dimension_trait"],[189,"core::ops::function"],[190,"ndarray::aliases"],[191,"core::error"],[192,"core::option"],[193,"alloc::string"],[194,"core::any"]],"i":[16,16,5,5,0,16,16,16,0,0,0,0,0,16,16,16,16,3,0,3,26,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,5,6,16,17,4,5,6,16,17,3,4,5,6,4,5,6,4,5,5,6,6,4,4,4,5,6,4,4,5,5,16,16,17,17,4,5,6,16,16,17,4,4,4,5,6,16,17,3,3,3,0,0,0,3,4,5,6,16,17,4,5,6,5,16,17,4,5,6,16,17,4,5,6,16,17,4,4,5,6,16,17,37,38,39,40,37,38,39,41,42,43,44],"f":"``````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}0000{{{b{d}}}{{b{dc}}}{}}0000{{fff}f}{{{b{h}}}h}{{{b{j}}}j}{{{b{l}}}l}{{b{b{dc}}}n{}}00{bn}0000{{{b{h}}A`}{{Ad{Abc}}}{}}{{{b{h}}AfAh}{{Ad{nc}}}{}}{c{{Ad{h}}}Aj}{c{{Ad{j}}}Aj}{c{{Ad{l}}}Aj}`4{{{b{j}}{b{dAl}}}An}0{{{b{B`}}{b{dAl}}}An}0{{{b{Bb}}{b{dAl}}}An}0{cc{}}00{BdB`}117{{{b{h}}c}AdBf}{{}c{}}0000{fBh}{{ff}f}0{{{b{{Bj{eg}}}}k}{{Ad{{Bl{i}}B`}}}f{{C`{}{{Bn{c}}}}}CbCd{{Ch{c}{{Cf{i}}}}}}{{{b{{Cj{c}}}}g}{{Ad{{Cl{e}}B`}}}Cdf{{Ch{c}{{Cf{e}}}}}}{{{b{{Cj{c}}}}{Cn{e}}g}{{Ad{nB`}}}Cdf{{Ch{c}{{Cf{e}}}}}}{D`f}7{{{b{j}}c}AdBf}{{{b{l}}c}AdBf}{{{b{B`}}}{{Dd{{b{Db}}}}}}{{{b{Bb}}}{{Dd{{b{Db}}}}}}{bc{}}00{bDf}00{c{{Ad{e}}}{}{}}0000{{}{{Ad{c}}}{}}0000{b}{bDh}0000```````````","D":"Ff","p":[[1,"reference"],[0,"mut"],[10,"Float",0],[5,"LinearQuantizeCodec",0],[6,"LinearQuantizeDType",0],[6,"LinearQuantizeBins",0],[1,"unit"],[8,"AnyCowArray",179],[8,"AnyArray",179],[6,"Result",180],[8,"AnyArrayView",179],[8,"AnyArrayViewMut",179],[10,"Deserializer",181],[5,"Formatter",182],[8,"Result",182],[6,"LinearQuantizeCodecError",0],[5,"LinearQuantizeHeaderError",0],[5,"ShapeError",183],[10,"Serializer",184],[1,"bool"],[5,"ArrayBase",185],[5,"Vec",186],[17,"Elem"],[10,"Data",187],[10,"Dimension",188],[10,"Unsigned",0],[17,"Output"],[10,"Fn",189],[1,"slice"],[8,"ArrayD",190],[8,"ArrayViewMutD",190],[1,"u8"],[10,"Error",191],[6,"Option",192],[5,"String",193],[5,"TypeId",194],[15,"MismatchedEncodeDType",168],[15,"MismatchedDecodeIntoDtype",168],[15,"MismatchedDecodeIntoShape",168],[15,"InvalidEncodedDType",168],[15,"EncodedDataNotOneDimensional",168],[15,"HeaderEncodeFailed",168],[15,"HeaderDecodeFailed",168],[15,"DecodeInvalidShapeHeader",168]],"r":[],"b":[[115,"impl-Display-for-LinearQuantizeDType"],[116,"impl-Debug-for-LinearQuantizeDType"],[117,"impl-Debug-for-LinearQuantizeCodecError"],[118,"impl-Display-for-LinearQuantizeCodecError"],[119,"impl-Display-for-LinearQuantizeHeaderError"],[120,"impl-Debug-for-LinearQuantizeHeaderError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAIAACAADAAEAFgA/AFcACQBiAA8AcwAGAH0AAACAAAEAjgAaAA=="}],\
["numcodecs_log",{"t":"KFGPPPPNNNNNNNNNNNHMHNNNNNNNNNMMHMNNNNNNNNNNNO","n":["Float","LogCodec","LogCodecError","MismatchedDecodeIntoArray","NegativeData","NonFiniteData","UnsupportedDtype","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","exp_m1","exp_m1","exp_m1_into","fmt","fmt","from","from","from","from_config","get_config","into","into","is_finite","is_negative","ln_1p","ln_1p","serialize","source","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","source"],"q":[[0,"numcodecs_log"],[45,"numcodecs_log::LogCodecError"],[46,"numcodecs::array"],[47,"core::result"],[48,"serde::de"],[49,"ndarray"],[50,"ndarray::data_traits"],[51,"ndarray::dimension::dimension_trait"],[52,"core::fmt"],[53,"serde::ser"],[54,"core::error"],[55,"core::option"],[56,"alloc::string"],[57,"core::any"]],"i":[0,0,0,13,13,13,13,3,13,3,13,3,3,3,3,3,3,3,0,14,0,13,13,3,13,13,3,3,3,13,14,14,0,14,3,13,3,13,3,13,3,13,3,3,13,29],"f":"```````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{{b{f}}j}{{n{lc}}}{}}{{{b{f}}A`Ab}{{n{hc}}}{}}{c{{n{f}}}Ad}2{{{Af{eg}}}{{n{{Ah{cg}}Aj}}}Al{{B`{}{{An{c}}}}}Bb}{AlAl}{{{Bd{ce}}{Bf{ce}}}{{n{hAj}}}AlBb}{{{b{Aj}}{b{dBh}}}Bj}0{cc{}}0{BlAj}6{{{b{f}}c}nBn}{{}c{}}0{AlC`}0872{{{b{Aj}}}{{Cd{{b{Cb}}}}}}{bc{}}{bCf}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{b}{bCh}0`","D":"Bh","p":[[1,"reference"],[0,"mut"],[5,"LogCodec",0],[1,"unit"],[8,"AnyCowArray",46],[8,"AnyArray",46],[6,"Result",47],[8,"AnyArrayView",46],[8,"AnyArrayViewMut",46],[10,"Deserializer",48],[5,"ArrayBase",49],[8,"Array",49],[6,"LogCodecError",0],[10,"Float",0],[17,"Elem"],[10,"Data",50],[10,"Dimension",51],[8,"ArrayView",49],[8,"ArrayViewMut",49],[5,"Formatter",52],[8,"Result",52],[6,"AnyArrayAssignError",46],[10,"Serializer",53],[1,"bool"],[10,"Error",54],[6,"Option",55],[5,"String",56],[5,"TypeId",57],[15,"MismatchedDecodeIntoArray",45]],"r":[],"b":[[21,"impl-Debug-for-LogCodecError"],[22,"impl-Display-for-LogCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABoABAAIAAoAFgABABoAAgAjAAoA"}],\
["numcodecs_python",{"t":"FFFFKKFNNNNNNNNNNNNMNNNMNMNMNNMNHNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["PyCodec","PyCodecAdapter","PyCodecClass","PyCodecClassAdapter","PyCodecClassMethods","PyCodecMethods","PyCodecRegistry","as_codec","as_codec_class","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone_into","clone_to_uninit","codec_from_config","codec_from_config","codec_id","codec_id","decode","decode","decode_into","encode","encode","export_codec_class","from","from","from","from","from","from_borrowed_ptr_or_opt","from_borrowed_ptr_or_opt","from_codec","from_codec_class","from_owned_ptr_or_opt","from_owned_ptr_or_opt","from_registry_with_config","get_codec","get_config","get_config","into","into","into","into","into","into_codec","into_codec_class","register_codec","to_owned","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_exact","try_from_unchecked","try_from_unchecked","try_into","try_into","try_into","try_into","try_into","ty","type_check","type_check","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"numcodecs_python"],[82,"numcodecs_python::adapter"],[83,"pyo3::marker"],[84,"numcodecs_python::codec"],[85,"pyo3::instance"],[86,"numcodecs_python::codec_class"],[87,"pyo3::types::dict"],[88,"pyo3::err"],[89,"core::result"],[90,"serde::de"],[91,"alloc::string"],[92,"pyo3::types::any"],[93,"core::option"],[94,"numcodecs::array"],[95,"pyo3::types::module"],[96,"numcodecs::codec"],[97,"pyo3_ffi::object"],[98,"serde::ser"],[99,"core::convert"],[100,"core::any"],[101,"numcodecs_python::registry"],[102,"numcodecs_python::export"]],"i":[0,0,0,0,0,0,0,1,6,1,6,4,7,33,1,6,4,7,33,9,1,1,1,11,6,11,6,9,1,1,9,1,0,1,6,4,7,33,4,7,1,6,4,7,1,33,9,1,1,6,4,7,33,1,6,33,1,1,1,6,4,4,7,7,33,4,7,4,7,1,6,4,7,33,1,4,7,1,6,4,7,33],"f":"```````{{{d{b}}f}{{d{{j{h}}}}}}{{{d{l}}f}{{d{{j{n}}}}}}{d{{d{c}}}{}}0000{{{d{A`}}}{{d{A`c}}}{}}0000{{{d{Ab}}}{{j{n}}}}{{{d{b}}}b}{{d{d{A`c}}}Ad{}}{dAd}{{{d{Af}}{Aj{Ah}}}{{An{{j{h}}Al}}}}{{{d{l}}c}{{An{e}}}B`{}}{{{d{Af}}}{{An{BbAl}}}}{{{d{l}}}{{d{Bd}}}}{{{d{Ab}}{Aj{Bf}}{Bh{{Aj{Bf}}}}}{{An{{j{Bf}}Al}}}}{{{d{b}}Bj}{{An{Blc}}}{}}{{{d{b}}BnC`}{{An{Adc}}}{}}{{{d{Ab}}{Aj{Bf}}}{{An{{j{Bf}}Al}}}}2{{fc{Aj{Cb}}}{{An{{j{n}}Al}}}Cd}{cc{}}0000{{fCf}{{Bh{{d{c}}}}}{}}0{{{j{h}}}{{An{bAl}}}}{{{j{n}}}{{An{lAl}}}}22{c{{An{b}}}B`}{{{Aj{Ah}}}{{An{{j{h}}Al}}}}{{{d{Ab}}}{{An{{j{Ah}}Al}}}}{{{d{b}}c}AnCh}{{}c{}}0000{{bf}{{j{h}}}}{{lf}{{j{n}}}}{{{Aj{n}}{Bh{{d{Bd}}}}}{{An{AdAl}}}}{dc{}}{{{d{b}}f}{{An{bAl}}}}{c{{An{e}}}{}{}}0{c{{An{{d{e}}Cj}}}{{Cl{{d{Bf}}}}}{}}101100{c{{d{e}}}{{Cl{{d{Bf}}}}}{}}0{{}{{An{c}}}{}}0000{{{d{b}}}c{}}{{{d{{j{Bf}}}}}Cn}0{dD`}0000","D":"Df","p":[[5,"PyCodecAdapter",0,82],[1,"reference"],[5,"Python",83],[5,"PyCodec",0,84],[5,"Bound",85],[5,"PyCodecClassAdapter",0,82],[5,"PyCodecClass",0,86],[0,"mut"],[10,"PyCodecMethods",0,84],[1,"unit"],[10,"PyCodecClassMethods",0,86],[5,"PyDict",87],[5,"Borrowed",85],[5,"PyErr",88],[6,"Result",89],[10,"Deserializer",90],[5,"String",91],[1,"str"],[5,"PyAny",92],[6,"Option",93],[8,"AnyCowArray",94],[8,"AnyArray",94],[8,"AnyArrayView",94],[8,"AnyArrayViewMut",94],[5,"PyModule",95],[10,"DynCodecType",96],[5,"PyObject",97],[10,"Serializer",98],[5,"PyDowncastError",88],[10,"Into",99],[1,"bool"],[5,"TypeId",100],[5,"PyCodecRegistry",0]],"r":[[0,84],[1,82],[2,86],[3,82],[4,86],[5,84],[6,101],[32,102]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC8ACwAKAAkAFQACABkAAAAbAAAAHQABACAAAAAnAAEAKwABADAAAAA5AAAAOwAXAA=="}],\
["numcodecs_reinterpret",{"t":"PPPPPFGNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNOOOOOOOOO","n":["InvalidEncodedShape","InvalidReinterpret","MismatchedDecodeDType","MismatchedDecodeIntoArray","MismatchedEncodeDType","ReinterpretCodec","ReinterpretCodecError","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_config","get_config","into","into","passthrough","reinterpret_array","reinterpret_array_into","serialize","source","to_binary","to_bytes","to_owned","to_string","try_from","try_from","try_into","try_into","try_new","ty","type_id","type_id","configured","configured","decode_dtype","dtype","encode_dtype","provided","provided","shape","source"],"q":[[0,"numcodecs_reinterpret"],[44,"numcodecs_reinterpret::ReinterpretCodecError"],[53,"numcodecs::array"],[54,"core::result"],[55,"serde::de"],[56,"core::fmt"],[57,"serde::ser"],[58,"ndarray"],[59,"core::marker"],[60,"ndarray::data_traits"],[61,"ndarray::dimension::dimension_trait"],[62,"core::ops::function"],[63,"core::error"],[64,"core::option"],[65,"alloc::string"],[66,"core::any"]],"i":[11,11,11,11,11,0,0,3,11,3,11,3,3,3,3,3,3,3,11,11,3,11,11,3,3,3,11,3,0,0,3,11,3,3,3,11,3,11,3,11,3,3,3,11,31,32,33,34,33,31,32,34,35],"f":"```````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{{b{f}}j}{{n{lc}}}{}}{{{b{f}}A`Ab}{{n{hc}}}{}}{c{{n{f}}}Ad}2{{{b{Af}}{b{dAh}}}Aj}0{cc{}}{AlAf}13{{{b{f}}c}nAn}{{}c{}}0{B`f}{{{Bb{eg}}k}{{Bd{ig}}}Bf{{Bj{}{{Bh{c}}}}}Bl{}{{C`{c}{{Bn{i}}}}}}{{{Cb{ce}}iAb}{{n{hAf}}}BfBlCd{{C`{c}{{Bn{g}}}}}}4{{{b{Af}}}{{Ch{{b{Cf}}}}}}33{bc{}}{bCj}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{{B`B`}{{n{fAf}}}}{b}{bCl}0`````````","D":"Cf","p":[[1,"reference"],[0,"mut"],[5,"ReinterpretCodec",0],[1,"unit"],[8,"AnyCowArray",53],[8,"AnyArray",53],[6,"Result",54],[8,"AnyArrayView",53],[8,"AnyArrayViewMut",53],[10,"Deserializer",55],[6,"ReinterpretCodecError",0],[5,"Formatter",56],[8,"Result",56],[6,"AnyArrayAssignError",53],[10,"Serializer",57],[6,"AnyArrayDType",53],[5,"ArrayBase",58],[8,"Array",58],[10,"Copy",59],[17,"Elem"],[10,"Data",60],[10,"Dimension",61],[17,"Output"],[10,"Fn",62],[8,"ArrayView",58],[10,"ArrayDType",53],[10,"Error",63],[6,"Option",64],[5,"String",65],[5,"TypeId",66],[15,"MismatchedEncodeDType",44],[15,"MismatchedDecodeDType",44],[15,"InvalidReinterpret",44],[15,"InvalidEncodedShape",44],[15,"MismatchedDecodeIntoArray",44]],"r":[],"b":[[18,"impl-Display-for-ReinterpretCodecError"],[19,"impl-Debug-for-ReinterpretCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABoABgAIAAwAFgAAABgAAQAfAAEAIwAFACoAAgA="}],\
["numcodecs_round",{"t":"KPFFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHMNNNNNNNNNNNNNNNNO","n":["Float","MismatchedDecodeIntoArray","Positive","RoundCodec","RoundCodecError","UnsupportedDtype","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","decode","decode_into","deserialize","deserialize","encode","eq","fmt","fmt","from","from","from","from","from_config","get_config","hash","into","into","into","partial_cmp","precision","round","round","serialize","serialize","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","source"],"q":[[0,"numcodecs_round"],[57,"numcodecs_round::RoundCodecError"],[58,"core::clone"],[59,"numcodecs::array"],[60,"core::result"],[61,"serde::de"],[62,"core::cmp"],[63,"core::fmt"],[64,"serde::ser"],[65,"core::hash"],[66,"core::option"],[67,"ndarray"],[68,"ndarray::data_traits"],[69,"ndarray::dimension::dimension_trait"],[70,"core::error"],[71,"alloc::string"],[72,"core::any"]],"i":[0,17,0,0,0,17,3,4,17,3,4,17,3,4,3,4,3,4,4,3,3,3,4,3,4,17,17,3,4,17,17,3,3,4,3,4,17,4,3,0,6,3,4,17,3,4,17,3,4,17,3,4,17,3,3,4,17,35],"f":"``````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{f}}}f}{{{b{{h{c}}}}}{{h{c}}}{jl}}{{b{b{dc}}}n{}}0{bn}00{{{b{f}}A`}{{Ad{Abc}}}{}}{{{b{f}}AfAh}{{Ad{nc}}}{}}{c{{Ad{f}}}Aj}{c{{Ad{{h{Al}}}}}Aj}3{{{b{{h{c}}}}{b{{h{c}}}}}An{B`l}}{{{b{Bb}}{b{dBd}}}Bf}0{cc{}}0{BhBb}15{{{b{f}}c}AdBj}{{{b{{h{c}}}}{b{de}}}n{Bll}Bn}{{}c{}}00{{{b{{h{c}}}}{b{{h{c}}}}}{{Cb{C`}}}{Cdl}}`{{{Cf{eg}}{h{c}}}{{Ch{cg}}}l{{Cl{}{{Cj{c}}}}}Cn}{ll}5{{{b{{h{Al}}}}c}AdBj}{{{b{Bb}}}{{Cb{{b{D`}}}}}}{bc{}}0{bDb}{c{{Ad{e}}}{}{}}00{{}{{Ad{c}}}{}}00{b}{bDd}00`","D":"Bb","p":[[1,"reference"],[0,"mut"],[5,"RoundCodec",0],[5,"Positive",0],[10,"Clone",58],[10,"Float",0],[1,"unit"],[8,"AnyCowArray",59],[8,"AnyArray",59],[6,"Result",60],[8,"AnyArrayView",59],[8,"AnyArrayViewMut",59],[10,"Deserializer",61],[1,"f64"],[1,"bool"],[10,"PartialEq",62],[6,"RoundCodecError",0],[5,"Formatter",63],[8,"Result",63],[6,"AnyArrayAssignError",59],[10,"Serializer",64],[10,"Hash",65],[10,"Hasher",65],[6,"Ordering",62],[6,"Option",66],[10,"PartialOrd",62],[5,"ArrayBase",67],[8,"Array",67],[17,"Elem"],[10,"Data",68],[10,"Dimension",69],[10,"Error",70],[5,"String",71],[5,"TypeId",72],[15,"MismatchedDecodeIntoArray",57]],"r":[],"b":[[25,"impl-Display-for-RoundCodecError"],[26,"impl-Debug-for-RoundCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACkABQAHABQAHgAAACAAAgAmAAAAKgAPAA=="}],\
["numcodecs_sz3",{"t":"PPPTPPPPPPPPPPPPPPFGFGKPGFPNNNNNNNNNNNNNNNNNNNNNNHNNHNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOO","n":["Absolute","AbsoluteAndRelative","AbsoluteOrRelative","DTYPE","DecodeInvalidShapeHeader","EncodedDataNotBytes","EncodedDataNotOneDimensional","F32","F64","HeaderDecodeFailed","HeaderEncodeFailed","I32","I64","InvalidEncodeShape","L2Norm","MismatchedDecodeIntoArray","PS2NR","Relative","Sz3Codec","Sz3CodecError","Sz3CodingError","Sz3DType","Sz3Element","Sz3EncodeFailed","Sz3ErrorBound","Sz3HeaderError","UnsupportedDtype","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","deserialize","deserialize","deserialize","encode","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_config","get_config","into","into","into","into","into","into","serialize","serialize","serialize","source","source","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","dtype","shape","shape","source","source","source","source","source","source","abs","abs","abs","l2","psnr","rel","rel","rel"],"q":[[0,"numcodecs_sz3"],[115,"numcodecs_sz3::Sz3CodecError"],[124,"numcodecs_sz3::Sz3ErrorBound"],[132,"ndarray"],[133,"alloc::vec"],[134,"core::result"],[135,"ndarray::data_traits"],[136,"ndarray::dimension::dimension_trait"],[137,"numcodecs::array"],[138,"serde::de"],[139,"core::fmt"],[140,"ndarray::error"],[141,"serde::ser"],[142,"core::error"],[143,"core::option"],[144,"alloc::string"],[145,"core::any"]],"i":[4,4,4,12,10,10,10,5,5,10,10,5,5,10,4,10,4,4,0,0,0,0,0,10,0,0,10,3,4,10,24,25,5,3,4,10,24,25,5,3,4,5,3,4,5,3,4,5,5,0,3,3,0,3,4,5,3,3,4,10,10,24,24,25,25,5,5,3,4,10,10,10,24,25,5,3,3,3,4,10,24,25,5,3,4,5,10,24,25,3,4,5,10,24,25,5,3,4,10,24,25,5,3,4,10,24,25,5,3,3,4,10,24,25,5,33,34,35,36,34,37,38,39,40,41,42,43,44,45,41,42,46],"f":"```````````````````````````{b{{b{c}}}{}}00000{{{b{d}}}{{b{dc}}}{}}00000{{{b{f}}}f}{{{b{h}}}h}{{{b{j}}}j}{{b{b{dc}}}l{}}00{bl}000{{{n{eg}}{b{h}}}{{Af{{Ab{A`}}Ad}}}Ah{{Al{}{{Aj{c}}}}}An}{{{b{f}}B`}{{Af{Bbc}}}{}}{{{b{f}}BdBf}{{Af{lc}}}{}}{{{b{{Bh{A`}}}}}{{Af{BbAd}}}}{c{{Af{f}}}Bj}{c{{Af{h}}}Bj}{c{{Af{j}}}Bj}5`{{{b{h}}{b{dBl}}}Bn}{{{b{Ad}}{b{dBl}}}Bn}0{{{b{C`}}{b{dBl}}}Bn}0{{{b{Cb}}{b{dBl}}}Bn}0{{{b{j}}{b{dBl}}}Bn}0{cc{}}0{CdAd}{CfAd}2222:{{{b{f}}c}AfCh}{{}c{}}000001{{{b{h}}c}AfCh}{{{b{j}}c}AfCh}{{{b{Ad}}}{{Cl{{b{Cj}}}}}}{{{b{C`}}}{{Cl{{b{Cj}}}}}}{{{b{Cb}}}{{Cl{{b{Cj}}}}}}{bc{}}00{bCn}000{c{{Af{e}}}{}{}}00000{{}{{Af{c}}}{}}00000{b}{bD`}00000`````````````````","D":"G`","p":[[1,"reference"],[0,"mut"],[5,"Sz3Codec",0],[6,"Sz3ErrorBound",0],[6,"Sz3DType",0],[1,"unit"],[5,"ArrayBase",132],[1,"u8"],[5,"Vec",133],[6,"Sz3CodecError",0],[6,"Result",134],[10,"Sz3Element",0],[17,"Elem"],[10,"Data",135],[10,"Dimension",136],[8,"AnyCowArray",137],[8,"AnyArray",137],[8,"AnyArrayView",137],[8,"AnyArrayViewMut",137],[1,"slice"],[10,"Deserializer",138],[5,"Formatter",139],[8,"Result",139],[5,"Sz3HeaderError",0],[5,"Sz3CodingError",0],[6,"AnyArrayAssignError",137],[5,"ShapeError",140],[10,"Serializer",141],[10,"Error",142],[6,"Option",143],[5,"String",144],[5,"TypeId",145],[15,"EncodedDataNotBytes",115],[15,"InvalidEncodeShape",115],[15,"EncodedDataNotOneDimensional",115],[15,"HeaderEncodeFailed",115],[15,"Sz3EncodeFailed",115],[15,"HeaderDecodeFailed",115],[15,"DecodeInvalidShapeHeader",115],[15,"MismatchedDecodeIntoArray",115],[15,"AbsoluteAndRelative",124],[15,"AbsoluteOrRelative",124],[15,"Absolute",124],[15,"L2Norm",124],[15,"PS2NR",124],[15,"Relative",124]],"r":[],"b":[[59,"impl-Debug-for-Sz3CodecError"],[60,"impl-Display-for-Sz3CodecError"],[61,"impl-Debug-for-Sz3HeaderError"],[62,"impl-Display-for-Sz3HeaderError"],[63,"impl-Debug-for-Sz3CodingError"],[64,"impl-Display-for-Sz3CodingError"],[65,"impl-Debug-for-Sz3DType"],[66,"impl-Display-for-Sz3DType"],[69,"impl-From%3CAnyArrayAssignError%3E-for-Sz3CodecError"],[70,"impl-From%3CShapeError%3E-for-Sz3CodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEwACQAIAAEADAABABwAFQAzAAEANgADADsACABGAAEATAABAFQAHwA="}],\
["numcodecs_uniform_noise",{"t":"KPTFGPHNNNNNNNNNNNNNNNNNNMNNMOONNNNNNNNNNNO","n":["Float","MismatchedDecodeIntoArray","NEG_HALF","UniformNoiseCodec","UniformNoiseCodecError","UnsupportedDtype","add_uniform_noise","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_config","get_config","hash_bits","into","into","mul_add","scale","seed","serialize","source","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","source"],"q":[[0,"numcodecs_uniform_noise"],[42,"numcodecs_uniform_noise::UniformNoiseCodecError"],[43,"ndarray"],[44,"ndarray::data_traits"],[45,"ndarray::dimension::dimension_trait"],[46,"numcodecs::array"],[47,"core::result"],[48,"serde::de"],[49,"core::fmt"],[50,"serde::ser"],[51,"core::hash"],[52,"core::error"],[53,"core::option"],[54,"alloc::string"],[55,"core::any"]],"i":[0,18,4,0,0,18,0,10,18,10,18,10,10,10,10,10,10,10,18,18,10,18,18,10,10,4,10,18,4,10,10,10,18,10,18,10,18,10,18,10,10,18,28],"f":"``````{{{b{eg}}cd}{{f{cg}}}h{{l{}{{j{c}}}}}n}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{{A`{Ad}}}Ad}{{A`{A`{Abc}}}Af{}}{A`Af}{{{A`{Ad}}Ah}{{Al{Ajc}}}{}}{{{A`{Ad}}AnB`}{{Al{Afc}}}{}}{c{{Al{Ad}}}Bb}2{{{A`{Bd}}{A`{AbBf}}}Bh}0{cc{}}0{BjBd}3{{{A`{Ad}}c}AlBl}{{h{A`{Abc}}}AfBn}{{}c{}}0{{hhh}h}``3{{{A`{Bd}}}{{Cb{{A`{C`}}}}}}{A`c{}}{A`Cd}{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`}{A`Cf}0`","D":"Bb","p":[[5,"ArrayBase",43],[1,"u64"],[8,"Array",43],[10,"Float",0],[17,"Elem"],[10,"Data",44],[10,"Dimension",45],[1,"reference"],[0,"mut"],[5,"UniformNoiseCodec",0],[1,"unit"],[8,"AnyCowArray",46],[8,"AnyArray",46],[6,"Result",47],[8,"AnyArrayView",46],[8,"AnyArrayViewMut",46],[10,"Deserializer",48],[6,"UniformNoiseCodecError",0],[5,"Formatter",49],[8,"Result",49],[6,"AnyArrayAssignError",46],[10,"Serializer",50],[10,"Hasher",51],[10,"Error",52],[6,"Option",53],[5,"String",54],[5,"TypeId",55],[15,"MismatchedDecodeIntoArray",42]],"r":[],"b":[[18,"impl-Display-for-UniformNoiseCodecError"],[19,"impl-Debug-for-UniformNoiseCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABoAAwAIAAwAFwACACAACgA="}],\
["numcodecs_wasm_guest",{"t":"Q","n":["export_codec"],"q":[[0,"numcodecs_wasm_guest"]],"i":[0],"f":"`","D":"d","p":[],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["numcodecs_zfp",{"t":"PPPPPPPPPPPPPPPFGGPPNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNOOOOOOOOOOOO","n":["DecodeUnknownDtype","EncodedDataNotBytes","EncodedDataNotOneDimensional","ExcessiveDimensionality","Expert","FixedAccuracy","FixedAccuracyModeIntegerData","FixedPrecision","FixedRate","HeaderDecodeFailed","HeaderEncodeFailed","InvalidExpertMode","MismatchedDecodeIntoArray","Reversible","UnsupportedDtype","ZfpCodec","ZfpCodecError","ZfpCompressionMode","ZfpDecodeFailed","ZfpEncodeFailed","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","from","from","from","from","from_config","get_config","into","into","into","mode","serialize","serialize","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","dtype","mode","shape","shape","source","max_bits","max_prec","min_bits","min_exp","precision","rate","tolerance"],"q":[[0,"numcodecs_zfp"],[69,"numcodecs_zfp::ZfpCodecError"],[74,"numcodecs_zfp::ZfpCompressionMode"],[81,"ndarray"],[82,"alloc::vec"],[83,"core::result"],[84,"ndarray::dimension::dimension_trait"],[85,"numcodecs::array"],[86,"serde::de"],[87,"core::fmt"],[88,"serde::ser"],[89,"core::error"],[90,"core::option"],[91,"alloc::string"],[92,"core::any"]],"i":[9,9,9,9,4,4,9,4,4,9,9,9,9,4,9,0,0,0,9,9,3,4,9,3,4,9,3,4,3,4,3,4,0,3,3,0,0,3,4,3,4,9,9,3,4,9,9,3,3,3,4,9,3,3,4,9,3,4,9,3,4,9,3,4,9,3,3,4,9,26,27,28,29,30,31,31,31,31,32,33,34],"f":"````````````````````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}0{{{l{ce}}{b{h}}}{{Ad{{A`{n}}Ab}}}`Af}{{{b{f}}Ah}{{Ad{Ajc}}}{}}{{{b{f}}AlAn}{{Ad{jc}}}{}}{{{b{{B`{n}}}}}{{Ad{AjAb}}}}{{{b{{B`{n}}}}An}{{Ad{jAb}}}}{c{{Ad{f}}}Bb}{c{{Ad{h}}}Bb}5{{{b{h}}{b{dBd}}}Bf}{{{b{Ab}}{b{dBd}}}Bf}0{cc{}}0{BhAb}15{{{b{f}}c}AdBj}{{}c{}}00`1{{{b{h}}c}AdBj}{{{b{Ab}}}{{Bn{{b{Bl}}}}}}{bc{}}0{bC`}{c{{Ad{e}}}{}{}}00{{}{{Ad{c}}}{}}00{b}{bCb}00````````````","D":"Ef","p":[[1,"reference"],[0,"mut"],[5,"ZfpCodec",0],[6,"ZfpCompressionMode",0],[1,"unit"],[8,"ArrayView",81],[1,"u8"],[5,"Vec",82],[6,"ZfpCodecError",0],[6,"Result",83],[10,"Dimension",84],[8,"AnyCowArray",85],[8,"AnyArray",85],[8,"AnyArrayView",85],[8,"AnyArrayViewMut",85],[1,"slice"],[10,"Deserializer",86],[5,"Formatter",87],[8,"Result",87],[6,"AnyArrayAssignError",85],[10,"Serializer",88],[10,"Error",89],[6,"Option",90],[5,"String",91],[5,"TypeId",92],[15,"EncodedDataNotBytes",69],[15,"InvalidExpertMode",69],[15,"ExcessiveDimensionality",69],[15,"EncodedDataNotOneDimensional",69],[15,"MismatchedDecodeIntoArray",69],[15,"Expert",74],[15,"FixedPrecision",74],[15,"FixedRate",74],[15,"FixedAccuracy",74]],"r":[],"b":[[41,"impl-Display-for-ZfpCodecError"],[42,"impl-Debug-for-ZfpCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACYABgAVAAsAIgABACYABQAuAAAAMAABADYADwA="}],\
["numcodecs_zlib",{"t":"PPPPPPPPPPPPPPPPPFGFPFGNNNNNNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOO","n":["DecodeExcessiveEncodedData","DecodeProducedLess","EncodedDataNotBytes","EncodedDataNotOneDimensional","HeaderDecodeFailed","HeaderEncodeFailed","MismatchedDecodeIntoArray","ZBestCompression","ZBestSpeed","ZLevel2","ZLevel3","ZLevel4","ZLevel5","ZLevel6","ZLevel7","ZLevel8","ZNoCompression","ZlibCodec","ZlibCodecError","ZlibDecodeError","ZlibDecodeFailed","ZlibHeaderError","ZlibLevel","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_config","get_config","into","into","into","into","into","level","serialize","serialize","source","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","dtype","shape","source","source","source","source"],"q":[[0,"numcodecs_zlib"],[94,"numcodecs_zlib::ZlibCodecError"],[100,"numcodecs::array"],[101,"alloc::vec"],[102,"core::result"],[103,"serde::de"],[104,"core::fmt"],[105,"serde::ser"],[106,"core::error"],[107,"core::option"],[108,"alloc::string"],[109,"core::any"]],"i":[9,9,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,0,0,0,9,0,0,3,4,9,18,19,3,4,9,18,19,3,4,3,4,3,4,4,0,3,3,0,0,3,4,3,9,9,18,18,19,19,3,4,9,9,18,19,3,3,3,4,9,18,19,3,3,4,9,18,19,3,4,9,18,19,3,4,9,18,19,3,4,9,18,19,3,3,4,9,18,19,26,27,28,29,30,31],"f":"```````````````````````{b{{b{c}}}{}}0000{{{b{d}}}{{b{dc}}}{}}0000{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}00{{lh}{{Ad{{A`{n}}Ab}}}}{{{b{f}}Af}{{Ad{Ahc}}}{}}{{{b{f}}lAj}{{Ad{jc}}}{}}{{{b{{Al{n}}}}}{{Ad{AhAb}}}}{{{b{{Al{n}}}}Aj}{{Ad{jAb}}}}{c{{Ad{f}}}An}{c{{Ad{h}}}An}5{{{b{Ab}}{b{dB`}}}Bb}0{{{b{Bd}}{b{dB`}}}Bb}0{{{b{Bf}}{b{dB`}}}Bb}0{cc{}}0{BhAb}1116{{{b{f}}c}AdBj}{{}c{}}0000`1{{{b{h}}c}AdBj}{{{b{Ab}}}{{Bn{{b{Bl}}}}}}{{{b{Bd}}}{{Bn{{b{Bl}}}}}}{{{b{Bf}}}{{Bn{{b{Bl}}}}}}{bc{}}0{bC`}00{c{{Ad{e}}}{}{}}0000{{}{{Ad{c}}}{}}0000{b}{bCb}0000``````","D":"Dd","p":[[1,"reference"],[0,"mut"],[5,"ZlibCodec",0],[6,"ZlibLevel",0],[1,"unit"],[8,"AnyArrayView",100],[1,"u8"],[5,"Vec",101],[6,"ZlibCodecError",0],[6,"Result",102],[8,"AnyCowArray",100],[8,"AnyArray",100],[8,"AnyArrayViewMut",100],[1,"slice"],[10,"Deserializer",103],[5,"Formatter",104],[8,"Result",104],[5,"ZlibHeaderError",0],[5,"ZlibDecodeError",0],[6,"AnyArrayAssignError",100],[10,"Serializer",105],[10,"Error",106],[6,"Option",107],[5,"String",108],[5,"TypeId",109],[15,"EncodedDataNotBytes",94],[15,"EncodedDataNotOneDimensional",94],[15,"HeaderEncodeFailed",94],[15,"HeaderDecodeFailed",94],[15,"ZlibDecodeFailed",94],[15,"MismatchedDecodeIntoArray",94]],"r":[],"b":[[48,"impl-Debug-for-ZlibCodecError"],[49,"impl-Display-for-ZlibCodecError"],[50,"impl-Display-for-ZlibHeaderError"],[51,"impl-Debug-for-ZlibHeaderError"],[52,"impl-Display-for-ZlibDecodeError"],[53,"impl-Debug-for-ZlibDecodeError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEIABwAIAAkAGAAQACoAAQAuAAgAOQAAAD0AAQBFABkA"}],\
["numcodecs_zstd",{"t":"PPPPPPPFGFPPFFNNNNNNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOO","n":["DecodeExcessiveEncodedData","DecodeProducedLess","EncodedDataNotBytes","EncodedDataNotOneDimensional","HeaderDecodeFailed","HeaderEncodeFailed","MismatchedDecodeIntoArray","ZstdCodec","ZstdCodecError","ZstdCodingError","ZstdDecodeFailed","ZstdEncodeFailed","ZstdHeaderError","ZstdLevel","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_config","get_config","into","into","into","into","into","level","serialize","serialize","source","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","dtype","shape","source","source","source","source","source"],"q":[[0,"numcodecs_zstd"],[85,"numcodecs_zstd::ZstdCodecError"],[92,"numcodecs::array"],[93,"alloc::vec"],[94,"core::result"],[95,"serde::de"],[96,"core::fmt"],[97,"serde::ser"],[98,"core::error"],[99,"core::option"],[100,"alloc::string"],[101,"core::any"]],"i":[9,9,9,9,9,9,9,0,0,0,9,9,0,0,3,4,9,18,19,3,4,9,18,19,3,4,3,4,3,4,4,0,3,3,0,0,3,4,3,9,9,18,18,19,19,3,4,9,9,18,19,3,3,3,4,9,18,19,3,3,4,9,18,19,3,4,9,18,19,3,4,9,18,19,3,4,9,18,19,3,3,4,9,18,19,26,27,28,29,30,31,32],"f":"``````````````{b{{b{c}}}{}}0000{{{b{d}}}{{b{dc}}}{}}0000{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}00{{lh}{{Ad{{A`{n}}Ab}}}}{{{b{f}}Af}{{Ad{Ahc}}}{}}{{{b{f}}lAj}{{Ad{jc}}}{}}{{{b{{Al{n}}}}}{{Ad{AhAb}}}}{{{b{{Al{n}}}}Aj}{{Ad{jAb}}}}{c{{Ad{f}}}An}{c{{Ad{h}}}An}5{{{b{Ab}}{b{dB`}}}Bb}0{{{b{Bd}}{b{dB`}}}Bb}0{{{b{Bf}}{b{dB`}}}Bb}0{cc{}}0{BhAb}1116{{{b{f}}c}AdBj}{{}c{}}0000`1{{{b{h}}c}AdBj}{{{b{Ab}}}{{Bn{{b{Bl}}}}}}{{{b{Bd}}}{{Bn{{b{Bl}}}}}}{{{b{Bf}}}{{Bn{{b{Bl}}}}}}{bc{}}0{bC`}00{c{{Ad{e}}}{}{}}0000{{}{{Ad{c}}}{}}0000{b}{bCb}0000```````","D":"Dh","p":[[1,"reference"],[0,"mut"],[5,"ZstdCodec",0],[5,"ZstdLevel",0],[1,"unit"],[8,"AnyArrayView",92],[1,"u8"],[5,"Vec",93],[6,"ZstdCodecError",0],[6,"Result",94],[8,"AnyCowArray",92],[8,"AnyArray",92],[8,"AnyArrayViewMut",92],[1,"slice"],[10,"Deserializer",95],[5,"Formatter",96],[8,"Result",96],[5,"ZstdHeaderError",0],[5,"ZstdCodingError",0],[6,"AnyArrayAssignError",92],[10,"Serializer",97],[10,"Error",98],[6,"Option",99],[5,"String",100],[5,"TypeId",101],[15,"EncodedDataNotBytes",85],[15,"EncodedDataNotOneDimensional",85],[15,"HeaderEncodeFailed",85],[15,"ZstdEncodeFailed",85],[15,"HeaderDecodeFailed",85],[15,"ZstdDecodeFailed",85],[15,"MismatchedDecodeIntoArray",85]],"r":[],"b":[[39,"impl-Display-for-ZstdCodecError"],[40,"impl-Debug-for-ZstdCodecError"],[41,"impl-Display-for-ZstdHeaderError"],[42,"impl-Debug-for-ZstdHeaderError"],[43,"impl-Display-for-ZstdCodingError"],[44,"impl-Debug-for-ZstdCodingError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADgABgAPABAAIQABACUACAAwAAAANAABADwAGQA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
