var searchIndex = new Map(JSON.parse('[\
["numcodecs",{"t":"IIGGIIIKKTKRTKKRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRRKFRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRNNNNNNNNNNNNNNNNMNMNNMMNNMNNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNN","n":["AnyArcArray","AnyArray","AnyArrayBase","AnyArrayDType","AnyArrayView","AnyArrayViewMut","AnyCowArray","AnyRawData","ArrayDType","CODEC_ID","Codec","Codec","DTYPE","DynCodec","DynCodecType","Error","F32","F32","F32","F32","F32","F32","F32","F32","F64","F64","F64","F64","F64","F64","F64","F64","I16","I16","I16","I16","I16","I16","I16","I16","I32","I32","I32","I32","I32","I32","I32","I32","I64","I64","I64","I64","I64","I64","I64","I64","I8","I8","I8","I8","I8","I8","I8","I8","RawData","StaticCodec","StaticCodecType","Type","U16","U16","U16","U16","U16","U16","U16","U16","U32","U32","U32","U32","U32","U32","U32","U32","U64","U64","U64","U64","U64","U64","U64","U64","U8","U8","U8","U8","U8","U8","U8","U8","as_bytes","as_typed","as_typed_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","codec_from_config","codec_from_config","codec_id","codec_id","cow","decode","decode_into","deserialize","dtype","encode","eq","eq","fmt","fmt","fmt","from","from","from","from_config","get_config","hash","into","into","into","into_cow","into_cow","into_owned","is_empty","len","of","of","serialize","shape","size","strides","to_binary","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","view","view_mut","with_bytes_mut","with_zeros_bytes","with_zeros_bytes","zeros","zeros"],"q":[[0,"numcodecs"],[172,"numcodecs::array"],[173,"alloc::borrow"],[174,"ndarray::aliases"],[175,"ndarray"],[176,"core::option"],[177,"numcodecs::codec"],[178,"core::result"],[179,"serde::de"],[180,"core::marker"],[181,"core::error"],[182,"core::fmt"],[183,"serde::ser"],[184,"core::hash"],[185,"ndarray::data_repr"],[186,"alloc::string"],[187,"core::any"],[188,"core::ops::function"]],"i":[0,0,0,0,0,0,0,0,0,20,0,14,44,0,0,24,45,25,29,30,22,1,11,6,45,25,29,30,22,1,11,6,45,25,29,30,22,1,11,6,45,25,29,30,22,1,11,6,45,25,29,30,22,1,11,6,45,25,29,30,22,1,11,6,44,0,0,17,45,25,29,30,22,1,11,6,45,25,29,30,22,1,11,6,45,25,29,30,22,1,11,6,45,25,29,30,22,1,11,6,1,1,1,1,19,11,1,19,11,1,11,1,11,1,11,11,14,19,14,19,1,24,24,11,1,24,1,11,1,11,11,1,19,11,20,24,11,1,19,11,25,1,1,1,1,19,11,11,1,11,1,11,1,11,11,1,19,11,1,19,11,17,1,19,11,1,1,1,25,1,25,1],"f":"````````````````````````````````````````````````````````````````````````````````````````````````````{{{d{{b{c}}}}}{{j{{h{f}}}}}l}{{{d{{b{c}}}}}{{Ab{{d{{A`{n}}}}}}}l}{{{d{Ad{b{c}}}}}{{Ab{{d{Ad{A`{n}}}}}}}l}{d{{d{c}}}{}}00{{{d{Ad}}}{{d{Adc}}}{}}00{{{d{{b{c}}}}}{{b{c}}}l}{{{d{Af}}}Af}{{d{d{Adc}}}Ah{}}0{dAh}00{{{d{{Al{}{{Aj{c}}}}}}e}{{An{c}}}{{Bb{}{{B`{}}}}}Bd}{{{d{{Bf{c}}}}e}{{An{g}}}BhBd{}}{{{d{{Al{}{{Aj{c}}}}}}}{{d{Bj}}}{{Bb{}{{B`{}}}}}}{{{d{{Bf{c}}}}}{{d{Bj}}}Bh}{{{d{{b{c}}}}}Bll}{{{d{{C`{}{{Bn{c}}}}}}Bl}{{An{Cbc}}}{CdCfCh}}{{{d{{C`{}{{Bn{c}}}}}}CjCl}{{An{Ahc}}}{CdCfCh}}{c{{An{Af}}}Bd}{{{d{{b{c}}}}}Afl}3{{{d{{b{c}}}}{d{{b{c}}}}}Cnl}{{{d{Af}}{d{Af}}}Cn}{{{d{{b{c}}}}{d{AdD`}}}Dbl}{{{d{Af}}{d{AdD`}}}Db}0{cc{}}00{c{{An{Bh}}}Bd}{{{d{{C`{}{{Bn{c}}}}}}e}An{CdCfCh}Dd}{{{d{Af}}{d{Adc}}}AhDf}{{}c{}}00{CbBl}{{{b{{Dh{Ah}}}}}Bl}{{{b{c}}}Cbl}{{{d{{b{c}}}}}Cnl}{{{d{{b{c}}}}}Djl}{{}{{Bf{c}}}Bh}{{}Af}{{{d{Af}}c}AnDd}{{{d{{b{c}}}}}{{d{{h{Dj}}}}}l}{AfDj}{{{d{{b{c}}}}}{{d{{h{Dl}}}}}l}{AfAf}{dc{}}0{dDn}{c{{An{e}}}{}{}}00{{}{{An{c}}}{}}00{{{d{{Bb{}{{B`{c}}}}}}}cAl}{dE`}00{{{d{{b{c}}}}}Cjl}{{{d{Ad{b{c}}}}}Cll}{{{d{Ad{b{c}}}}g}el{}{{Ed{{d{Ad{h{f}}}}}{{Eb{e}}}}}}{{Af{d{{h{Dj}}}}e}{{Ef{Cbc}}}{}{{Ed{{d{Ad{h{f}}}}}{{Eb{c}}}}}}{{Af{d{{h{Dj}}}}e}{{Ef{{b{{Dh{Ah}}}}c}}}{}{{Ed{{d{Ad{h{f}}}}}{{Eb{c}}}}}}{{Af{d{{h{Dj}}}}}Cb}{{Af{d{{h{Dj}}}}}{{b{{Dh{Ah}}}}}}","D":"Gd","p":[[6,"AnyArrayBase",0,172],[1,"reference"],[1,"u8"],[1,"slice"],[6,"Cow",173],[10,"AnyRawData",0,172],[8,"IxDyn",174],[5,"ArrayBase",175],[6,"Option",176],[0,"mut"],[6,"AnyArrayDType",0,172],[1,"unit"],[17,"Codec"],[10,"DynCodecType",0,177],[6,"Result",178],[17,"Type"],[10,"DynCodec",0,177],[10,"Deserializer",179],[5,"StaticCodecType",0,177],[10,"StaticCodec",0,177],[1,"str"],[8,"AnyCowArray",0,172],[17,"Error"],[10,"Codec",0,177],[8,"AnyArray",0,172],[10,"Send",180],[10,"Sync",180],[10,"Error",181],[8,"AnyArrayView",0,172],[8,"AnyArrayViewMut",0,172],[1,"bool"],[5,"Formatter",182],[8,"Result",182],[10,"Serializer",183],[10,"Hasher",184],[5,"OwnedRepr",185],[1,"usize"],[1,"isize"],[5,"String",186],[5,"TypeId",187],[17,"Output"],[10,"FnOnce",188],[1,"tuple"],[10,"ArrayDType",0],[8,"AnyArcArray",0]],"r":[[0,172],[1,172],[2,172],[3,172],[4,172],[5,172],[6,172],[7,172],[8,172],[10,177],[13,177],[14,177],[65,177],[66,177]],"b":[[129,"impl-Display-for-AnyArrayDType"],[130,"impl-Debug-for-AnyArrayDType"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAHIACwARAC8ARQAfAGgADAB2AAAAeAAAAHwAAAB/AAQAiQAAAJQAAACZAAgAowACAA=="}],\
["numcodecs_bit_round",{"t":"TRFGPKTTPPTPHNNNNNNNNNNNNNNNMNNNNONMNNNNNNNNNOOOOOO","n":["BINARY_ONE","Binary","BitRoundCodec","BitRoundCodecError","ExcessiveKeepBits","Float","MANITSSA_BITS","MANTISSA_MASK","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","TY","UnsupportedDtype","bit_round","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from_binary","from_config","get_config","into","into","keepbits","serialize","to_binary","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","decoded","decoded","dtype","keepbits","provided","provided"],"q":[[0,"numcodecs_bit_round"],[45,"numcodecs_bit_round::BitRoundCodecError"],[51,"ndarray"],[52,"core::result"],[53,"ndarray::data_traits"],[54,"ndarray::dimension::dimension_trait"],[55,"numcodecs::array"],[56,"serde::de"],[57,"core::fmt"],[58,"core::marker"],[59,"core::ops::bit"],[60,"core::ops::arith"],[61,"serde::ser"],[62,"alloc::string"],[63,"core::any"]],"i":[6,6,0,0,4,0,6,6,4,4,6,4,0,12,4,12,4,12,12,12,12,12,12,12,4,4,12,4,6,12,12,12,4,12,12,6,12,4,12,4,12,4,12,12,4,34,35,36,36,34,35],"f":"````````````{{{b{eg}}d}{{j{{f{cg}}h}}}l{{A`{}{{n{c}}}}}Ab}{Ad{{Ad{c}}}{}}0{{{Ad{Af}}}{{Ad{Afc}}}{}}0{{{Ad{Ah}}}Ah}{{Ad{Ad{Afc}}}Aj{}}{AdAj}{{{Ad{Ah}}Al}{{j{Anc}}}{}}{{{Ad{Ah}}B`Bb}{{j{Ajc}}}{}}{c{{j{Ah}}}Bd}2{{{Ad{h}}{Ad{AfBf}}}Bh}0{cc{}}0{c{{l{}{{Bj{c}}}}}{Bl{C`{}{{Bn{c}}}}{Cd{Cb}{{Bn{c}}}}{Cf{c}{{Bn{c}}}}{Ch{c}}{Cj{c}{{Bn{c}}}}{Cl{c}}}}3{{{Ad{Ah}}c}jCn}{{}c{}}0`1{{{l{}{{Bj{c}}}}}c{Bl{C`{}{{Bn{c}}}}{Cd{Cb}{{Bn{c}}}}{Cf{c}{{Bn{c}}}}{Ch{c}}{Cj{c}{{Bn{c}}}}{Cl{c}}}}{Adc{}}{AdD`}{c{{j{e}}}{}{}}0{{}{{j{c}}}{}}0{Ad}{AdDb}0``````","D":"Cf","p":[[5,"ArrayBase",51],[1,"u8"],[8,"Array",51],[6,"BitRoundCodecError",0],[6,"Result",52],[10,"Float",0],[17,"Elem"],[10,"Data",53],[10,"Dimension",54],[1,"reference"],[0,"mut"],[5,"BitRoundCodec",0],[1,"unit"],[8,"AnyCowArray",55],[8,"AnyArray",55],[8,"AnyArrayView",55],[8,"AnyArrayViewMut",55],[10,"Deserializer",56],[5,"Formatter",57],[8,"Result",57],[17,"Binary"],[10,"Copy",58],[17,"Output"],[10,"Not",59],[1,"u32"],[10,"Shr",59],[10,"Add",60],[10,"AddAssign",60],[10,"BitAnd",59],[10,"BitAndAssign",59],[10,"Serializer",61],[5,"String",62],[5,"TypeId",63],[15,"MismatchedDecodeIntoDtype",45],[15,"MismatchedDecodeIntoShape",45],[15,"ExcessiveKeepBits",45]],"r":[],"b":[[24,"impl-Display-for-BitRoundCodecError"],[25,"impl-Debug-for-BitRoundCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABgABAAOAAwAHgABACMAAAAlAAgA"}],\
["numcodecs_identity",{"t":"FGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOO","n":["IdentityCodec","IdentityCodecError","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from_config","get_config","into","into","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","decoded","decoded","provided","provided"],"q":[[0,"numcodecs_identity"],[33,"numcodecs_identity::IdentityCodecError"],[37,"numcodecs::array"],[38,"core::result"],[39,"serde::de"],[40,"core::fmt"],[41,"serde::ser"],[42,"alloc::string"],[43,"core::any"]],"i":[0,0,11,11,3,11,3,11,3,3,3,3,3,3,3,11,11,3,11,3,3,3,11,3,3,11,3,11,3,11,3,3,11,17,18,17,18],"f":"````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{{b{f}}j}{{n{lc}}}{}}{{{b{f}}A`Ab}{{n{hc}}}{}}{c{{n{f}}}Ad}2{{{b{Af}}{b{dAh}}}Aj}0{cc{}}02{{{b{f}}c}nAl}{{}c{}}01{bc{}}{bAn}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{b}{bB`}0````","D":"Aj","p":[[1,"reference"],[0,"mut"],[5,"IdentityCodec",0],[1,"unit"],[8,"AnyCowArray",37],[8,"AnyArray",37],[6,"Result",38],[8,"AnyArrayView",37],[8,"AnyArrayViewMut",37],[10,"Deserializer",39],[6,"IdentityCodecError",0],[5,"Formatter",40],[8,"Result",40],[10,"Serializer",41],[5,"String",42],[5,"TypeId",43],[15,"MismatchedDecodeIntoDtype",33],[15,"MismatchedDecodeIntoShape",33]],"r":[],"b":[[15,"impl-Display-for-IdentityCodecError"],[16,"impl-Debug-for-IdentityCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABgAAwAFAAwAFAABABgACQA="}],\
["numcodecs_log",{"t":"KFGPPPPPNNNNNNNNNNNHMHNNNNNNNNMMHMNNNNNNNNNNOOOO","n":["Float","LogCodec","LogCodecError","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","NegativeData","NonFiniteData","UnsupportedDtype","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","exp_m1","exp_m1","exp_m1_into","fmt","fmt","from","from","from_config","get_config","into","into","is_finite","is_negative","ln_1p","ln_1p","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","decoded","decoded","provided","provided"],"q":[[0,"numcodecs_log"],[44,"numcodecs_log::LogCodecError"],[48,"numcodecs::array"],[49,"core::result"],[50,"serde::de"],[51,"ndarray"],[52,"ndarray::data_traits"],[53,"ndarray::dimension::dimension_trait"],[54,"core::fmt"],[55,"serde::ser"],[56,"alloc::string"],[57,"core::any"]],"i":[0,0,0,13,13,13,13,13,3,13,3,13,3,3,3,3,3,3,3,0,14,0,13,13,3,13,3,3,3,13,14,14,0,14,3,3,13,3,13,3,13,3,3,13,26,27,26,27],"f":"````````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{{b{f}}j}{{n{lc}}}{}}{{{b{f}}A`Ab}{{n{hc}}}{}}{c{{n{f}}}Ad}2{{{Af{eg}}}{{n{{Ah{cg}}Aj}}}Al{{B`{}{{An{c}}}}}Bb}{AlAl}{{{Bd{ce}}{Bf{ce}}}{{n{hAj}}}AlBb}{{{b{Aj}}{b{dBh}}}Bj}0{cc{}}05{{{b{f}}c}nBl}{{}c{}}0{AlBn}0762{bc{}}{bC`}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{b}{bCb}0````","D":"C`","p":[[1,"reference"],[0,"mut"],[5,"LogCodec",0],[1,"unit"],[8,"AnyCowArray",48],[8,"AnyArray",48],[6,"Result",49],[8,"AnyArrayView",48],[8,"AnyArrayViewMut",48],[10,"Deserializer",50],[5,"ArrayBase",51],[8,"Array",51],[6,"LogCodecError",0],[10,"Float",0],[17,"Elem"],[10,"Data",52],[10,"Dimension",53],[8,"ArrayView",51],[8,"ArrayViewMut",51],[5,"Formatter",54],[8,"Result",54],[10,"Serializer",55],[1,"bool"],[5,"String",56],[5,"TypeId",57],[15,"MismatchedDecodeIntoDtype",44],[15,"MismatchedDecodeIntoShape",44]],"r":[],"b":[[22,"impl-Display-for-LogCodecError"],[23,"impl-Debug-for-LogCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABgABAAJAAoAFwABABsAAQAjAAkA"}],\
["numcodecs_python",{"t":"FFFFKKFNNNNNNNNNNNNMNNNMNMNMNNMNHNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["PyCodec","PyCodecAdapter","PyCodecClass","PyCodecClassAdapter","PyCodecClassMethods","PyCodecMethods","PyCodecRegistry","as_codec","as_codec_class","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone_into","clone_to_uninit","codec_from_config","codec_from_config","codec_id","codec_id","decode","decode","decode_into","encode","encode","export_codec_class","from","from","from","from","from","from_borrowed_ptr_or_opt","from_borrowed_ptr_or_opt","from_codec","from_codec_class","from_owned_ptr_or_opt","from_owned_ptr_or_opt","from_registry_with_config","get_codec","get_config","get_config","into","into","into","into","into","into_codec","into_codec_class","register_codec","to_owned","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_exact","try_from_unchecked","try_from_unchecked","try_into","try_into","try_into","try_into","try_into","ty","type_check","type_check","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"numcodecs_python"],[82,"numcodecs_python::adapter"],[83,"pyo3::marker"],[84,"numcodecs_python::codec"],[85,"pyo3::instance"],[86,"numcodecs_python::codec_class"],[87,"pyo3::types::dict"],[88,"pyo3::err"],[89,"core::result"],[90,"serde::de"],[91,"alloc::string"],[92,"pyo3::types::any"],[93,"core::option"],[94,"numcodecs::array"],[95,"pyo3::types::module"],[96,"numcodecs::codec"],[97,"pyo3_ffi::object"],[98,"serde::ser"],[99,"core::convert"],[100,"core::any"],[101,"numcodecs_python::registry"],[102,"numcodecs_python::export"]],"i":[0,0,0,0,0,0,0,1,6,1,6,4,7,33,1,6,4,7,33,9,1,1,1,11,6,11,6,9,1,1,9,1,0,1,6,4,7,33,4,7,1,6,4,7,1,33,9,1,1,6,4,7,33,1,6,33,1,1,1,6,4,4,7,7,33,4,7,4,7,1,6,4,7,33,1,4,7,1,6,4,7,33],"f":"```````{{{d{b}}f}{{d{{j{h}}}}}}{{{d{l}}f}{{d{{j{n}}}}}}{d{{d{c}}}{}}0000{{{d{A`}}}{{d{A`c}}}{}}0000{{{d{Ab}}}{{j{n}}}}{{{d{b}}}b}{{d{d{A`c}}}Ad{}}{dAd}{{{d{Af}}{Aj{Ah}}}{{An{{j{h}}Al}}}}{{{d{l}}c}{{An{e}}}B`{}}{{{d{Af}}}{{An{BbAl}}}}{{{d{l}}}{{d{Bd}}}}{{{d{Ab}}{Aj{Bf}}{Bh{{Aj{Bf}}}}}{{An{{j{Bf}}Al}}}}{{{d{b}}Bj}{{An{Blc}}}{}}{{{d{b}}BnC`}{{An{Adc}}}{}}{{{d{Ab}}{Aj{Bf}}}{{An{{j{Bf}}Al}}}}2{{fc{Aj{Cb}}}{{An{{j{n}}Al}}}Cd}{cc{}}0000{{fCf}{{Bh{{d{c}}}}}{}}0{{{j{h}}}{{An{bAl}}}}{{{j{n}}}{{An{lAl}}}}22{c{{An{b}}}B`}{{{Aj{Ah}}}{{An{{j{h}}Al}}}}{{{d{Ab}}}{{An{{j{Ah}}Al}}}}{{{d{b}}c}AnCh}{{}c{}}0000{{bf}{{j{h}}}}{{lf}{{j{n}}}}{{{Aj{n}}{Bh{{d{Bd}}}}}{{An{AdAl}}}}{dc{}}{{{d{b}}f}{{An{bAl}}}}{c{{An{e}}}{}{}}0{c{{An{{d{e}}Cj}}}{{Cl{{d{Bf}}}}}{}}101100{c{{d{e}}}{{Cl{{d{Bf}}}}}{}}0{{}{{An{c}}}{}}0000{{{d{b}}}c{}}{{{d{{j{Bf}}}}}Cn}0{dD`}0000","D":"Df","p":[[5,"PyCodecAdapter",0,82],[1,"reference"],[5,"Python",83],[5,"PyCodec",0,84],[5,"Bound",85],[5,"PyCodecClassAdapter",0,82],[5,"PyCodecClass",0,86],[0,"mut"],[10,"PyCodecMethods",0,84],[1,"unit"],[10,"PyCodecClassMethods",0,86],[5,"PyDict",87],[5,"Borrowed",85],[5,"PyErr",88],[6,"Result",89],[10,"Deserializer",90],[5,"String",91],[1,"str"],[5,"PyAny",92],[6,"Option",93],[8,"AnyCowArray",94],[8,"AnyArray",94],[8,"AnyArrayView",94],[8,"AnyArrayViewMut",94],[5,"PyModule",95],[10,"DynCodecType",96],[5,"PyObject",97],[10,"Serializer",98],[5,"PyDowncastError",88],[10,"Into",99],[1,"bool"],[5,"TypeId",100],[5,"PyCodecRegistry",0]],"r":[[0,84],[1,82],[2,86],[3,82],[4,86],[5,84],[6,101],[32,102]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC8ACwAKAAkAFQACABkAAAAbAAAAHQABACAAAAAnAAEAKwABADAAAAA5AAAAOwAXAA=="}],\
["numcodecs_reinterpret",{"t":"PPPPPPFGNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNOOOOOOOOOOOO","n":["InvalidEncodedShape","InvalidReinterpret","MismatchedDecodeDType","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","MismatchedEncodeDType","ReinterpretCodec","ReinterpretCodecError","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from_config","get_config","into","into","passthrough","reinterpret_array","reinterpret_array_into","serialize","to_binary","to_bytes","to_owned","to_string","try_from","try_from","try_into","try_into","try_new","ty","type_id","type_id","configured","configured","decode_dtype","decoded","decoded","dtype","encode_dtype","provided","provided","provided","provided","shape"],"q":[[0,"numcodecs_reinterpret"],[43,"numcodecs_reinterpret::ReinterpretCodecError"],[55,"numcodecs::array"],[56,"core::result"],[57,"serde::de"],[58,"core::fmt"],[59,"serde::ser"],[60,"ndarray"],[61,"core::marker"],[62,"ndarray::data_traits"],[63,"ndarray::dimension::dimension_trait"],[64,"core::ops::function"],[65,"alloc::string"],[66,"core::any"]],"i":[11,11,11,11,11,11,0,0,3,11,3,11,3,3,3,3,3,3,3,11,11,3,11,3,3,3,11,3,0,0,3,3,3,3,11,3,11,3,11,3,3,3,11,28,29,30,31,32,33,30,28,29,31,32,33],"f":"````````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{{b{f}}j}{{n{lc}}}{}}{{{b{f}}A`Ab}{{n{hc}}}{}}{c{{n{f}}}Ad}2{{{b{Af}}{b{dAh}}}Aj}0{cc{}}02{{{b{f}}c}nAl}{{}c{}}0{Anf}{{{B`{eg}}k}{{Bb{ig}}}Bd{{Bh{}{{Bf{c}}}}}Bj{}{{Bn{c}{{Bl{i}}}}}}{{{C`{ce}}iAb}{{n{hAf}}}BdBjCb{{Bn{c}{{Bl{g}}}}}}422{bc{}}{bCd}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{{AnAn}{{n{fAf}}}}{b}{bCf}0````````````","D":"Cn","p":[[1,"reference"],[0,"mut"],[5,"ReinterpretCodec",0],[1,"unit"],[8,"AnyCowArray",55],[8,"AnyArray",55],[6,"Result",56],[8,"AnyArrayView",55],[8,"AnyArrayViewMut",55],[10,"Deserializer",57],[6,"ReinterpretCodecError",0],[5,"Formatter",58],[8,"Result",58],[10,"Serializer",59],[6,"AnyArrayDType",55],[5,"ArrayBase",60],[8,"Array",60],[10,"Copy",61],[17,"Elem"],[10,"Data",62],[10,"Dimension",63],[17,"Output"],[10,"Fn",64],[8,"ArrayView",60],[10,"ArrayDType",55],[5,"String",65],[5,"TypeId",66],[15,"MismatchedEncodeDType",43],[15,"MismatchedDecodeDType",43],[15,"InvalidReinterpret",43],[15,"MismatchedDecodeIntoDtype",43],[15,"MismatchedDecodeIntoShape",43],[15,"InvalidEncodedShape",43]],"r":[],"b":[[19,"impl-Debug-for-ReinterpretCodecError"],[20,"impl-Display-for-ReinterpretCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABgABQAJAAwAGAABAB8AAAAiAAUAKQACAA=="}],\
["numcodecs_round",{"t":"KPPFFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHMNNNNNNNNNNNNNNNOOOO","n":["Float","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","Positive","RoundCodec","RoundCodecError","UnsupportedDtype","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","decode","decode_into","deserialize","deserialize","encode","eq","fmt","fmt","from","from","from","from_config","get_config","hash","into","into","into","partial_cmp","precision","round","round","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","decoded","decoded","provided","provided"],"q":[[0,"numcodecs_round"],[56,"numcodecs_round::RoundCodecError"],[60,"core::clone"],[61,"numcodecs::array"],[62,"core::result"],[63,"serde::de"],[64,"core::cmp"],[65,"core::fmt"],[66,"serde::ser"],[67,"core::hash"],[68,"core::option"],[69,"ndarray"],[70,"ndarray::data_traits"],[71,"ndarray::dimension::dimension_trait"],[72,"alloc::string"],[73,"core::any"]],"i":[0,17,17,0,0,0,17,3,4,17,3,4,17,3,4,3,4,3,4,4,3,3,3,4,3,4,17,17,3,4,17,3,3,4,3,4,17,4,3,0,6,3,4,3,4,17,3,4,17,3,4,17,3,3,4,17,33,34,33,34],"f":"```````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{f}}}f}{{{b{{h{c}}}}}{{h{c}}}{jl}}{{b{b{dc}}}n{}}0{bn}00{{{b{f}}A`}{{Ad{Abc}}}{}}{{{b{f}}AfAh}{{Ad{nc}}}{}}{c{{Ad{f}}}Aj}{c{{Ad{{h{Al}}}}}Aj}3{{{b{{h{c}}}}{b{{h{c}}}}}An{B`l}}{{{b{Bb}}{b{dBd}}}Bf}0{cc{}}004{{{b{f}}c}AdBh}{{{b{{h{c}}}}{b{de}}}n{Bjl}Bl}{{}c{}}00{{{b{{h{c}}}}{b{{h{c}}}}}{{C`{Bn}}}{Cbl}}`{{{Cd{eg}}{h{c}}}{{Cf{cg}}}l{{Cj{}{{Ch{c}}}}}Cl}{ll}5{{{b{{h{Al}}}}c}AdBh}{bc{}}0{bCn}{c{{Ad{e}}}{}{}}00{{}{{Ad{c}}}{}}00{b}{bD`}00````","D":"Bj","p":[[1,"reference"],[0,"mut"],[5,"RoundCodec",0],[5,"Positive",0],[10,"Clone",60],[10,"Float",0],[1,"unit"],[8,"AnyCowArray",61],[8,"AnyArray",61],[6,"Result",62],[8,"AnyArrayView",61],[8,"AnyArrayViewMut",61],[10,"Deserializer",63],[1,"f64"],[1,"bool"],[10,"PartialEq",64],[6,"RoundCodecError",0],[5,"Formatter",65],[8,"Result",65],[10,"Serializer",66],[10,"Hash",67],[10,"Hasher",67],[6,"Ordering",64],[6,"Option",68],[10,"PartialOrd",64],[5,"ArrayBase",69],[8,"Array",69],[17,"Elem"],[10,"Data",70],[10,"Dimension",71],[5,"String",72],[5,"TypeId",73],[15,"MismatchedDecodeIntoDtype",56],[15,"MismatchedDecodeIntoShape",56]],"r":[],"b":[[26,"impl-Debug-for-RoundCodecError"],[27,"impl-Display-for-RoundCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACcABAAIABQAIAACACYAAAAqAA4A"}],\
["numcodecs_uniform_noise",{"t":"KPPTFGPHNNNNNNNNNNNNNNNNNMNNMOONNNNNNNNNNOOOO","n":["Float","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","NEG_HALF","UniformNoiseCodec","UniformNoiseCodecError","UnsupportedDtype","add_uniform_noise","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from_config","get_config","hash_bits","into","into","mul_add","scale","seed","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","decoded","decoded","provided","provided"],"q":[[0,"numcodecs_uniform_noise"],[41,"numcodecs_uniform_noise::UniformNoiseCodecError"],[45,"ndarray"],[46,"ndarray::data_traits"],[47,"ndarray::dimension::dimension_trait"],[48,"numcodecs::array"],[49,"core::result"],[50,"serde::de"],[51,"core::fmt"],[52,"serde::ser"],[53,"core::hash"],[54,"alloc::string"],[55,"core::any"]],"i":[0,18,18,4,0,0,18,0,10,18,10,18,10,10,10,10,10,10,10,18,18,10,18,10,10,4,10,18,4,10,10,10,10,18,10,18,10,18,10,10,18,25,26,25,26],"f":"```````{{{b{eg}}cd}{{f{cg}}}h{{l{}{{j{c}}}}}n}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{{A`{Ad}}}Ad}{{A`{A`{Abc}}}Af{}}{A`Af}{{{A`{Ad}}Ah}{{Al{Ajc}}}{}}{{{A`{Ad}}AnB`}{{Al{Afc}}}{}}{c{{Al{Ad}}}Bb}2{{{A`{Bd}}{A`{AbBf}}}Bh}0{cc{}}02{{{A`{Ad}}c}AlBj}{{h{A`{Abc}}}AfBl}{{}c{}}0{{hhh}h}``3{A`c{}}{A`Bn}{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{A`}{A`C`}0````","D":"Bj","p":[[5,"ArrayBase",45],[1,"u64"],[8,"Array",45],[10,"Float",0],[17,"Elem"],[10,"Data",46],[10,"Dimension",47],[1,"reference"],[0,"mut"],[5,"UniformNoiseCodec",0],[1,"unit"],[8,"AnyCowArray",48],[8,"AnyArray",48],[6,"Result",49],[8,"AnyArrayView",48],[8,"AnyArrayViewMut",48],[10,"Deserializer",50],[6,"UniformNoiseCodecError",0],[5,"Formatter",51],[8,"Result",51],[10,"Serializer",52],[10,"Hasher",53],[5,"String",54],[5,"TypeId",55],[15,"MismatchedDecodeIntoDtype",41],[15,"MismatchedDecodeIntoShape",41]],"r":[],"b":[[19,"impl-Display-for-UniformNoiseCodecError"],[20,"impl-Debug-for-UniformNoiseCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABgAAwAJAAwAGAABACAACQA="}],\
["numcodecs_wasm_guest",{"t":"Q","n":["export_codec"],"q":[[0,"numcodecs_wasm_guest"]],"i":[0],"f":"`","D":"d","p":[],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],\
["numcodecs_zfp",{"t":"PPPPPPPPPPPPPPPPFGGPPNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNONNNNNNNNNNNNNNNOOOOOOOOOOOOOOO","n":["DecodeUnknownDtype","EncodedDataNotBytes","EncodedDataNotOneDimensional","ExcessiveDimensionality","Expert","FixedAccuracy","FixedAccuracyModeIntegerData","FixedPrecision","FixedRate","HeaderDecodeFailed","HeaderEncodeFailed","InvalidExpertMode","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","Reversible","UnsupportedDtype","ZfpCodec","ZfpCodecError","ZfpCompressionMode","ZfpDecodeFailed","ZfpEncodeFailed","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","from","from","from","from_config","get_config","into","into","into","mode","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","decoded","decoded","dtype","mode","provided","provided","shape","shape","max_bits","max_prec","min_bits","min_exp","precision","rate","tolerance"],"q":[[0,"numcodecs_zfp"],[68,"numcodecs_zfp::ZfpCodecError"],[76,"numcodecs_zfp::ZfpCompressionMode"],[83,"ndarray"],[84,"alloc::vec"],[85,"core::result"],[86,"ndarray::dimension::dimension_trait"],[87,"numcodecs::array"],[88,"serde::de"],[89,"core::fmt"],[90,"serde::ser"],[91,"alloc::string"],[92,"core::any"]],"i":[9,9,9,9,4,4,9,4,4,9,9,9,9,9,4,9,0,0,0,9,9,3,4,9,3,4,9,3,4,3,4,3,4,0,3,3,0,0,3,4,3,4,9,9,3,4,9,3,3,3,4,9,3,3,4,3,4,9,3,4,9,3,4,9,3,3,4,9,23,24,25,26,23,24,27,28,29,29,29,29,30,31,32],"f":"`````````````````````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}0{{{l{ce}}{b{h}}}{{Ad{{A`{n}}Ab}}}`Af}{{{b{f}}Ah}{{Ad{Ajc}}}{}}{{{b{f}}AlAn}{{Ad{jc}}}{}}{{{b{{B`{n}}}}}{{Ad{AjAb}}}}{{{b{{B`{n}}}}An}{{Ad{jAb}}}}{c{{Ad{f}}}Bb}{c{{Ad{h}}}Bb}5{{{b{h}}{b{dBd}}}Bf}{{{b{Ab}}{b{dBd}}}Bf}0{cc{}}004{{{b{f}}c}AdBh}{{}c{}}00`1{{{b{h}}c}AdBh}{bc{}}0{bBj}{c{{Ad{e}}}{}{}}00{{}{{Ad{c}}}{}}00{b}{bBl}00```````````````","D":"En","p":[[1,"reference"],[0,"mut"],[5,"ZfpCodec",0],[6,"ZfpCompressionMode",0],[1,"unit"],[8,"ArrayView",83],[1,"u8"],[5,"Vec",84],[6,"ZfpCodecError",0],[6,"Result",85],[10,"Dimension",86],[8,"AnyCowArray",87],[8,"AnyArray",87],[8,"AnyArrayView",87],[8,"AnyArrayViewMut",87],[1,"slice"],[10,"Deserializer",88],[5,"Formatter",89],[8,"Result",89],[10,"Serializer",90],[5,"String",91],[5,"TypeId",92],[15,"MismatchedDecodeIntoDtype",68],[15,"MismatchedDecodeIntoShape",68],[15,"EncodedDataNotBytes",68],[15,"InvalidExpertMode",68],[15,"ExcessiveDimensionality",68],[15,"EncodedDataNotOneDimensional",68],[15,"Expert",76],[15,"FixedPrecision",76],[15,"FixedRate",76],[15,"FixedAccuracy",76]],"r":[],"b":[[42,"impl-Debug-for-ZfpCodecError"],[43,"impl-Display-for-ZfpCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACQABQAWAAsAIwABACcABQAwAAEANgAOAA=="}],\
["numcodecs_zlib",{"t":"PPPPPPPPPPPPPPPPPPFGFPFGNNNNNNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOO","n":["DecodeExcessiveEncodedData","DecodeProducedLess","EncodedDataNotBytes","EncodedDataNotOneDimensional","HeaderDecodeFailed","HeaderEncodeFailed","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","ZBestCompression","ZBestSpeed","ZLevel2","ZLevel3","ZLevel4","ZLevel5","ZLevel6","ZLevel7","ZLevel8","ZNoCompression","ZlibCodec","ZlibCodecError","ZlibDecodeError","ZlibDecodeFailed","ZlibHeaderError","ZlibLevel","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","get_config","into","into","into","into","into","level","serialize","serialize","source","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","decoded","decoded","dtype","provided","provided","shape","source","source","source"],"q":[[0,"numcodecs_zlib"],[94,"numcodecs_zlib::ZlibCodecError"],[103,"numcodecs::array"],[104,"alloc::vec"],[105,"core::result"],[106,"serde::de"],[107,"core::fmt"],[108,"serde::ser"],[109,"core::error"],[110,"core::option"],[111,"alloc::string"],[112,"core::any"]],"i":[9,9,9,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,0,0,0,9,0,0,3,4,9,18,19,3,4,9,18,19,3,4,3,4,3,4,4,0,3,3,0,0,3,4,3,9,9,18,18,19,19,3,4,9,18,19,3,3,3,4,9,18,19,3,3,4,9,18,19,3,4,9,18,19,3,4,9,18,19,3,4,9,18,19,3,3,4,9,18,19,25,26,27,25,26,28,29,30,31],"f":"````````````````````````{b{{b{c}}}{}}0000{{{b{d}}}{{b{dc}}}{}}0000{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}00{{lh}{{Ad{{A`{n}}Ab}}}}{{{b{f}}Af}{{Ad{Ahc}}}{}}{{{b{f}}lAj}{{Ad{jc}}}{}}{{{b{{Al{n}}}}}{{Ad{AhAb}}}}{{{b{{Al{n}}}}Aj}{{Ad{jAb}}}}{c{{Ad{f}}}An}{c{{Ad{h}}}An}5{{{b{Ab}}{b{dB`}}}Bb}0{{{b{Bd}}{b{dB`}}}Bb}0{{{b{Bf}}{b{dB`}}}Bb}0{cc{}}00005{{{b{f}}c}AdBh}{{}c{}}0000`1{{{b{h}}c}AdBh}{{{b{Ab}}}{{Bl{{b{Bj}}}}}}{{{b{Bd}}}{{Bl{{b{Bj}}}}}}{{{b{Bf}}}{{Bl{{b{Bj}}}}}}{bc{}}0{bBn}00{c{{Ad{e}}}{}{}}0000{{}{{Ad{c}}}{}}0000{b}{bC`}0000`````````","D":"Dl","p":[[1,"reference"],[0,"mut"],[5,"ZlibCodec",0],[6,"ZlibLevel",0],[1,"unit"],[8,"AnyArrayView",103],[1,"u8"],[5,"Vec",104],[6,"ZlibCodecError",0],[6,"Result",105],[8,"AnyCowArray",103],[8,"AnyArray",103],[8,"AnyArrayViewMut",103],[1,"slice"],[10,"Deserializer",106],[5,"Formatter",107],[8,"Result",107],[5,"ZlibHeaderError",0],[5,"ZlibDecodeError",0],[10,"Serializer",108],[10,"Error",109],[6,"Option",110],[5,"String",111],[5,"TypeId",112],[15,"MismatchedDecodeIntoDtype",94],[15,"MismatchedDecodeIntoShape",94],[15,"EncodedDataNotBytes",94],[15,"EncodedDataNotOneDimensional",94],[15,"HeaderEncodeFailed",94],[15,"HeaderDecodeFailed",94],[15,"ZlibDecodeFailed",94]],"r":[],"b":[[49,"impl-Display-for-ZlibCodecError"],[50,"impl-Debug-for-ZlibCodecError"],[51,"impl-Display-for-ZlibHeaderError"],[52,"impl-Debug-for-ZlibHeaderError"],[53,"impl-Debug-for-ZlibDecodeError"],[54,"impl-Display-for-ZlibDecodeError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEEABgAJAAkAGQAQACsAAQAvAAgAPQABAEUAGQA="}],\
["numcodecs_zstd",{"t":"PPPPPPPPFGFPPFFNNNNNNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOO","n":["DecodeExcessiveEncodedData","DecodeProducedLess","EncodedDataNotBytes","EncodedDataNotOneDimensional","HeaderDecodeFailed","HeaderEncodeFailed","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","ZstdCodec","ZstdCodecError","ZstdCodingError","ZstdDecodeFailed","ZstdEncodeFailed","ZstdHeaderError","ZstdLevel","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","get_config","into","into","into","into","into","level","serialize","serialize","source","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","decoded","decoded","dtype","provided","provided","shape","source","source","source","source"],"q":[[0,"numcodecs_zstd"],[85,"numcodecs_zstd::ZstdCodecError"],[95,"numcodecs::array"],[96,"alloc::vec"],[97,"core::result"],[98,"serde::de"],[99,"core::fmt"],[100,"serde::ser"],[101,"core::error"],[102,"core::option"],[103,"alloc::string"],[104,"core::any"]],"i":[9,9,9,9,9,9,9,9,0,0,0,9,9,0,0,3,4,9,18,19,3,4,9,18,19,3,4,3,4,3,4,4,0,3,3,0,0,3,4,3,9,9,18,18,19,19,3,4,9,18,19,3,3,3,4,9,18,19,3,3,4,9,18,19,3,4,9,18,19,3,4,9,18,19,3,4,9,18,19,3,3,4,9,18,19,25,26,27,25,26,28,29,30,31,32],"f":"```````````````{b{{b{c}}}{}}0000{{{b{d}}}{{b{dc}}}{}}0000{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}00{{lh}{{Ad{{A`{n}}Ab}}}}{{{b{f}}Af}{{Ad{Ahc}}}{}}{{{b{f}}lAj}{{Ad{jc}}}{}}{{{b{{Al{n}}}}}{{Ad{AhAb}}}}{{{b{{Al{n}}}}Aj}{{Ad{jAb}}}}{c{{Ad{f}}}An}{c{{Ad{h}}}An}5{{{b{Ab}}{b{dB`}}}Bb}0{{{b{Bd}}{b{dB`}}}Bb}0{{{b{Bf}}{b{dB`}}}Bb}0{cc{}}00005{{{b{f}}c}AdBh}{{}c{}}0000`1{{{b{h}}c}AdBh}{{{b{Ab}}}{{Bl{{b{Bj}}}}}}{{{b{Bd}}}{{Bl{{b{Bj}}}}}}{{{b{Bf}}}{{Bl{{b{Bj}}}}}}{bc{}}0{bBn}00{c{{Ad{e}}}{}{}}0000{{}{{Ad{c}}}{}}0000{b}{bC`}0000``````````","D":"E`","p":[[1,"reference"],[0,"mut"],[5,"ZstdCodec",0],[5,"ZstdLevel",0],[1,"unit"],[8,"AnyArrayView",95],[1,"u8"],[5,"Vec",96],[6,"ZstdCodecError",0],[6,"Result",97],[8,"AnyCowArray",95],[8,"AnyArray",95],[8,"AnyArrayViewMut",95],[1,"slice"],[10,"Deserializer",98],[5,"Formatter",99],[8,"Result",99],[5,"ZstdHeaderError",0],[5,"ZstdCodingError",0],[10,"Serializer",100],[10,"Error",101],[6,"Option",102],[5,"String",103],[5,"TypeId",104],[15,"MismatchedDecodeIntoDtype",85],[15,"MismatchedDecodeIntoShape",85],[15,"EncodedDataNotBytes",85],[15,"EncodedDataNotOneDimensional",85],[15,"HeaderEncodeFailed",85],[15,"ZstdEncodeFailed",85],[15,"HeaderDecodeFailed",85],[15,"ZstdDecodeFailed",85]],"r":[],"b":[[40,"impl-Debug-for-ZstdCodecError"],[41,"impl-Display-for-ZstdCodecError"],[42,"impl-Debug-for-ZstdHeaderError"],[43,"impl-Display-for-ZstdHeaderError"],[44,"impl-Display-for-ZstdCodingError"],[45,"impl-Debug-for-ZstdCodingError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADcABQAQABAAIgABACYACAA0AAEAPAAZAA=="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
