var searchIndex = new Map(JSON.parse('[\
["numcodecs",{"t":"IIGGIIIKTKRKKRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRKFRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRNNNNNNNNNNNNNMNMNNMMNMNNNNNNNNMMNNNNNNNNNNNNNNNNNNNMNNNNN","n":["AnyArcArray","AnyArray","AnyArrayBase","AnyArrayDType","AnyArrayView","AnyArrayViewMut","AnyCowArray","AnyRawData","CODEC_ID","Codec","Codec","DynCodec","DynCodecType","Error","F32","F32","F32","F32","F32","F32","F32","F32","F64","F64","F64","F64","F64","F64","F64","F64","I16","I16","I16","I16","I16","I16","I16","I16","I32","I32","I32","I32","I32","I32","I32","I32","I64","I64","I64","I64","I64","I64","I64","I64","I8","I8","I8","I8","I8","I8","I8","I8","StaticCodec","StaticCodecType","Type","U16","U16","U16","U16","U16","U16","U16","U16","U32","U32","U32","U32","U32","U32","U32","U32","U64","U64","U64","U64","U64","U64","U64","U64","U8","U8","U8","U8","U8","U8","U8","U8","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","codec_from_config","codec_from_config","codec_id","codec_id","cow","decode","decode_into","dtype","encode","eq","eq","fmt","fmt","fmt","from","from","from","from_config","get_config","hash","into","into","into","into_owned","is_empty","len","of","shape","strides","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","view","view_mut"],"q":[[0,"numcodecs"],[154,"numcodecs::array"],[155,"numcodecs::codec"],[156,"core::result"],[157,"serde::de"],[158,"core::marker"],[159,"core::error"],[160,"core::fmt"],[161,"serde::ser"],[162,"core::hash"],[163,"alloc::string"],[164,"core::any"]],"i":[0,0,0,0,0,0,0,0,14,0,8,0,0,18,35,19,23,24,16,3,5,4,35,19,23,24,16,3,5,4,35,19,23,24,16,3,5,4,35,19,23,24,16,3,5,4,35,19,23,24,16,3,5,4,35,19,23,24,16,3,5,4,0,0,11,35,19,23,24,16,3,5,4,35,19,23,24,16,3,5,4,35,19,23,24,16,3,5,4,35,19,23,24,16,3,5,4,3,13,5,3,13,5,3,5,3,5,3,5,5,8,13,8,13,3,18,18,3,18,3,5,3,5,5,3,13,5,14,18,5,3,13,5,3,3,3,13,3,3,3,5,5,3,13,5,3,13,5,11,3,13,5,3,3],"f":"`````````````````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{{f{c}}}}}{{f{c}}}h}{{{b{j}}}j}{{b{b{dc}}}l{}}0{bl}00{{{b{{A`{}{{n{c}}}}}}e}{{Ab{c}}}{{Af{}{{Ad{}}}}}Ah}{{{b{{Aj{c}}}}e}{{Ab{g}}}AlAh{}}{{{b{{A`{}{{n{c}}}}}}}{{b{An}}}{{Af{}{{Ad{}}}}}}{{{b{{Aj{c}}}}}{{b{An}}}Al}{{{b{{f{c}}}}}B`h}{{{b{{Bd{}{{Bb{c}}}}}}B`}{{Ab{Bfc}}}{BhBjBl}}{{{b{{Bd{}{{Bb{c}}}}}}BnC`}{{Ab{lc}}}{BhBjBl}}{{{b{{f{c}}}}}jh}2{{{b{{f{c}}}}{b{{f{c}}}}}Cbh}{{{b{j}}{b{j}}}Cb}{{{b{{f{c}}}}{b{dCd}}}Cfh}{{{b{j}}{b{dCd}}}Cf}0{cc{}}00{c{{Ab{Al}}}Ah}{{{b{{Bd{}{{Bb{c}}}}}}e}Ab{BhBjBl}Ch}{{{b{j}}{b{dc}}}lCj}{{}c{}}00{{{f{c}}}Bfh}{{{b{{f{c}}}}}Cbh}{{{b{{f{c}}}}}Clh}{{}{{Aj{c}}}Al}{{{b{{f{c}}}}}{{b{{Cn{Cl}}}}}h}{{{b{{f{c}}}}}{{b{{Cn{D`}}}}}h}{bc{}}0{bDb}{c{{Ab{e}}}{}{}}00{{}{{Ab{c}}}{}}00{{{b{{Af{}{{Ad{c}}}}}}}cA`}{bDd}00{{{b{{f{c}}}}}Bnh}{{{b{d{f{c}}}}}C`h}","D":"Ed","p":[[1,"reference"],[0,"mut"],[6,"AnyArrayBase",0,154],[10,"AnyRawData",0,154],[6,"AnyArrayDType",0,154],[1,"unit"],[17,"Codec"],[10,"DynCodecType",0,155],[6,"Result",156],[17,"Type"],[10,"DynCodec",0,155],[10,"Deserializer",157],[5,"StaticCodecType",0,155],[10,"StaticCodec",0,155],[1,"str"],[8,"AnyCowArray",0,154],[17,"Error"],[10,"Codec",0,155],[8,"AnyArray",0,154],[10,"Send",158],[10,"Sync",158],[10,"Error",159],[8,"AnyArrayView",0,154],[8,"AnyArrayViewMut",0,154],[1,"bool"],[5,"Formatter",160],[8,"Result",160],[10,"Serializer",161],[10,"Hasher",162],[1,"usize"],[1,"slice"],[1,"isize"],[5,"String",163],[5,"TypeId",164],[8,"AnyArcArray",0]],"r":[[0,154],[1,154],[2,154],[3,154],[4,154],[5,154],[6,154],[7,154],[9,155],[11,155],[12,155],[62,155],[63,155]],"b":[[122,"impl-Debug-for-AnyArrayDType"],[123,"impl-Display-for-AnyArrayDType"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAHAACAAPAC8AQgAsAHAAAAByAAAAeAAEAIIAAACMAAgAlgACAA=="}],\
["numcodecs_bit_round",{"t":"TRFGPKTTPTPHNNNNNNNNNNNNNNNMNNNNONMNNNNNNNNNOOOO","n":["BINARY_ONE","Binary","BitRoundCodec","BitRoundError","ExcessiveKeepBits","Float","MANITSSA_BITS","MANTISSA_MASK","MismatchedDecodeIntoDtype","TY","UnsupportedDtype","bit_round","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from_binary","from_config","get_config","into","into","keepbits","serialize","to_binary","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","decoded","dtype","keepbits","provided"],"q":[[0,"numcodecs_bit_round"],[44,"numcodecs_bit_round::BitRoundError"],[48,"ndarray"],[49,"core::result"],[50,"ndarray::dimension::dimension_trait"],[51,"numcodecs::array"],[52,"serde::de"],[53,"core::fmt"],[54,"core::marker"],[55,"core::ops::bit"],[56,"core::ops::arith"],[57,"serde::ser"],[58,"alloc::string"],[59,"core::any"]],"i":[6,6,0,0,4,0,6,6,4,6,4,0,10,4,10,4,10,10,10,10,10,10,10,4,4,10,4,6,10,10,10,4,10,10,6,10,4,10,4,10,4,10,10,4,32,33,33,32],"f":"```````````{{{b{ce}}d}{{j{{f{ce}}h}}}ln}{A`{{A`{c}}}{}}0{{{A`{Ab}}}{{A`{Abc}}}{}}0{{{A`{Ad}}}Ad}{{A`{A`{Abc}}}Af{}}{A`Af}{{{A`{Ad}}Ah}{{j{Ajc}}}{}}{{{A`{Ad}}AlAn}{{j{Afc}}}{}}{c{{j{Ad}}}B`}2{{{A`{h}}{A`{AbBb}}}Bd}0{cc{}}0{c{{l{}{{Bf{c}}}}}{Bh{Bl{}{{Bj{c}}}}{C`{Bn}{{Bj{c}}}}{Cb{c}{{Bj{c}}}}{Cd{c}}{Cf{c}{{Bj{c}}}}{Ch{c}}}}3{{{A`{Ad}}c}jCj}{{}c{}}0`1{{{l{}{{Bf{c}}}}}c{Bh{Bl{}{{Bj{c}}}}{C`{Bn}{{Bj{c}}}}{Cb{c}{{Bj{c}}}}{Cd{c}}{Cf{c}{{Bj{c}}}}{Ch{c}}}}{A`c{}}{A`Cl}{c{{j{e}}}{}{}}0{{}{{j{c}}}{}}0{A`}{A`Cn}0````","D":"C`","p":[[8,"CowArray",48],[1,"u8"],[8,"Array",48],[6,"BitRoundError",0],[6,"Result",49],[10,"Float",0],[10,"Dimension",50],[1,"reference"],[0,"mut"],[5,"BitRoundCodec",0],[1,"unit"],[8,"AnyCowArray",51],[8,"AnyArray",51],[8,"AnyArrayView",51],[8,"AnyArrayViewMut",51],[10,"Deserializer",52],[5,"Formatter",53],[8,"Result",53],[17,"Binary"],[10,"Copy",54],[17,"Output"],[10,"Not",55],[1,"u32"],[10,"Shr",55],[10,"Add",56],[10,"AddAssign",56],[10,"BitAnd",55],[10,"BitAndAssign",55],[10,"Serializer",57],[5,"String",58],[5,"TypeId",59],[15,"MismatchedDecodeIntoDtype",44],[15,"ExcessiveKeepBits",44]],"r":[],"b":[[23,"impl-Display-for-BitRoundError"],[24,"impl-Debug-for-BitRoundError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABgABAANAAwAHQABACIAAAAkAAgA"}],\
["numcodecs_identity",{"t":"FGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOO","n":["IdentityCodec","IdentityCodecError","MismatchedDecodeIntoDtype","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from_config","get_config","into","into","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","decoded","provided"],"q":[[0,"numcodecs_identity"],[32,"numcodecs_identity::IdentityCodecError"],[34,"numcodecs::array"],[35,"core::result"],[36,"serde::de"],[37,"core::fmt"],[38,"serde::ser"],[39,"alloc::string"],[40,"core::any"]],"i":[0,0,11,3,11,3,11,3,3,3,3,3,3,3,11,11,3,11,3,3,3,11,3,3,11,3,11,3,11,3,3,11,17,17],"f":"```{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{{b{f}}j}{{n{lc}}}{}}{{{b{f}}A`Ab}{{n{hc}}}{}}{c{{n{f}}}Ad}2{{{b{Af}}{b{dAh}}}Aj}0{cc{}}02{{{b{f}}c}nAl}{{}c{}}01{bc{}}{bAn}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0{b}{bB`}0``","D":"Ad","p":[[1,"reference"],[0,"mut"],[5,"IdentityCodec",0],[1,"unit"],[8,"AnyCowArray",34],[8,"AnyArray",34],[6,"Result",35],[8,"AnyArrayView",34],[8,"AnyArrayViewMut",34],[10,"Deserializer",36],[6,"IdentityCodecError",0],[5,"Formatter",37],[8,"Result",37],[10,"Serializer",38],[5,"String",39],[5,"TypeId",40],[15,"MismatchedDecodeIntoDtype",32]],"r":[],"b":[[14,"impl-Display-for-IdentityCodecError"],[15,"impl-Debug-for-IdentityCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABgAAwAEAAwAEwABABcACQA="}],\
["numcodecs_python",{"t":"FFFFKKFNNNNNNNNNNNNMNNNMNMNMNNMNHNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["PyCodec","PyCodecAdapter","PyCodecClass","PyCodecClassAdapter","PyCodecClassMethods","PyCodecMethods","PyCodecRegistry","as_codec","as_codec_class","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone_into","clone_to_uninit","codec_from_config","codec_from_config","codec_id","codec_id","decode","decode","decode_into","encode","encode","export_codec_class","from","from","from","from","from","from_borrowed_ptr_or_opt","from_borrowed_ptr_or_opt","from_codec","from_codec_class","from_owned_ptr_or_opt","from_owned_ptr_or_opt","from_registry_with_config","get_codec","get_config","get_config","into","into","into","into","into","into_codec","into_codec_class","register_codec","to_owned","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_exact","try_from_unchecked","try_from_unchecked","try_into","try_into","try_into","try_into","try_into","ty","type_check","type_check","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"numcodecs_python"],[82,"numcodecs_python::adapter"],[83,"pyo3::marker"],[84,"numcodecs_python::codec"],[85,"pyo3::instance"],[86,"numcodecs_python::codec_class"],[87,"pyo3::types::dict"],[88,"pyo3::err"],[89,"core::result"],[90,"serde::de"],[91,"alloc::string"],[92,"pyo3::types::any"],[93,"core::option"],[94,"numcodecs::array"],[95,"pyo3::types::module"],[96,"numcodecs::codec"],[97,"pyo3_ffi::object"],[98,"serde::ser"],[99,"core::convert"],[100,"core::any"],[101,"numcodecs_python::registry"],[102,"numcodecs_python::export"]],"i":[0,0,0,0,0,0,0,1,6,1,6,4,7,33,1,6,4,7,33,9,1,1,1,11,6,11,6,9,1,1,9,1,0,1,6,4,7,33,4,7,1,6,4,7,1,33,9,1,1,6,4,7,33,1,6,33,1,1,1,6,4,4,7,7,33,4,7,4,7,1,6,4,7,33,1,4,7,1,6,4,7,33],"f":"```````{{{d{b}}f}{{d{{j{h}}}}}}{{{d{l}}f}{{d{{j{n}}}}}}{d{{d{c}}}{}}0000{{{d{A`}}}{{d{A`c}}}{}}0000{{{d{Ab}}}{{j{n}}}}{{{d{b}}}b}{{d{d{A`c}}}Ad{}}{dAd}{{{d{Af}}{Aj{Ah}}}{{An{{j{h}}Al}}}}{{{d{l}}c}{{An{e}}}B`{}}{{{d{Af}}}{{An{BbAl}}}}{{{d{l}}}{{d{Bd}}}}{{{d{Ab}}{Aj{Bf}}{Bh{{Aj{Bf}}}}}{{An{{j{Bf}}Al}}}}{{{d{b}}Bj}{{An{Blc}}}{}}{{{d{b}}BnC`}{{An{Adc}}}{}}{{{d{Ab}}{Aj{Bf}}}{{An{{j{Bf}}Al}}}}2{{fc{Aj{Cb}}}{{An{{j{n}}Al}}}Cd}{cc{}}0000{{fCf}{{Bh{{d{c}}}}}{}}0{{{j{h}}}{{An{bAl}}}}{{{j{n}}}{{An{lAl}}}}22{c{{An{b}}}B`}{{{Aj{Ah}}}{{An{{j{h}}Al}}}}{{{d{Ab}}}{{An{{j{Ah}}Al}}}}{{{d{b}}c}AnCh}{{}c{}}0000{{bf}{{j{h}}}}{{lf}{{j{n}}}}{{{Aj{n}}{Bh{{d{Bd}}}}}{{An{AdAl}}}}{dc{}}{{{d{b}}f}{{An{bAl}}}}{c{{An{e}}}{}{}}0{c{{An{{d{e}}Cj}}}{{Cl{{d{Bf}}}}}{}}101100{c{{d{e}}}{{Cl{{d{Bf}}}}}{}}0{{}{{An{c}}}{}}0000{{{d{b}}}c{}}{{{d{{j{Bf}}}}}Cn}0{dD`}0000","D":"Df","p":[[5,"PyCodecAdapter",0,82],[1,"reference"],[5,"Python",83],[5,"PyCodec",0,84],[5,"Bound",85],[5,"PyCodecClassAdapter",0,82],[5,"PyCodecClass",0,86],[0,"mut"],[10,"PyCodecMethods",0,84],[1,"unit"],[10,"PyCodecClassMethods",0,86],[5,"PyDict",87],[5,"Borrowed",85],[5,"PyErr",88],[6,"Result",89],[10,"Deserializer",90],[5,"String",91],[1,"str"],[5,"PyAny",92],[6,"Option",93],[8,"AnyCowArray",94],[8,"AnyArray",94],[8,"AnyArrayView",94],[8,"AnyArrayViewMut",94],[5,"PyModule",95],[10,"DynCodecType",96],[5,"PyObject",97],[10,"Serializer",98],[5,"PyDowncastError",88],[10,"Into",99],[1,"bool"],[5,"TypeId",100],[5,"PyCodecRegistry",0]],"r":[[0,84],[1,82],[2,86],[3,82],[4,86],[5,84],[6,101],[32,102]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC8ACwAKAAkAFQACABkAAAAbAAAAHQABACAAAAAnAAEAKwABADAAAAA5AAAAOwAXAA=="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
