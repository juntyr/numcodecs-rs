var searchIndex = new Map(JSON.parse('[\
["numcodecs",{"t":"IIGGIIITKRKKRPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPKFRPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNMNMNNMMNMNNNNNNNNMMNNNNNNNNNNNNNNNNNNMNNNNN","n":["AnyArcArray","AnyArray","AnyArrayBase","AnyArrayDType","AnyArrayView","AnyArrayViewMut","AnyCowArray","CODEC_ID","Codec","Codec","DynCodec","DynCodecType","Error","F32","F32","F32","F32","F32","F32","F32","F64","F64","F64","F64","F64","F64","F64","I16","I16","I16","I16","I16","I16","I16","I32","I32","I32","I32","I32","I32","I32","I64","I64","I64","I64","I64","I64","I64","I8","I8","I8","I8","I8","I8","I8","StaticCodec","StaticCodecType","Type","U16","U16","U16","U16","U16","U16","U16","U32","U32","U32","U32","U32","U32","U32","U64","U64","U64","U64","U64","U64","U64","U8","U8","U8","U8","U8","U8","U8","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","codec_from_config","codec_from_config","codec_id","codec_id","cow","decode","decode_into","dtype","encode","eq","eq","fmt","fmt","fmt","from","from","from","from_config","get_config","hash","into","into","into","is_empty","len","of","shape","strides","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","view","view_mut"],"q":[[0,"numcodecs"],[142,"numcodecs::array"],[143,"core::result"],[144,"serde::de"],[145,"core::marker"],[146,"core::error"],[147,"core::fmt"],[148,"serde::ser"],[149,"core::hash"],[150,"alloc::string"],[151,"core::any"]],"i":[0,0,0,0,0,0,0,13,0,7,0,0,17,34,18,22,23,15,3,4,34,18,22,23,15,3,4,34,18,22,23,15,3,4,34,18,22,23,15,3,4,34,18,22,23,15,3,4,34,18,22,23,15,3,4,0,0,10,34,18,22,23,15,3,4,34,18,22,23,15,3,4,34,18,22,23,15,3,4,34,18,22,23,15,3,4,3,12,4,3,12,4,3,4,3,4,3,4,4,7,12,7,12,3,17,17,3,17,3,4,3,4,4,3,12,4,13,17,4,3,12,4,3,3,12,3,3,3,4,4,3,12,4,3,12,4,10,3,12,4,3,3],"f":"``````````````````````````````````````````````````````````````````````````````````````{{{b{c}}}{{b{e}}}{}{}}00{{{b{dc}}}{{b{de}}}{}{}}00{{{b{{f{c}}}}}{{f{c}}}`}{{{b{h}}}h}{{{b{c}}{b{de}}}j{}{}}0{{{b{c}}}j{}}00{{{b{{n{}{{l{c}}}}}}e}{{A`{c}}}{{Ad{}{{Ab{}}}}}Af}{{{b{{Ah{c}}}}e}{{A`{g}}}AjAf{}}{{{b{{n{}{{l{c}}}}}}}{{b{Al}}}{{Ad{}{{Ab{}}}}}}{{{b{{Ah{c}}}}}{{b{Al}}}Aj}{{{b{{f{c}}}}}An`}{{{b{{Bb{}{{B`{c}}}}}}An}{{A`{Bdc}}}{BfBhBj}}{{{b{{Bb{}{{B`{c}}}}}}BlBn}{{A`{jc}}}{BfBhBj}}{{{b{{f{c}}}}}h`}2{{{b{{f{c}}}}{b{{f{c}}}}}C``}{{{b{h}}{b{h}}}C`}{{{b{{f{c}}}}{b{dCb}}}Cd`}{{{b{h}}{b{dCb}}}Cd}0{cc{}}00{c{{A`{Aj}}}Af}{{{b{{Bb{}{{B`{c}}}}}}e}A`{BfBhBj}Cf}{{{b{h}}{b{dc}}}jCh}{ce{}{}}00{{{b{{f{c}}}}}C``}{{{b{{f{c}}}}}Cj`}{{}{{Ah{c}}}Aj}{{{b{{f{c}}}}}{{b{{Cl{Cj}}}}}`}{{{b{{f{c}}}}}{{b{{Cl{Cn}}}}}`}{{{b{c}}}e{}{}}0{{{b{c}}}D`{}}{c{{A`{e}}}{}{}}00000{{{b{{Ad{}{{Ab{c}}}}}}}cn}{{{b{c}}}Db{}}00{{{b{{f{c}}}}}Bl`}{{{b{d{f{c}}}}}Bn`}","D":"Dn","p":[[1,"reference"],[0,"mut"],[6,"AnyArrayBase",0,142],[6,"AnyArrayDType",0,142],[1,"unit"],[17,"Codec"],[10,"DynCodecType",0],[6,"Result",143],[17,"Type"],[10,"DynCodec",0],[10,"Deserializer",144],[5,"StaticCodecType",0],[10,"StaticCodec",0],[1,"str"],[8,"AnyCowArray",0,142],[17,"Error"],[10,"Codec",0],[8,"AnyArray",0,142],[10,"Send",145],[10,"Sync",145],[10,"Error",146],[8,"AnyArrayView",0,142],[8,"AnyArrayViewMut",0,142],[1,"bool"],[5,"Formatter",147],[8,"Result",147],[10,"Serializer",148],[10,"Hasher",149],[1,"usize"],[1,"slice"],[1,"isize"],[5,"String",150],[5,"TypeId",151],[8,"AnyArcArray",0]],"r":[[0,142],[1,142],[2,142],[3,142],[4,142],[5,142],[6,142]],"b":[[111,"impl-Display-for-AnyArrayDType"],[112,"impl-Debug-for-AnyArrayDType"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAGcACQAEAAAADgApADsAKABlAAAAZwAAAG0ABAB3AAAAgAAIAIoAAgA="}],\
["numcodecs_python",{"t":"FFKKFFFNNNNNNNNNNNNMNNNMNMNMNNMNHNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Codec","CodecClass","CodecClassMethods","CodecMethods","PyCodec","PyCodecClass","Registry","as_codec","as_codec_class","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone_into","clone_to_uninit","codec_from_config","codec_from_config","codec_id","codec_id","decode","decode","decode_into","encode","encode","export_codec_class","from","from","from","from","from","from_borrowed_ptr_or_opt","from_borrowed_ptr_or_opt","from_codec","from_codec_class","from_owned_ptr_or_opt","from_owned_ptr_or_opt","from_registry_with_config","get_codec","get_config","get_config","into","into","into","into","into","into_codec","into_codec_class","register_codec","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_exact","try_from_unchecked","try_from_unchecked","try_into","try_into","try_into","try_into","try_into","ty","type_check","type_check","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"numcodecs_python"],[81,"numcodecs_python::pycodec"],[82,"pyo3::marker"],[83,"numcodecs_python::codec"],[84,"pyo3::instance"],[85,"numcodecs_python::codec_class"],[86,"pyo3::types::dict"],[87,"pyo3::err"],[88,"core::result"],[89,"serde::de"],[90,"alloc::string"],[91,"pyo3::types::any"],[92,"core::option"],[93,"numcodecs::array"],[94,"pyo3::types::module"],[95,"numcodecs"],[96,"pyo3_ffi::object"],[97,"serde::ser"],[98,"core::convert"],[99,"core::any"],[100,"numcodecs_python::registry"],[101,"numcodecs_python::export"]],"i":[0,0,0,0,0,0,0,1,6,4,7,1,6,33,4,7,1,6,33,9,1,1,1,11,6,11,6,9,1,1,9,1,0,4,7,1,6,33,4,7,1,6,4,7,1,33,9,1,4,7,1,6,33,1,6,33,1,4,4,7,7,1,6,33,4,7,4,7,4,7,1,6,33,1,4,7,4,7,1,6,33],"f":"```````{{{d{b}}f}{{d{{j{h}}}}}}{{{d{l}}f}{{d{{j{n}}}}}}{{{d{c}}}{{d{e}}}{}{}}0000{{{d{A`c}}}{{d{A`e}}}{}{}}0000{{{d{Ab}}}{{j{n}}}}{{{d{b}}}b}{{{d{c}}{d{A`e}}}Ad{}{}}{{{d{c}}}Ad{}}{{{d{Af}}{Aj{Ah}}}{{An{{j{h}}Al}}}}{{{d{l}}c}{{An{e}}}B`{}}{{{d{Af}}}{{An{BbAl}}}}{{{d{l}}}{{d{Bd}}}}{{{d{Ab}}{Aj{Bf}}{Bh{{Aj{Bf}}}}}{{An{{j{Bf}}Al}}}}{{{d{b}}Bj}{{An{Blc}}}{}}{{{d{b}}BnC`}{{An{Adc}}}{}}{{{d{Ab}}{Aj{Bf}}}{{An{{j{Bf}}Al}}}}2{{fc{Aj{Cb}}}{{An{{j{n}}Al}}}Cd}{cc{}}0000{{fCf}{{Bh{{d{c}}}}}{}}0{{{j{h}}}{{An{bAl}}}}{{{j{n}}}{{An{lAl}}}}22{c{{An{b}}}B`}{{{Aj{Ah}}}{{An{{j{h}}Al}}}}{{{d{Ab}}}{{An{{j{Ah}}Al}}}}{{{d{b}}c}AnCh}{ce{}{}}0000{{bf}{{j{h}}}}{{lf}{{j{n}}}}{{{Aj{n}}{Bh{{d{Bd}}}}}{{An{AdAl}}}}{{{d{c}}}e{}{}}{c{{An{{d{e}}Cj}}}{{Cl{{d{Bf}}}}}{}}{c{{An{e}}}{}{}}1000011{c{{d{e}}}{{Cl{{d{Bf}}}}}{}}011111{{{d{b}}}c{}}{{{d{{j{Bf}}}}}Cn}0{{{d{c}}}D`{}}0000","D":"Dd","p":[[5,"PyCodec",0,81],[1,"reference"],[5,"Python",82],[5,"Codec",0,83],[5,"Bound",84],[5,"PyCodecClass",0,81],[5,"CodecClass",0,85],[0,"mut"],[10,"CodecMethods",0,83],[1,"unit"],[10,"CodecClassMethods",0,85],[5,"PyDict",86],[5,"Borrowed",84],[5,"PyErr",87],[6,"Result",88],[10,"Deserializer",89],[5,"String",90],[1,"str"],[5,"PyAny",91],[6,"Option",92],[8,"AnyCowArray",93],[8,"AnyArray",93],[8,"AnyArrayView",93],[8,"AnyArrayViewMut",93],[5,"PyModule",94],[10,"DynCodecType",95],[5,"PyObject",96],[10,"Serializer",97],[5,"PyDowncastError",87],[10,"Into",98],[1,"bool"],[5,"TypeId",99],[5,"Registry",0]],"r":[[0,83],[1,85],[2,85],[3,83],[4,81],[5,81],[6,100],[32,101]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC8ACgAKAAkAFQACABkAAAAbAAAAHQABACAAAAAnAAEAKwABADAAAAA5ABgA"}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
