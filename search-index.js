var searchIndex = new Map(JSON.parse('[["numcodecs",{"t":"IIGGGIIIKKTKRRTPKKRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRRPKFFRPPPPPPPRPPPPPPPRPPPPPPPRPPPPPPPRNNNNNNNNNNNNNNNNNNNNNNMNMNHMNONMMNNNMNNNNNNNNNNNNNNNNMMMNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNOOOO","n":["AnyArcArray","AnyArray","AnyArrayAssignError","AnyArrayBase","AnyArrayDType","AnyArrayView","AnyArrayViewMut","AnyCowArray","AnyRawData","ArrayDType","CODEC_ID","Codec","Codec","Config","DTYPE","DTypeMismatch","DynCodec","DynCodecType","Error","F32","F32","F32","F32","F32","F32","F32","F32","F64","F64","F64","F64","F64","F64","F64","F64","I16","I16","I16","I16","I16","I16","I16","I16","I32","I32","I32","I32","I32","I32","I32","I32","I64","I64","I64","I64","I64","I64","I64","I64","I8","I8","I8","I8","I8","I8","I8","I8","RawData","ShapeMismatch","StaticCodec","StaticCodecConfig","StaticCodecType","Type","U16","U16","U16","U16","U16","U16","U16","U16","U32","U32","U32","U32","U32","U32","U32","U32","U64","U64","U64","U64","U64","U64","U64","U64","U8","U8","U8","U8","U8","U8","U8","U8","__clone_box","__clone_box","as_bytes","as_typed","as_typed_mut","assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","codec_config_schema","codec_config_schema","codec_from_config","codec_from_config","codec_from_config_with_id","codec_id","codec_id","config","cow","decode","decode_into","deserialize","deserialize","dtype","encode","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_config","get_config","get_config","hash","into","into","into","into","into","into_cow","into_cow","into_owned","is_empty","json_schema","len","new","of","of","schema_id","schema_name","serialize","serialize","serialize_codec_config_with_id","shape","size","strides","to_binary","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","view","view_mut","with_bytes_mut","with_zeros_bytes","with_zeros_bytes","zeros","zeros","dst","dst","src","src"],"q":[[0,"numcodecs"],[212,"numcodecs::AnyArrayAssignError"],[216,"dyn_clone::sealed"],[217,"numcodecs::array"],[218,"alloc::borrow"],[219,"ndarray::aliases"],[220,"ndarray"],[221,"core::option"],[222,"core::result"],[223,"numcodecs::codec"],[224,"schemars::schema"],[225,"serde::de"],[226,"core::marker"],[227,"core::error"],[228,"core::fmt"],[229,"serde::ser"],[230,"schemars"],[231,"core::hash"],[232,"ndarray::data_repr"],[233,"schemars::generate"],[234,"alloc::string"],[235,"core::any"],[236,"core::ops::function"]],"i":[0,0,0,0,0,0,0,0,0,0,22,0,17,22,53,13,0,0,27,54,28,32,33,25,4,15,8,54,28,32,33,25,4,15,8,54,28,32,33,25,4,15,8,54,28,32,33,25,4,15,8,54,28,32,33,25,4,15,8,54,28,32,33,25,4,15,8,53,13,0,0,0,20,54,28,32,33,25,4,15,8,54,28,32,33,25,4,15,8,54,28,32,33,25,4,15,8,54,28,32,33,25,4,15,8,4,15,4,4,4,4,4,21,15,13,34,4,21,15,13,34,4,15,4,15,4,15,17,21,17,21,0,17,21,34,4,27,27,15,34,4,27,4,15,15,15,15,4,15,15,13,13,4,21,15,13,34,34,22,22,20,15,4,21,15,13,34,28,4,4,4,15,4,34,21,15,15,15,15,34,0,4,15,4,15,4,15,15,13,4,21,15,13,34,4,21,15,13,34,20,4,21,15,13,34,4,4,4,28,4,28,4,55,56,55,56],"f":"`````````````````````````````````````````````````````````````````````````````````````````````````````````{{bd}f}0{{{b{{h{c}}}}}{{n{{l{j}}}}}A`}{{{b{{h{c}}}}}{{Af{{b{{Ad{Ab}}}}}}}A`}{{{b{Ah{h{c}}}}}{{Af{{b{Ah{Ad{Ab}}}}}}}A`}{{{b{Ah{h{c}}}}{b{{h{e}}}}}{{Al{fAj}}}A`A`}{b{{b{c}}}{}}0000{{{b{Ah}}}{{b{Ahc}}}{}}0000{{{b{{h{c}}}}}{{h{c}}}A`}{{{b{An}}}An}{{b{b{Ahc}}}f{}}0{bf}0{{{b{{Bb{}{{B`{c}}}}}}}Bd{{Bh{}{{Bf{}}}}}}{{{b{{Bj{c}}}}}BdBl}{{{b{{Bb{}{{B`{c}}}}}}e}{{Al{c}}}{{Bh{}{{Bf{}}}}}Bn}{{{b{{Bj{c}}}}e}{{Al{g}}}BlBn{}}{{{b{c}}e}AlBbBn}{{{b{{Bb{}{{B`{c}}}}}}}{{b{C`}}}{{Bh{}{{Bf{}}}}}}{{{b{{Bj{c}}}}}{{b{C`}}}Bl}`{{{b{{h{c}}}}}CbA`}{{{b{{Cf{}{{Cd{c}}}}}}Cb}{{Al{Chc}}}{CjClCn}}{{{b{{Cf{}{{Cd{c}}}}}}D`Db}{{Al{fc}}}{CjClCn}}{c{{Al{An}}}Bn}{c{{Al{{Dd{e}}}}}BnBl}{{{b{{h{c}}}}}AnA`}4{{{b{{h{c}}}}{b{{h{c}}}}}DfA`}{{{b{An}}{b{An}}}Df}{{b{b{c}}}Df{}}00{{{b{{h{c}}}}{b{AhDh}}}DjA`}{{{b{An}}{b{AhDh}}}Dj}0{{{b{Aj}}{b{AhDh}}}Dj}0{cc{}}000{b{{Dd{c}}}Bl}1{c{{Bl{}{{Dl{c}}}}}{DnE`Eb}}{{{b{{Bl{}{{Dl{c}}}}}}}{{Dd{{Bl{}{{Dl{c}}}}}}}{DnE`Eb}}{{{b{{Bh{}{{Bf{c}}}}}}e}AlBbEd}{{{b{An}}{b{Ahc}}}fEf}{{}c{}}0000{ChCb}{{{h{{Eh{f}}}}}Cb}{{{h{c}}}ChA`}{{{b{{h{c}}}}}DfA`}{{{b{AhEj}}}Bd}{{{b{{h{c}}}}}ElA`}{{}{{Dd{c}}}Bl}{{}{{Bj{c}}}Bl}{{}An}{{}{{n{C`}}}}0{{{b{An}}c}AlEd}{{{b{{Dd{c}}}}e}AlBlEd}{{{b{c}}{b{e}}g}AlDnBhEd}{{{b{{h{c}}}}}{{b{{l{El}}}}}A`}{AnEl}{{{b{{h{c}}}}}{{b{{l{En}}}}}A`}{AnAn}{bc{}}0{bF`}0{c{{Al{e}}}{}{}}0000{{}{{Al{c}}}{}}0000{{{b{{Bh{}{{Bf{c}}}}}}}cBb}{bFb}0000{{{b{{h{c}}}}}D`A`}{{{b{Ah{h{c}}}}}DbA`}{{{b{Ah{h{c}}}}g}eA`{}{{Ff{{b{Ah{l{j}}}}}{{Fd{e}}}}}}{{An{b{{l{El}}}}e}{{Fh{Chc}}}{}{{Ff{{b{Ah{l{j}}}}}{{Fd{c}}}}}}{{An{b{{l{El}}}}e}{{Fh{{h{{Eh{f}}}}c}}}{}{{Ff{{b{Ah{l{j}}}}}{{Fd{c}}}}}}{{An{b{{l{El}}}}}Ch}{{An{b{{l{El}}}}}{{h{{Eh{f}}}}}}````","D":"Il","p":[[1,"reference"],[5,"Private",216],[1,"unit"],[6,"AnyArrayBase",0,217],[1,"u8"],[1,"slice"],[6,"Cow",218],[10,"AnyRawData",0,217],[8,"IxDyn",219],[5,"ArrayBase",220],[6,"Option",221],[0,"mut"],[6,"AnyArrayAssignError",0,217],[6,"Result",222],[6,"AnyArrayDType",0,217],[17,"Codec"],[10,"DynCodecType",0,223],[5,"Schema",224],[17,"Type"],[10,"DynCodec",0,223],[5,"StaticCodecType",0,223],[10,"StaticCodec",0,223],[10,"Deserializer",225],[1,"str"],[8,"AnyCowArray",0,217],[17,"Error"],[10,"Codec",0,223],[8,"AnyArray",0,217],[10,"Send",226],[10,"Sync",226],[10,"Error",227],[8,"AnyArrayView",0,217],[8,"AnyArrayViewMut",0,217],[5,"StaticCodecConfig",0,223],[1,"bool"],[5,"Formatter",228],[8,"Result",228],[17,"Config"],[10,"Serialize",229],[10,"Deserialize",225],[10,"JsonSchema",230],[10,"Serializer",229],[10,"Hasher",231],[5,"OwnedRepr",232],[5,"SchemaGenerator",233],[1,"usize"],[1,"isize"],[5,"String",234],[5,"TypeId",235],[17,"Output"],[10,"FnOnce",236],[1,"tuple"],[10,"ArrayDType",0],[8,"AnyArcArray",0],[15,"DTypeMismatch",212],[15,"ShapeMismatch",212]],"r":[[0,217],[1,217],[2,217],[3,217],[4,217],[5,217],[6,217],[7,217],[8,217],[9,217],[11,223],[16,223],[17,223],[69,223],[70,223],[71,223],[131,223],[180,223]],"b":[[148,"impl-Debug-for-AnyArrayDType"],[149,"impl-Display-for-AnyArrayDType"],[150,"impl-Debug-for-AnyArrayAssignError"],[151,"impl-Display-for-AnyArrayAssignError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAIoADgAUAC8ASgAhAHAADwCBAAAAgwAAAIYAAACLAAEAjwAJAJ0AAACiAAAArAAAALEAAwC6AA0AyQAEAA=="}],["numcodecs_bit_round",{"t":"TRFGPKTTPTPNHNNNNNNNNNNNNNNNNMNNNNNNONNNNMNNNNNNNNNOOO","n":["BINARY_ONE","Binary","BitRoundCodec","BitRoundCodecError","ExcessiveKeepBits","Float","MANITSSA_BITS","MANTISSA_MASK","MismatchedDecodeIntoArray","TY","UnsupportedDtype","__clone_box","bit_round","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_binary","from_config","get_config","get_config","into","into","json_schema","keepbits","schema_id","schema_name","serialize","source","to_binary","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","dtype","keepbits","source"],"q":[[0,"numcodecs_bit_round"],[51,"numcodecs_bit_round::BitRoundCodecError"],[54,"dyn_clone::sealed"],[55,"ndarray"],[56,"core::result"],[57,"ndarray::data_traits"],[58,"ndarray::dimension::dimension_trait"],[59,"numcodecs::array"],[60,"serde::de"],[61,"core::fmt"],[62,"core::marker"],[63,"core::ops::bit"],[64,"core::ops::arith"],[65,"numcodecs::codec"],[66,"serde::ser"],[67,"schemars::generate"],[68,"schemars::schema"],[69,"alloc::borrow"],[70,"core::error"],[71,"core::option"],[72,"alloc::string"],[73,"core::any"]],"i":[9,9,0,0,7,0,9,9,7,9,7,14,0,14,7,14,7,14,14,14,14,14,14,14,7,7,14,7,7,9,14,14,14,14,7,14,14,14,14,14,7,9,14,7,14,7,14,7,14,14,7,43,43,44],"f":"```````````{{bd}f}{{{h{eg}}j}{{A`{{l{cg}}n}}}Ab{{Af{}{{Ad{c}}}}}Ah}{b{{b{c}}}{}}0{{{b{Aj}}}{{b{Ajc}}}{}}0{{{b{Al}}}Al}{{b{b{Ajc}}}f{}}{bf}{{{b{Al}}An}{{A`{B`c}}}{}}{{{b{Al}}BbBd}{{A`{fc}}}{}}{c{{A`{Al}}}Bf}2{{{b{n}}{b{AjBh}}}Bj}0{cc{}}0{Bln}{c{{Ab{}{{Bn{c}}}}}{C`{Cd{}{{Cb{c}}}}{Ch{Cf}{{Cb{c}}}}{Cj{c}{{Cb{c}}}}{Cl{c}}{Cn{c}{{Cb{c}}}}{D`{c}}}}{cAl{}}{{{b{Al}}}{{Db{Al}}}}{{bc}A`Dd}{{}c{}}0{{{b{AjDf}}}Dh}`{{}{{Dl{Dj}}}}0{{{b{Al}}c}A`Dd}{{{b{n}}}{{E`{{b{Dn}}}}}}{{{Ab{}{{Bn{c}}}}}c{C`{Cd{}{{Cb{c}}}}{Ch{Cf}{{Cb{c}}}}{Cj{c}{{Cb{c}}}}{Cl{c}}{Cn{c}{{Cb{c}}}}{D`{c}}}}{bc{}}{bEb}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{b}{bEd}0```","D":"Bn","p":[[1,"reference"],[5,"Private",54],[1,"unit"],[5,"ArrayBase",55],[1,"u8"],[8,"Array",55],[6,"BitRoundCodecError",0],[6,"Result",56],[10,"Float",0],[17,"Elem"],[10,"Data",57],[10,"Dimension",58],[0,"mut"],[5,"BitRoundCodec",0],[8,"AnyCowArray",59],[8,"AnyArray",59],[8,"AnyArrayView",59],[8,"AnyArrayViewMut",59],[10,"Deserializer",60],[5,"Formatter",61],[8,"Result",61],[6,"AnyArrayAssignError",59],[17,"Binary"],[10,"Copy",62],[17,"Output"],[10,"Not",63],[1,"u32"],[10,"Shr",63],[10,"Add",64],[10,"AddAssign",64],[10,"BitAnd",63],[10,"BitAndAssign",63],[5,"StaticCodecConfig",65],[10,"Serializer",66],[5,"SchemaGenerator",67],[5,"Schema",68],[1,"str"],[6,"Cow",69],[10,"Error",70],[6,"Option",71],[5,"String",72],[5,"TypeId",73],[15,"ExcessiveKeepBits",51],[15,"MismatchedDecodeIntoArray",51]],"r":[],"b":[[24,"impl-Debug-for-BitRoundCodecError"],[25,"impl-Display-for-BitRoundCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ABwAMAAAADgAMAB0AAAAfAAIAJAAAACYAAwArAAgA"}],["numcodecs_fixed_offset_scale",{"t":"FGKPPNMNNNNNNNNNNNNNNNNNNNNNNMMMHNNNNNNNNNNNNNHHO","n":["FixedOffsetScaleCodec","FixedOffsetScaleCodecError","Float","MismatchedDecodeIntoArray","UnsupportedDtype","__clone_box","add_mul","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_config","get_config","get_config","into","into","json_schema","mul_add","negate","recip","scale","schema_id","schema_name","serialize","source","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","unscale","unscale_into","source"],"q":[[0,"numcodecs_fixed_offset_scale"],[48,"numcodecs_fixed_offset_scale::FixedOffsetScaleCodecError"],[49,"dyn_clone::sealed"],[50,"numcodecs::array"],[51,"core::result"],[52,"serde::de"],[53,"core::fmt"],[54,"numcodecs::codec"],[55,"serde::ser"],[56,"schemars::generate"],[57,"schemars::schema"],[58,"ndarray"],[59,"ndarray::data_traits"],[60,"ndarray::dimension::dimension_trait"],[61,"alloc::borrow"],[62,"core::error"],[63,"core::option"],[64,"alloc::string"],[65,"core::any"]],"i":[0,0,0,13,13,6,4,6,13,6,13,6,6,6,6,6,6,6,13,13,6,13,13,6,6,6,6,13,6,4,4,4,0,6,6,6,13,6,13,6,13,6,13,6,6,13,0,0,34],"f":"`````{{bd}f}{{hhh}h}{b{{b{c}}}{}}0{{{b{j}}}{{b{jc}}}{}}0{{{b{l}}}l}{{b{b{jc}}}f{}}{bf}{{{b{l}}n}{{Ab{A`c}}}{}}{{{b{l}}AdAf}{{Ab{fc}}}{}}{c{{Ab{l}}}Ah}2{{{b{Aj}}{b{jAl}}}An}0{cc{}}0{B`Aj}{cl{}}{{{b{l}}}{{Bb{l}}}}{{bc}AbBd}{{}c{}}0{{{b{jBf}}}Bh}{{hhh}h}{hh}0{{{Bj{eg}}cc}{{Bl{cg}}}h{{C`{}{{Bn{c}}}}}Cb}{{}{{Cf{Cd}}}}0{{{b{l}}c}AbBd}{{{b{Aj}}}{{Cj{{b{Ch}}}}}}{bc{}}{bCl}{c{{Ab{e}}}{}{}}0{{}{{Ab{c}}}{}}0{b}{bCn}09{{{D`{ce}}{Db{ce}}cc}{{Ab{fAj}}}hCb}`","D":"Bd","p":[[1,"reference"],[5,"Private",49],[1,"unit"],[10,"Float",0],[0,"mut"],[5,"FixedOffsetScaleCodec",0],[8,"AnyCowArray",50],[8,"AnyArray",50],[6,"Result",51],[8,"AnyArrayView",50],[8,"AnyArrayViewMut",50],[10,"Deserializer",52],[6,"FixedOffsetScaleCodecError",0],[5,"Formatter",53],[8,"Result",53],[6,"AnyArrayAssignError",50],[5,"StaticCodecConfig",54],[10,"Serializer",55],[5,"SchemaGenerator",56],[5,"Schema",57],[5,"ArrayBase",58],[8,"Array",58],[17,"Elem"],[10,"Data",59],[10,"Dimension",60],[1,"str"],[6,"Cow",61],[10,"Error",62],[6,"Option",63],[5,"String",64],[5,"TypeId",65],[8,"ArrayView",58],[8,"ArrayViewMut",58],[15,"MismatchedDecodeIntoArray",48]],"r":[],"b":[[18,"impl-Display-for-FixedOffsetScaleCodecError"],[19,"impl-Debug-for-FixedOffsetScaleCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ABQAGAAAACAAMABcAAwAdAAAAIgAMAA=="}],["numcodecs_identity",{"t":"FGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNO","n":["IdentityCodec","IdentityCodecError","MismatchedDecodeIntoArray","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_config","get_config","get_config","into","into","json_schema","schema_id","schema_name","serialize","source","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","source"],"q":[[0,"numcodecs_identity"],[39,"numcodecs_identity::IdentityCodecError"],[40,"dyn_clone::sealed"],[41,"numcodecs::array"],[42,"core::result"],[43,"serde::de"],[44,"core::fmt"],[45,"numcodecs::codec"],[46,"serde::ser"],[47,"schemars::generate"],[48,"schemars::schema"],[49,"alloc::borrow"],[50,"core::error"],[51,"core::option"],[52,"alloc::string"],[53,"core::any"]],"i":[0,0,12,5,5,12,5,12,5,5,5,5,5,5,5,12,12,5,12,12,5,5,5,5,12,5,5,5,5,12,5,12,5,12,5,12,5,5,12,26],"f":"```{{bd}f}{b{{b{c}}}{}}0{{{b{h}}}{{b{hc}}}{}}0{{{b{j}}}j}{{b{b{hc}}}f{}}{bf}{{{b{j}}l}{{A`{nc}}}{}}{{{b{j}}AbAd}{{A`{fc}}}{}}{c{{A`{j}}}Af}2{{{b{Ah}}{b{hAj}}}Al}0{cc{}}0{AnAh}{cj{}}{{{b{j}}}{{B`{j}}}}{{bc}A`Bb}{{}c{}}0{{{b{hBd}}}Bf}{{}{{Bj{Bh}}}}0{{{b{j}}c}A`Bb}{{{b{Ah}}}{{Bn{{b{Bl}}}}}}{bc{}}{bC`}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{b}{bCb}0`","D":"Ab","p":[[1,"reference"],[5,"Private",40],[1,"unit"],[0,"mut"],[5,"IdentityCodec",0],[8,"AnyCowArray",41],[8,"AnyArray",41],[6,"Result",42],[8,"AnyArrayView",41],[8,"AnyArrayViewMut",41],[10,"Deserializer",43],[6,"IdentityCodecError",0],[5,"Formatter",44],[8,"Result",44],[6,"AnyArrayAssignError",41],[5,"StaticCodecConfig",45],[10,"Serializer",46],[5,"SchemaGenerator",47],[5,"Schema",48],[1,"str"],[6,"Cow",49],[10,"Error",50],[6,"Option",51],[5,"String",52],[5,"TypeId",53],[15,"MismatchedDecodeIntoArray",39]],"r":[],"b":[[15,"impl-Display-for-IdentityCodecError"],[16,"impl-Debug-for-IdentityCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8AAwAEAA0AFAADABoADQA="}],["numcodecs_linear_quantize",{"t":"PPPPKPPPGFGGFPPPPTKTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNONNNNNNNNNNMNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNMNNNMMHHHMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOO","n":["DecodeInvalidShapeHeader","EncodedDataNotOneDimensional","F32","F64","Float","HeaderDecodeFailed","HeaderEncodeFailed","InvalidEncodedDType","LinearQuantizeBins","LinearQuantizeCodec","LinearQuantizeCodecError","LinearQuantizeDType","LinearQuantizeHeaderError","MismatchedDecodeIntoDtype","MismatchedDecodeIntoShape","MismatchedEncodeDType","NonFiniteData","ONE","Unsigned","ZERO","ZERO","_1B1","_1B10","_1B11","_1B12","_1B13","_1B14","_1B15","_1B16","_1B17","_1B18","_1B19","_1B2","_1B20","_1B21","_1B22","_1B23","_1B24","_1B25","_1B26","_1B27","_1B28","_1B29","_1B3","_1B30","_1B31","_1B32","_1B33","_1B34","_1B35","_1B36","_1B37","_1B38","_1B39","_1B4","_1B40","_1B41","_1B42","_1B43","_1B44","_1B45","_1B46","_1B47","_1B48","_1B49","_1B5","_1B50","_1B51","_1B52","_1B53","_1B54","_1B55","_1B56","_1B57","_1B58","_1B59","_1B6","_1B60","_1B61","_1B62","_1B63","_1B64","_1B7","_1B8","_1B9","__clone_box","__clone_box","__clone_box","bits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clamp","clone","clone","clone","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","decode","decode_into","deserialize","deserialize","deserialize","dtype","encode","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_config","get_config","get_config","into","into","into","into","into","is_finite","json_schema","json_schema","json_schema","maximum","minimum","quantize","reconstruct","reconstruct_into","scale_for_bits","schema_id","schema_id","schema_id","schema_name","schema_name","schema_name","serialize","serialize","serialize","source","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","configured","configured","decoded","dtype","provided","provided","provided","shape","source","source","source"],"q":[[0,"numcodecs_linear_quantize"],[179,"numcodecs_linear_quantize::LinearQuantizeCodecError"],[190,"dyn_clone::sealed"],[191,"numcodecs::array"],[192,"core::result"],[193,"serde::de"],[194,"core::fmt"],[195,"ndarray::error"],[196,"numcodecs::codec"],[197,"serde::ser"],[198,"schemars::generate"],[199,"schemars::schema"],[200,"ndarray"],[201,"alloc::vec"],[202,"ndarray::data_traits"],[203,"ndarray::dimension::dimension_trait"],[204,"core::ops::function"],[205,"ndarray::aliases"],[206,"alloc::borrow"],[207,"core::error"],[208,"core::option"],[209,"alloc::string"],[210,"core::any"]],"i":[17,17,7,7,0,17,17,17,0,0,0,0,0,17,17,17,17,5,0,5,30,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,7,8,6,6,7,8,17,18,6,7,8,17,18,5,6,7,8,6,7,8,6,7,8,6,6,6,7,8,6,6,7,7,17,17,18,18,6,7,8,17,17,18,6,6,6,6,7,8,17,18,5,6,7,8,5,5,0,0,0,5,6,7,8,6,7,8,6,7,8,17,18,6,7,8,7,17,18,6,7,8,17,18,6,7,8,17,18,6,6,7,8,17,18,43,44,45,46,43,44,45,47,48,49,50],"f":"`````````````````````````````````````````````````````````````````````````````````````{{bd}f}00`{b{{b{c}}}{}}0000{{{b{h}}}{{b{hc}}}{}}0000{{jjj}j}{{{b{l}}}l}{{{b{n}}}n}{{{b{A`}}}A`}{{b{b{hc}}}f{}}00{bf}00{{{b{l}}Ab}{{Af{Adc}}}{}}{{{b{l}}AhAj}{{Af{fc}}}{}}{c{{Af{l}}}Al}{c{{Af{n}}}Al}{c{{Af{A`}}}Al}`4{{{b{n}}{b{hAn}}}B`}0{{{b{Bb}}{b{hAn}}}B`}0{{{b{Bd}}{b{hAn}}}B`}0{cc{}}000{BfBb}1{cl{}}{{{b{l}}}{{Bh{l}}}}{{bc}AfBj}{{}c{}}0000{jBl}{{{b{hBn}}}C`}00{{jj}j}0{{{b{{Cb{eg}}}}k}{{Af{{Cd{i}}Bb}}}j{{Ch{}{{Cf{c}}}}}CjCl{{D`{c}{{Cn{i}}}}}}{{{b{{Db{c}}}}g}{{Af{{Dd{e}}Bb}}}Clj{{D`{c}{{Cn{e}}}}}}{{{b{{Db{c}}}}{Df{e}}g}{{Af{fBb}}}Clj{{D`{c}{{Cn{e}}}}}}{Dhj}{{}{{Dl{Dj}}}}00000{{{b{l}}c}AfBj}{{{b{n}}c}AfBj}{{{b{A`}}c}AfBj}{{{b{Bb}}}{{E`{{b{Dn}}}}}}{{{b{Bd}}}{{E`{{b{Dn}}}}}}{bc{}}00{bEb}00{c{{Af{e}}}{}{}}0000{{}{{Af{c}}}{}}0000{b}{bEd}0000```````````","D":"Ff","p":[[1,"reference"],[5,"Private",190],[1,"unit"],[0,"mut"],[10,"Float",0],[5,"LinearQuantizeCodec",0],[6,"LinearQuantizeDType",0],[6,"LinearQuantizeBins",0],[8,"AnyCowArray",191],[8,"AnyArray",191],[6,"Result",192],[8,"AnyArrayView",191],[8,"AnyArrayViewMut",191],[10,"Deserializer",193],[5,"Formatter",194],[8,"Result",194],[6,"LinearQuantizeCodecError",0],[5,"LinearQuantizeHeaderError",0],[5,"ShapeError",195],[5,"StaticCodecConfig",196],[10,"Serializer",197],[1,"bool"],[5,"SchemaGenerator",198],[5,"Schema",199],[5,"ArrayBase",200],[5,"Vec",201],[17,"Elem"],[10,"Data",202],[10,"Dimension",203],[10,"Unsigned",0],[17,"Output"],[10,"Fn",204],[1,"slice"],[8,"ArrayD",205],[8,"ArrayViewMutD",205],[1,"u8"],[1,"str"],[6,"Cow",206],[10,"Error",207],[6,"Option",208],[5,"String",209],[5,"TypeId",210],[15,"MismatchedEncodeDType",179],[15,"MismatchedDecodeIntoDtype",179],[15,"MismatchedDecodeIntoShape",179],[15,"InvalidEncodedDType",179],[15,"EncodedDataNotOneDimensional",179],[15,"HeaderEncodeFailed",179],[15,"HeaderDecodeFailed",179],[15,"DecodeInvalidShapeHeader",179]],"r":[],"b":[[116,"impl-Debug-for-LinearQuantizeDType"],[117,"impl-Display-for-LinearQuantizeDType"],[118,"impl-Debug-for-LinearQuantizeCodecError"],[119,"impl-Display-for-LinearQuantizeCodecError"],[120,"impl-Display-for-LinearQuantizeHeaderError"],[121,"impl-Debug-for-LinearQuantizeHeaderError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAIsACQADAAEAFgBCAFoACQBlAA0AdAAGAH8AAACBAAIAigACAJMAIAA="}],["numcodecs_log",{"t":"KFGPPPPNNNNNNNNNNNNHMHNNNNNNNNNNMMNHMNNNNNNNNNNNNNO","n":["Float","LogCodec","LogCodecError","MismatchedDecodeIntoArray","NonFiniteData","NonPositiveData","UnsupportedDtype","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","exp","exp","exp_into","fmt","fmt","from","from","from","from_config","get_config","get_config","into","into","is_finite","is_positive","json_schema","ln","ln","schema_id","schema_name","serialize","source","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","source"],"q":[[0,"numcodecs_log"],[50,"numcodecs_log::LogCodecError"],[51,"dyn_clone::sealed"],[52,"numcodecs::array"],[53,"core::result"],[54,"serde::de"],[55,"ndarray"],[56,"ndarray::data_traits"],[57,"ndarray::dimension::dimension_trait"],[58,"core::fmt"],[59,"serde::ser"],[60,"numcodecs::codec"],[61,"schemars::generate"],[62,"schemars::schema"],[63,"alloc::borrow"],[64,"core::error"],[65,"core::option"],[66,"alloc::string"],[67,"core::any"]],"i":[0,0,0,14,14,14,14,5,5,14,5,14,5,5,5,5,5,5,5,0,15,0,14,14,5,14,14,5,5,5,5,14,15,15,5,0,15,5,5,5,14,5,14,5,14,5,14,5,5,14,35],"f":"```````{{bd}f}{b{{b{c}}}{}}0{{{b{h}}}{{b{hc}}}{}}0{{{b{j}}}j}{{b{b{hc}}}f{}}{bf}{{{b{j}}l}{{A`{nc}}}{}}{{{b{j}}AbAd}{{A`{fc}}}{}}{c{{A`{j}}}Af}2{{{Ah{eg}}}{{A`{{Aj{cg}}Al}}}An{{Bb{}{{B`{c}}}}}Bd}{AnAn}{{{Bf{ce}}{Bh{ce}}}{{A`{fAl}}}AnBd}{{{b{Al}}{b{hBj}}}Bl}0{cc{}}0{BnAl}{cj{}}{{bc}A`C`}{{{b{j}}}{{Cb{j}}}}{{}c{}}0{AnCd}0{{{b{hCf}}}Ch};:{{}{{Cl{Cj}}}}0{{{b{j}}c}A`C`}{{{b{Al}}}{{D`{{b{Cn}}}}}}{bc{}}{bDb}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{b}{bDd}0`","D":"Bh","p":[[1,"reference"],[5,"Private",51],[1,"unit"],[0,"mut"],[5,"LogCodec",0],[8,"AnyCowArray",52],[8,"AnyArray",52],[6,"Result",53],[8,"AnyArrayView",52],[8,"AnyArrayViewMut",52],[10,"Deserializer",54],[5,"ArrayBase",55],[8,"Array",55],[6,"LogCodecError",0],[10,"Float",0],[17,"Elem"],[10,"Data",56],[10,"Dimension",57],[8,"ArrayView",55],[8,"ArrayViewMut",55],[5,"Formatter",58],[8,"Result",58],[6,"AnyArrayAssignError",52],[10,"Serializer",59],[5,"StaticCodecConfig",60],[1,"bool"],[5,"SchemaGenerator",61],[5,"Schema",62],[1,"str"],[6,"Cow",63],[10,"Error",64],[6,"Option",65],[5,"String",66],[5,"TypeId",67],[15,"MismatchedDecodeIntoArray",50]],"r":[],"b":[[22,"impl-Display-for-LogCodecError"],[23,"impl-Debug-for-LogCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ABQAIAAsAFwABABsAAwAjAAAAJgAMAA=="}],["numcodecs_python",{"t":"FFFFKKFNNNMNNNNNNNNNNMNNNNMNMNMNNMNHNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["PyCodec","PyCodecAdapter","PyCodecClass","PyCodecClassAdapter","PyCodecClassMethods","PyCodecMethods","PyCodecRegistry","__clone_box","as_codec","as_codec_class","as_type","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone_into","clone_to_uninit","codec_config_schema","codec_from_config","codec_from_config","codec_id","codec_id","decode","decode","decode_into","encode","encode","export_codec_class","from","from","from","from","from","from_borrowed_ptr_or_opt","from_borrowed_ptr_or_opt","from_codec","from_codec_class","from_owned_ptr_or_opt","from_owned_ptr_or_opt","from_registry_with_config","get_codec","get_config","get_config","into","into","into","into","into","into_codec","into_codec_class","register_codec","to_owned","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_exact","try_from_unchecked","try_from_unchecked","try_into","try_into","try_into","try_into","try_into","ty","type_check","type_check","type_id","type_id","type_id","type_id","type_id","with_downcast","with_downcast"],"q":[[0,"numcodecs_python"],[87,"dyn_clone::sealed"],[88,"numcodecs_python::adapter"],[89,"pyo3::marker"],[90,"numcodecs_python::codec"],[91,"pyo3::instance"],[92,"numcodecs_python::codec_class"],[93,"pyo3::types::typeobject"],[94,"schemars::schema"],[95,"pyo3::types::dict"],[96,"pyo3::err"],[97,"core::result"],[98,"serde::de"],[99,"alloc::string"],[100,"pyo3::types::any"],[101,"core::option"],[102,"numcodecs::array"],[103,"pyo3::types::module"],[104,"numcodecs::codec"],[105,"pyo3_ffi::object"],[106,"serde::ser"],[107,"core::convert"],[108,"core::any"],[109,"core::ops::function"],[110,"numcodecs_python::registry"],[111,"numcodecs_python::export"]],"i":[0,0,0,0,0,0,0,4,4,8,10,4,8,6,9,39,4,8,6,9,39,13,4,4,4,8,10,8,10,8,13,4,4,13,4,0,4,8,6,9,39,6,9,4,8,6,9,4,39,13,4,4,8,6,9,39,4,8,39,4,4,4,8,6,6,9,9,39,6,9,6,9,4,8,6,9,39,4,6,9,4,8,6,9,39,4,8],"f":"```````{{bd}f}{{{b{h}}j}{{b{{n{l}}}}}}{{{b{A`}}j}{{b{{n{Ab}}}}}}{{{b{Ad}}}{{b{{n{Af}}}}}}{b{{b{c}}}{}}0000{{{b{Ah}}}{{b{Ahc}}}{}}0000{{{b{Aj}}}{{n{Ab}}}}{{{b{h}}}h}{{b{b{Ahc}}}f{}}{bf}{{{b{A`}}}Al}{{{b{Ad}}{B`{An}}}{{Bd{{n{l}}Bb}}}}{{{b{A`}}c}{{Bd{e}}}Bf{}}{{{b{Ad}}}{{Bd{BhBb}}}}{{{b{A`}}}{{b{Bj}}}}{{{b{Aj}}{B`{Bl}}{Bn{{B`{Bl}}}}}{{Bd{{n{Bl}}Bb}}}}{{{b{h}}C`}{{Bd{Cbc}}}{}}{{{b{h}}CdCf}{{Bd{fc}}}{}}{{{b{Aj}}{B`{Bl}}}{{Bd{{n{Bl}}Bb}}}}2{{jc{B`{Ch}}}{{Bd{{n{Ab}}Bb}}}Cj}{cc{}}0000{{jCl}{{Bn{{b{c}}}}}{}}0{{{n{l}}}{{Bd{hBb}}}}{{{n{Ab}}}{{Bd{A`Bb}}}}22{c{{Bd{h}}}Bf}{{{B`{An}}}{{Bd{{n{l}}Bb}}}}{{{b{Aj}}}{{Bd{{n{An}}Bb}}}}{{{b{h}}c}BdCn}{{}c{}}0000{{hj}{{n{l}}}}{{A`j}{{n{Ab}}}}{{{B`{Ab}}{Bn{{b{Bj}}}}}{{Bd{fBb}}}}{bc{}}{{{b{h}}j}{{Bd{hBb}}}}{c{{Bd{e}}}{}{}}0{c{{Bd{{b{e}}D`}}}{{Db{{b{Bl}}}}}{}}101100{c{{b{e}}}{{Db{{b{Bl}}}}}{}}0{{}{{Bd{c}}}{}}0000{{{b{h}}}c{}}{{{b{{n{Bl}}}}}Dd}0{bDf}0000{{{b{{n{l}}}}g}{{Bn{e}}}Dh{}{{Dl{{b{c}}}{{Dj{e}}}}}}{{{b{{n{Ab}}}}g}{{Bn{e}}}Cj{}{{Dl{{b{c}}}{{Dj{e}}}}}}","D":"Dl","p":[[1,"reference"],[5,"Private",87],[1,"unit"],[5,"PyCodecAdapter",0,88],[5,"Python",89],[5,"PyCodec",0,90],[5,"Bound",91],[5,"PyCodecClassAdapter",0,88],[5,"PyCodecClass",0,92],[10,"PyCodecClassMethods",0,92],[5,"PyType",93],[0,"mut"],[10,"PyCodecMethods",0,90],[5,"Schema",94],[5,"PyDict",95],[5,"Borrowed",91],[5,"PyErr",96],[6,"Result",97],[10,"Deserializer",98],[5,"String",99],[1,"str"],[5,"PyAny",100],[6,"Option",101],[8,"AnyCowArray",102],[8,"AnyArray",102],[8,"AnyArrayView",102],[8,"AnyArrayViewMut",102],[5,"PyModule",103],[10,"DynCodecType",104],[5,"PyObject",105],[10,"Serializer",106],[5,"PyDowncastError",96],[10,"Into",107],[1,"bool"],[5,"TypeId",108],[10,"DynCodec",104],[17,"Output"],[10,"FnOnce",109],[5,"PyCodecRegistry",0]],"r":[[0,90],[1,88],[2,92],[3,88],[4,92],[5,90],[6,110],[35,111]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADEADAAIAAAADAAJABcAAwAcAAAAHgAAACAAAQAjAAAAKgABAC4AAQAzAAAAPAAAAD4AFwA="}],["numcodecs_reinterpret",{"t":"PPPPPFGNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNOOOOOOOOO","n":["InvalidEncodedShape","InvalidReinterpret","MismatchedDecodeDType","MismatchedDecodeIntoArray","MismatchedEncodeDType","ReinterpretCodec","ReinterpretCodecError","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_config","get_config","get_config","into","into","json_schema","passthrough","reinterpret_array","reinterpret_array_into","schema_id","schema_name","serialize","source","to_binary","to_bytes","to_owned","to_string","try_from","try_from","try_into","try_into","try_new","ty","type_id","type_id","configured","configured","decode_dtype","dtype","encode_dtype","provided","provided","shape","source"],"q":[[0,"numcodecs_reinterpret"],[49,"numcodecs_reinterpret::ReinterpretCodecError"],[58,"dyn_clone::sealed"],[59,"numcodecs::array"],[60,"core::result"],[61,"serde::de"],[62,"core::fmt"],[63,"serde::ser"],[64,"numcodecs::codec"],[65,"schemars::generate"],[66,"schemars::schema"],[67,"ndarray"],[68,"core::marker"],[69,"ndarray::data_traits"],[70,"ndarray::dimension::dimension_trait"],[71,"core::ops::function"],[72,"alloc::borrow"],[73,"core::error"],[74,"core::option"],[75,"alloc::string"],[76,"core::any"]],"i":[12,12,12,12,12,0,0,5,5,12,5,12,5,5,5,5,5,5,5,12,12,5,12,12,5,5,5,5,12,5,5,0,0,5,5,5,12,5,5,5,12,5,12,5,12,5,5,5,12,37,38,39,40,39,37,38,40,41],"f":"```````{{bd}f}{b{{b{c}}}{}}0{{{b{h}}}{{b{hc}}}{}}0{{{b{j}}}j}{{b{b{hc}}}f{}}{bf}{{{b{j}}l}{{A`{nc}}}{}}{{{b{j}}AbAd}{{A`{fc}}}{}}{c{{A`{j}}}Af}2{{{b{Ah}}{b{hAj}}}Al}0{cc{}}{AnAh}1{cj{}}{{bc}A`B`}{{{b{j}}}{{Bb{j}}}}{{}c{}}0{{{b{hBd}}}Bf}{Bhj}{{{Bj{eg}}k}{{Bl{ig}}}Bn{{Cb{}{{C`{c}}}}}Cd{}{{Ch{c}{{Cf{i}}}}}}{{{Cj{ce}}iAd}{{A`{fAh}}}BnCdCl{{Ch{c}{{Cf{g}}}}}}{{}{{D`{Cn}}}}0{{{b{j}}c}A`B`}{{{b{Ah}}}{{Dd{{b{Db}}}}}}55{bc{}}{bDf}{c{{A`{e}}}{}{}}0{{}{{A`{c}}}{}}0{{BhBh}{{A`{jAh}}}}{b}{bDh}0`````````","D":"Cf","p":[[1,"reference"],[5,"Private",58],[1,"unit"],[0,"mut"],[5,"ReinterpretCodec",0],[8,"AnyCowArray",59],[8,"AnyArray",59],[6,"Result",60],[8,"AnyArrayView",59],[8,"AnyArrayViewMut",59],[10,"Deserializer",61],[6,"ReinterpretCodecError",0],[5,"Formatter",62],[8,"Result",62],[6,"AnyArrayAssignError",59],[10,"Serializer",63],[5,"StaticCodecConfig",64],[5,"SchemaGenerator",65],[5,"Schema",66],[6,"AnyArrayDType",59],[5,"ArrayBase",67],[8,"Array",67],[10,"Copy",68],[17,"Elem"],[10,"Data",69],[10,"Dimension",70],[17,"Output"],[10,"Fn",71],[8,"ArrayView",67],[10,"ArrayDType",59],[1,"str"],[6,"Cow",72],[10,"Error",73],[6,"Option",74],[5,"String",75],[5,"TypeId",76],[15,"MismatchedEncodeDType",49],[15,"MismatchedDecodeDType",49],[15,"InvalidReinterpret",49],[15,"InvalidEncodedShape",49],[15,"MismatchedDecodeIntoArray",49]],"r":[],"b":[[19,"impl-Display-for-ReinterpretCodecError"],[20,"impl-Debug-for-ReinterpretCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ABwAIAA0AFwAAABkAAgAeAAAAIgADACgABQAvAAIA"}],["numcodecs_round",{"t":"KPFFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHMNNNNNNNNNNNNNNNNNNNNO","n":["Float","MismatchedDecodeIntoArray","Positive","RoundCodec","RoundCodecError","UnsupportedDtype","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","decode","decode_into","deserialize","deserialize","encode","eq","fmt","fmt","from","from","from","from","from_config","get_config","get_config","hash","into","into","into","json_schema","json_schema","partial_cmp","precision","round","round","schema_id","schema_id","schema_name","schema_name","serialize","serialize","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","source"],"q":[[0,"numcodecs_round"],[65,"numcodecs_round::RoundCodecError"],[66,"dyn_clone::sealed"],[67,"core::clone"],[68,"numcodecs::array"],[69,"core::result"],[70,"serde::de"],[71,"core::cmp"],[72,"core::fmt"],[73,"serde::ser"],[74,"numcodecs::codec"],[75,"core::hash"],[76,"schemars::generate"],[77,"schemars::schema"],[78,"core::option"],[79,"ndarray"],[80,"ndarray::data_traits"],[81,"ndarray::dimension::dimension_trait"],[82,"alloc::borrow"],[83,"core::error"],[84,"alloc::string"],[85,"core::any"]],"i":[0,18,0,0,0,18,5,6,5,6,18,5,6,18,5,6,5,6,5,6,5,5,5,6,5,6,18,18,5,6,18,18,5,5,5,6,5,6,18,5,6,6,5,0,8,5,6,5,6,5,6,18,5,6,18,5,6,18,5,6,18,5,5,6,18,41],"f":"``````{{bd}f}0{b{{b{c}}}{}}00{{{b{h}}}{{b{hc}}}{}}00{{{b{j}}}j}{{{b{{l{c}}}}}{{l{c}}}{nA`}}{{b{b{hc}}}f{}}0{bf}0{{{b{j}}Ab}{{Af{Adc}}}{}}{{{b{j}}AhAj}{{Af{fc}}}{}}{c{{Af{j}}}Al}{c{{Af{{l{An}}}}}Al}3{{{b{{l{c}}}}{b{{l{c}}}}}B`{BbA`}}{{{b{Bd}}{b{hBf}}}Bh}0{cc{}}0{BjBd}1{cj{}}{{bc}AfBl}{{{b{j}}}{{Bn{j}}}}{{{b{{l{c}}}}{b{he}}}f{C`A`}Cb}{{}c{}}00{{{b{hCd}}}Cf}0{{{b{{l{c}}}}{b{{l{c}}}}}{{Cj{Ch}}}{ClA`}}`{{{Cn{eg}}{l{c}}}{{D`{cg}}}A`{{Dd{}{{Db{c}}}}}Df}{A`A`}{{}{{Dj{Dh}}}}000{{{b{j}}c}AfBl}{{{b{{l{An}}}}c}AfBl}{{{b{Bd}}}{{Cj{{b{Dl}}}}}}{bc{}}0{bDn}{c{{Af{e}}}{}{}}00{{}{{Af{c}}}{}}00{b}{bE`}00`","D":"Bb","p":[[1,"reference"],[5,"Private",66],[1,"unit"],[0,"mut"],[5,"RoundCodec",0],[5,"Positive",0],[10,"Clone",67],[10,"Float",0],[8,"AnyCowArray",68],[8,"AnyArray",68],[6,"Result",69],[8,"AnyArrayView",68],[8,"AnyArrayViewMut",68],[10,"Deserializer",70],[1,"f64"],[1,"bool"],[10,"PartialEq",71],[6,"RoundCodecError",0],[5,"Formatter",72],[8,"Result",72],[6,"AnyArrayAssignError",68],[10,"Serializer",73],[5,"StaticCodecConfig",74],[10,"Hash",75],[10,"Hasher",75],[5,"SchemaGenerator",76],[5,"Schema",77],[6,"Ordering",71],[6,"Option",78],[10,"PartialOrd",71],[5,"ArrayBase",79],[8,"Array",79],[17,"Elem"],[10,"Data",80],[10,"Dimension",81],[1,"str"],[6,"Cow",82],[10,"Error",83],[5,"String",84],[5,"TypeId",85],[15,"MismatchedDecodeIntoArray",65]],"r":[],"b":[[26,"impl-Debug-for-RoundCodecError"],[27,"impl-Display-for-RoundCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADEABQAHABUAHwAAACEAAwAoAAIALgATAA=="}],["numcodecs_sz3",{"t":"PPPTPPPPPPPPPPPPPPFGFGKPGFPNNNNNNNNNNNNNNNNNNNNNNNNNHNNHNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOO","n":["Absolute","AbsoluteAndRelative","AbsoluteOrRelative","DTYPE","DecodeInvalidShapeHeader","EncodedDataNotBytes","EncodedDataNotOneDimensional","F32","F64","HeaderDecodeFailed","HeaderEncodeFailed","I32","I64","InvalidEncodeShape","L2Norm","MismatchedDecodeIntoArray","PS2NR","Relative","Sz3Codec","Sz3CodecError","Sz3CodingError","Sz3DType","Sz3Element","Sz3EncodeFailed","Sz3ErrorBound","Sz3HeaderError","UnsupportedDtype","__clone_box","__clone_box","__clone_box","always_inline_schema","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","deserialize","deserialize","deserialize","encode","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_config","get_config","get_config","into","into","into","into","into","into","json_schema","json_schema","schema_id","schema_id","schema_name","schema_name","serialize","serialize","serialize","source","source","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","dtype","shape","shape","source","source","source","source","source","source","abs","abs","abs","l2","psnr","rel","rel","rel"],"q":[[0,"numcodecs_sz3"],[125,"numcodecs_sz3::Sz3CodecError"],[134,"numcodecs_sz3::Sz3ErrorBound"],[142,"dyn_clone::sealed"],[143,"ndarray"],[144,"alloc::vec"],[145,"core::result"],[146,"ndarray::data_traits"],[147,"ndarray::dimension::dimension_trait"],[148,"numcodecs::array"],[149,"serde::de"],[150,"core::fmt"],[151,"ndarray::error"],[152,"serde::ser"],[153,"numcodecs::codec"],[154,"schemars::generate"],[155,"schemars::schema"],[156,"alloc::borrow"],[157,"core::error"],[158,"core::option"],[159,"alloc::string"],[160,"core::any"]],"i":[7,7,7,14,12,12,12,8,8,12,12,8,8,12,7,12,7,7,0,0,0,0,0,12,0,0,12,6,7,8,6,6,7,12,26,27,8,6,7,12,26,27,8,6,7,8,6,7,8,6,7,8,0,6,6,0,6,7,8,6,6,7,12,12,26,26,27,27,8,8,6,7,12,12,12,26,27,8,6,6,6,6,7,12,26,27,8,6,7,6,7,6,7,6,7,8,12,26,27,6,7,8,12,26,27,8,6,7,12,26,27,8,6,7,12,26,27,8,6,6,7,12,26,27,8,40,41,42,43,41,44,45,46,47,48,49,50,51,52,48,49,53],"f":"```````````````````````````{{bd}f}00{{}h}{b{{b{c}}}{}}00000{{{b{j}}}{{b{jc}}}{}}00000{{{b{l}}}l}{{{b{n}}}n}{{{b{A`}}}A`}{{b{b{jc}}}f{}}00{bf}00{{{Ab{eg}}{b{n}}}{{Aj{{Af{Ad}}Ah}}}Al{{B`{}{{An{c}}}}}Bb}{{{b{l}}Bd}{{Aj{Bfc}}}{}}{{{b{l}}BhBj}{{Aj{fc}}}{}}{{{b{{Bl{Ad}}}}}{{Aj{BfAh}}}}{c{{Aj{l}}}Bn}{c{{Aj{n}}}Bn}{c{{Aj{A`}}}Bn}5`{{{b{n}}{b{jC`}}}Cb}{{{b{Ah}}{b{jC`}}}Cb}0{{{b{Cd}}{b{jC`}}}Cb}0{{{b{Cf}}{b{jC`}}}Cb}0{{{b{A`}}{b{jC`}}}Cb}0{cc{}}0{ChAh}1{CjAh}222{cl{}}{{bc}AjCl}{{{b{l}}}{{Cn{l}}}}{{}c{}}00000{{{b{jD`}}}Db}0{{}{{Df{Dd}}}}000{{{b{l}}c}AjCl}{{{b{n}}c}AjCl}{{{b{A`}}c}AjCl}{{{b{Ah}}}{{Dj{{b{Dh}}}}}}{{{b{Cd}}}{{Dj{{b{Dh}}}}}}{{{b{Cf}}}{{Dj{{b{Dh}}}}}}{bc{}}00{bDl}000{c{{Aj{e}}}{}{}}00000{{}{{Aj{c}}}{}}00000{b}{bDn}00000`````````````````","D":"G`","p":[[1,"reference"],[5,"Private",142],[1,"unit"],[1,"bool"],[0,"mut"],[5,"Sz3Codec",0],[6,"Sz3ErrorBound",0],[6,"Sz3DType",0],[5,"ArrayBase",143],[1,"u8"],[5,"Vec",144],[6,"Sz3CodecError",0],[6,"Result",145],[10,"Sz3Element",0],[17,"Elem"],[10,"Data",146],[10,"Dimension",147],[8,"AnyCowArray",148],[8,"AnyArray",148],[8,"AnyArrayView",148],[8,"AnyArrayViewMut",148],[1,"slice"],[10,"Deserializer",149],[5,"Formatter",150],[8,"Result",150],[5,"Sz3HeaderError",0],[5,"Sz3CodingError",0],[6,"AnyArrayAssignError",148],[5,"ShapeError",151],[10,"Serializer",152],[5,"StaticCodecConfig",153],[5,"SchemaGenerator",154],[5,"Schema",155],[1,"str"],[6,"Cow",156],[10,"Error",157],[6,"Option",158],[5,"String",159],[5,"TypeId",160],[15,"EncodedDataNotBytes",125],[15,"InvalidEncodeShape",125],[15,"EncodedDataNotOneDimensional",125],[15,"HeaderEncodeFailed",125],[15,"Sz3EncodeFailed",125],[15,"HeaderDecodeFailed",125],[15,"DecodeInvalidShapeHeader",125],[15,"MismatchedDecodeIntoArray",125],[15,"AbsoluteAndRelative",134],[15,"AbsoluteOrRelative",134],[15,"Absolute",134],[15,"L2Norm",134],[15,"PS2NR",134],[15,"Relative",134]],"r":[],"b":[[62,"impl-Debug-for-Sz3CodecError"],[63,"impl-Display-for-Sz3CodecError"],[64,"impl-Display-for-Sz3HeaderError"],[65,"impl-Debug-for-Sz3HeaderError"],[66,"impl-Display-for-Sz3CodingError"],[67,"impl-Debug-for-Sz3CodingError"],[68,"impl-Display-for-Sz3DType"],[69,"impl-Debug-for-Sz3DType"],[72,"impl-From%3CAnyArrayAssignError%3E-for-Sz3CodecError"],[74,"impl-From%3CShapeError%3E-for-Sz3CodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFYACgAIAAEADAABABwAGAA2AAEAOQADAD4ACABJAAAASwAAAE8AAgBYACUA"}],["numcodecs_uniform_noise",{"t":"KPTFGPNHNNNNNNNNNNNNNNNNNNNMNNNMONNONNNNNNNNNNNO","n":["Float","MismatchedDecodeIntoArray","NEG_HALF","UniformNoiseCodec","UniformNoiseCodecError","UnsupportedDtype","__clone_box","add_uniform_noise","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_to_uninit","decode","decode_into","deserialize","encode","fmt","fmt","from","from","from","from_config","get_config","get_config","hash_bits","into","into","json_schema","mul_add","scale","schema_id","schema_name","seed","serialize","source","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","source"],"q":[[0,"numcodecs_uniform_noise"],[47,"numcodecs_uniform_noise::UniformNoiseCodecError"],[48,"dyn_clone::sealed"],[49,"ndarray"],[50,"ndarray::data_traits"],[51,"ndarray::dimension::dimension_trait"],[52,"numcodecs::array"],[53,"core::result"],[54,"serde::de"],[55,"core::fmt"],[56,"numcodecs::codec"],[57,"serde::ser"],[58,"core::hash"],[59,"schemars::generate"],[60,"schemars::schema"],[61,"alloc::borrow"],[62,"core::error"],[63,"core::option"],[64,"alloc::string"],[65,"core::any"]],"i":[0,19,7,0,0,19,12,0,12,19,12,19,12,12,12,12,12,12,12,19,19,12,19,19,12,12,12,7,12,19,12,7,12,12,12,12,12,19,12,19,12,19,12,19,12,12,19,34],"f":"``````{{bd}f}{{{h{eg}}cj}{{l{cg}}}n{{Ab{}{{A`{c}}}}}Ad}{b{{b{c}}}{}}0{{{b{Af}}}{{b{Afc}}}{}}0{{{b{Ah}}}Ah}{{b{b{Afc}}}f{}}{bf}{{{b{Ah}}Aj}{{An{Alc}}}{}}{{{b{Ah}}B`Bb}{{An{fc}}}{}}{c{{An{Ah}}}Bd}2{{{b{Bf}}{b{AfBh}}}Bj}0{cc{}}{BlBf}1{cAh{}}{{{b{Ah}}}{{Bn{Ah}}}}{{bc}AnC`}{{n{b{Afc}}}fCb}{{}c{}}0{{{b{AfCd}}}Cf}{{nnn}n}`{{}{{Cj{Ch}}}}0`{{{b{Ah}}c}AnC`}{{{b{Bf}}}{{Cn{{b{Cl}}}}}}{bc{}}{bD`}{c{{An{e}}}{}{}}0{{}{{An{c}}}{}}0{b}{bDb}0`","D":"Bb","p":[[1,"reference"],[5,"Private",48],[1,"unit"],[5,"ArrayBase",49],[1,"u64"],[8,"Array",49],[10,"Float",0],[17,"Elem"],[10,"Data",50],[10,"Dimension",51],[0,"mut"],[5,"UniformNoiseCodec",0],[8,"AnyCowArray",52],[8,"AnyArray",52],[6,"Result",53],[8,"AnyArrayView",52],[8,"AnyArrayViewMut",52],[10,"Deserializer",54],[6,"UniformNoiseCodecError",0],[5,"Formatter",55],[8,"Result",55],[6,"AnyArrayAssignError",52],[5,"StaticCodecConfig",56],[10,"Serializer",57],[10,"Hasher",58],[5,"SchemaGenerator",59],[5,"Schema",60],[1,"str"],[6,"Cow",61],[10,"Error",62],[6,"Option",63],[5,"String",64],[5,"TypeId",65],[15,"MismatchedDecodeIntoArray",47]],"r":[],"b":[[19,"impl-Debug-for-UniformNoiseCodecError"],[20,"impl-Display-for-UniformNoiseCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ABwAHAAAACQAMABcAAAAZAAIAHwAAACIAAQAlAAoA"}],["numcodecs_wasm_guest",{"t":"Q","n":["export_codec"],"q":[[0,"numcodecs_wasm_guest"]],"i":[0],"f":"`","D":"d","p":[],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAAAAAA="}],["numcodecs_zfp",{"t":"PPPPPPPPPPPPPPPFGGPPNNNNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOO","n":["DecodeUnknownDtype","EncodedDataNotBytes","EncodedDataNotOneDimensional","ExcessiveDimensionality","Expert","FixedAccuracy","FixedAccuracyModeIntegerData","FixedPrecision","FixedRate","HeaderDecodeFailed","HeaderEncodeFailed","InvalidExpertMode","MismatchedDecodeIntoArray","Reversible","UnsupportedDtype","ZfpCodec","ZfpCodecError","ZfpCompressionMode","ZfpDecodeFailed","ZfpEncodeFailed","__clone_box","__clone_box","always_inline_schema","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","from","from","from","from","from_config","get_config","get_config","into","into","into","json_schema","json_schema","mode","schema_id","schema_id","schema_name","schema_name","serialize","serialize","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","dtype","mode","shape","shape","source","max_bits","max_prec","min_bits","min_exp","precision","rate","tolerance"],"q":[[0,"numcodecs_zfp"],[79,"numcodecs_zfp::ZfpCodecError"],[84,"numcodecs_zfp::ZfpCompressionMode"],[91,"dyn_clone::sealed"],[92,"ndarray"],[93,"alloc::vec"],[94,"core::result"],[95,"ndarray::dimension::dimension_trait"],[96,"numcodecs::array"],[97,"serde::de"],[98,"core::fmt"],[99,"serde::ser"],[100,"numcodecs::codec"],[101,"schemars::generate"],[102,"schemars::schema"],[103,"alloc::borrow"],[104,"core::error"],[105,"core::option"],[106,"alloc::string"],[107,"core::any"]],"i":[11,11,11,11,7,7,11,7,7,11,11,11,11,7,11,0,0,0,11,11,6,7,6,6,7,11,6,7,11,6,7,6,7,6,7,0,6,6,0,0,6,7,6,7,11,11,6,7,11,11,6,6,6,6,7,11,6,7,6,6,7,6,7,6,7,11,6,7,11,6,7,11,6,7,11,6,6,7,11,33,34,35,36,37,38,38,38,38,39,40,41],"f":"````````````````````{{bd}f}0{{}h}{b{{b{c}}}{}}00{{{b{j}}}{{b{jc}}}{}}00{{{b{l}}}l}{{{b{n}}}n}{{b{b{jc}}}f{}}0{bf}0{{{A`{ce}}{b{n}}}{{Ah{{Ad{Ab}}Af}}}`Aj}{{{b{l}}Al}{{Ah{Anc}}}{}}{{{b{l}}B`Bb}{{Ah{fc}}}{}}{{{b{{Bd{Ab}}}}}{{Ah{AnAf}}}}{{{b{{Bd{Ab}}}}Bb}{{Ah{fAf}}}}{c{{Ah{l}}}Bf}{c{{Ah{n}}}Bf}5{{{b{n}}{b{jBh}}}Bj}{{{b{Af}}{b{jBh}}}Bj}0{cc{}}0{BlAf}1{cl{}}{{bc}AhBn}{{{b{l}}}{{C`{l}}}}{{}c{}}00{{{b{jCb}}}Cd}0`{{}{{Ch{Cf}}}}000{{{b{l}}c}AhBn}{{{b{n}}c}AhBn}{{{b{Af}}}{{Cl{{b{Cj}}}}}}{bc{}}0{bCn}{c{{Ah{e}}}{}{}}00{{}{{Ah{c}}}{}}00{b}{bD`}00````````````","D":"Ef","p":[[1,"reference"],[5,"Private",91],[1,"unit"],[1,"bool"],[0,"mut"],[5,"ZfpCodec",0],[6,"ZfpCompressionMode",0],[8,"ArrayView",92],[1,"u8"],[5,"Vec",93],[6,"ZfpCodecError",0],[6,"Result",94],[10,"Dimension",95],[8,"AnyCowArray",96],[8,"AnyArray",96],[8,"AnyArrayView",96],[8,"AnyArrayViewMut",96],[1,"slice"],[10,"Deserializer",97],[5,"Formatter",98],[8,"Result",98],[6,"AnyArrayAssignError",96],[10,"Serializer",99],[5,"StaticCodecConfig",100],[5,"SchemaGenerator",101],[5,"Schema",102],[1,"str"],[6,"Cow",103],[10,"Error",104],[6,"Option",105],[5,"String",106],[5,"TypeId",107],[15,"EncodedDataNotBytes",79],[15,"InvalidExpertMode",79],[15,"ExcessiveDimensionality",79],[15,"EncodedDataNotOneDimensional",79],[15,"MismatchedDecodeIntoArray",79],[15,"Expert",84],[15,"FixedPrecision",84],[15,"FixedRate",84],[15,"FixedAccuracy",84]],"r":[],"b":[[44,"impl-Display-for-ZfpCodecError"],[45,"impl-Debug-for-ZfpCodecError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAADAABwAVAA4AJQABACkABQAxAAAAMwACADkAAQA8ABMA"}],["numcodecs_zlib",{"t":"PPPPPPPPPPPPPPPPPFGFPFGNNNNNNNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOO","n":["DecodeExcessiveEncodedData","DecodeProducedLess","EncodedDataNotBytes","EncodedDataNotOneDimensional","HeaderDecodeFailed","HeaderEncodeFailed","MismatchedDecodeIntoArray","ZBestCompression","ZBestSpeed","ZLevel2","ZLevel3","ZLevel4","ZLevel5","ZLevel6","ZLevel7","ZLevel8","ZNoCompression","ZlibCodec","ZlibCodecError","ZlibDecodeError","ZlibDecodeFailed","ZlibHeaderError","ZlibLevel","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_config","get_config","get_config","into","into","into","into","into","json_schema","json_schema","level","schema_id","schema_id","schema_name","schema_name","serialize","serialize","source","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","dtype","shape","source","source","source","source"],"q":[[0,"numcodecs_zlib"],[102,"numcodecs_zlib::ZlibCodecError"],[108,"dyn_clone::sealed"],[109,"numcodecs::array"],[110,"alloc::vec"],[111,"core::result"],[112,"serde::de"],[113,"core::fmt"],[114,"serde::ser"],[115,"numcodecs::codec"],[116,"schemars::generate"],[117,"schemars::schema"],[118,"alloc::borrow"],[119,"core::error"],[120,"core::option"],[121,"alloc::string"],[122,"core::any"]],"i":[10,10,10,10,10,10,10,6,6,6,6,6,6,6,6,6,6,0,0,0,10,0,0,5,6,5,6,10,19,20,5,6,10,19,20,5,6,5,6,5,6,0,5,5,0,0,5,6,5,10,10,19,19,20,20,5,6,10,10,19,20,5,5,5,5,6,10,19,20,5,6,5,5,6,5,6,5,6,10,19,20,5,6,10,19,20,5,6,10,19,20,5,6,10,19,20,5,5,6,10,19,20,32,33,34,35,36,37],"f":"```````````````````````{{bd}f}0{b{{b{c}}}{}}0000{{{b{h}}}{{b{hc}}}{}}0000{{{b{j}}}j}{{{b{l}}}l}{{b{b{hc}}}f{}}0{bf}0{{nl}{{Af{{Ab{A`}}Ad}}}}{{{b{j}}Ah}{{Af{Ajc}}}{}}{{{b{j}}nAl}{{Af{fc}}}{}}{{{b{{An{A`}}}}}{{Af{AjAd}}}}{{{b{{An{A`}}}}Al}{{Af{fAd}}}}{c{{Af{j}}}B`}{c{{Af{l}}}B`}5{{{b{Ad}}{b{hBb}}}Bd}0{{{b{Bf}}{b{hBb}}}Bd}0{{{b{Bh}}{b{hBb}}}Bd}0{cc{}}0{BjAd}111{cj{}}{{bc}AfBl}{{{b{j}}}{{Bn{j}}}}{{}c{}}0000{{{b{hC`}}}Cb}0`{{}{{Cf{Cd}}}}000{{{b{j}}c}AfBl}{{{b{l}}c}AfBl}{{{b{Ad}}}{{Cj{{b{Ch}}}}}}{{{b{Bf}}}{{Cj{{b{Ch}}}}}}{{{b{Bh}}}{{Cj{{b{Ch}}}}}}{bc{}}0{bCl}00{c{{Af{e}}}{}{}}0000{{}{{Af{c}}}{}}0000{b}{bCn}0000``````","D":"Dd","p":[[1,"reference"],[5,"Private",108],[1,"unit"],[0,"mut"],[5,"ZlibCodec",0],[6,"ZlibLevel",0],[8,"AnyArrayView",109],[1,"u8"],[5,"Vec",110],[6,"ZlibCodecError",0],[6,"Result",111],[8,"AnyCowArray",109],[8,"AnyArray",109],[8,"AnyArrayViewMut",109],[1,"slice"],[10,"Deserializer",112],[5,"Formatter",113],[8,"Result",113],[5,"ZlibHeaderError",0],[5,"ZlibDecodeError",0],[6,"AnyArrayAssignError",109],[10,"Serializer",114],[5,"StaticCodecConfig",115],[5,"SchemaGenerator",116],[5,"Schema",117],[1,"str"],[6,"Cow",118],[10,"Error",119],[6,"Option",120],[5,"String",121],[5,"TypeId",122],[15,"EncodedDataNotBytes",102],[15,"EncodedDataNotOneDimensional",102],[15,"HeaderEncodeFailed",102],[15,"HeaderDecodeFailed",102],[15,"ZlibDecodeFailed",102],[15,"MismatchedDecodeIntoArray",102]],"r":[],"b":[[49,"impl-Debug-for-ZlibCodecError"],[50,"impl-Display-for-ZlibCodecError"],[51,"impl-Display-for-ZlibHeaderError"],[52,"impl-Debug-for-ZlibHeaderError"],[53,"impl-Display-for-ZlibDecodeError"],[54,"impl-Debug-for-ZlibDecodeError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEoACAAIAAkAGAARACsAAQAvAAgAOgAAAD4AAgBGAAEASQAdAA=="}],["numcodecs_zstd",{"t":"PPPPPPPFGFPPFFNNNNNNNNNNNNNNNNNNNHNNHHNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOO","n":["DecodeExcessiveEncodedData","DecodeProducedLess","EncodedDataNotBytes","EncodedDataNotOneDimensional","HeaderDecodeFailed","HeaderEncodeFailed","MismatchedDecodeIntoArray","ZstdCodec","ZstdCodecError","ZstdCodingError","ZstdDecodeFailed","ZstdEncodeFailed","ZstdHeaderError","ZstdLevel","__clone_box","__clone_box","always_inline_schema","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","compress","decode","decode_into","decompress","decompress_into","deserialize","deserialize","encode","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_config","get_config","get_config","into","into","into","into","into","json_schema","json_schema","level","schema_id","schema_id","schema_name","schema_name","serialize","serialize","source","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","dtype","shape","source","source","source","source","source"],"q":[[0,"numcodecs_zstd"],[94,"numcodecs_zstd::ZstdCodecError"],[101,"dyn_clone::sealed"],[102,"numcodecs::array"],[103,"alloc::vec"],[104,"core::result"],[105,"serde::de"],[106,"core::fmt"],[107,"numcodecs::codec"],[108,"serde::ser"],[109,"schemars::generate"],[110,"schemars::schema"],[111,"alloc::borrow"],[112,"core::error"],[113,"core::option"],[114,"alloc::string"],[115,"core::any"]],"i":[11,11,11,11,11,11,11,0,0,0,11,11,0,0,6,7,7,6,7,11,20,21,6,7,11,20,21,6,7,6,7,6,7,0,6,6,0,0,6,7,6,11,11,20,20,21,21,6,7,11,11,20,21,6,6,6,6,7,11,20,21,6,7,6,6,7,6,7,6,7,11,20,21,6,7,11,20,21,6,7,11,20,21,6,7,11,20,21,6,6,7,11,20,21,33,34,35,36,37,38,39],"f":"``````````````{{bd}f}0{{}h}{b{{b{c}}}{}}0000{{{b{j}}}{{b{jc}}}{}}0000{{{b{l}}}l}{{{b{n}}}n}{{b{b{jc}}}f{}}0{bf}0{{A`n}{{Ah{{Ad{Ab}}Af}}}}{{{b{l}}Aj}{{Ah{Alc}}}{}}{{{b{l}}A`An}{{Ah{fc}}}{}}{{{b{{B`{Ab}}}}}{{Ah{AlAf}}}}{{{b{{B`{Ab}}}}An}{{Ah{fAf}}}}{c{{Ah{l}}}Bb}{c{{Ah{n}}}Bb}5{{{b{Af}}{b{jBd}}}Bf}0{{{b{Bh}}{b{jBd}}}Bf}0{{{b{Bj}}{b{jBd}}}Bf}0{cc{}}0{BlAf}111{cl{}}{{{b{l}}}{{Bn{l}}}}{{bc}AhC`}{{}c{}}0000{{{b{jCb}}}Cd}0`{{}{{Ch{Cf}}}}000{{{b{l}}c}AhC`}{{{b{n}}c}AhC`}{{{b{Af}}}{{Cl{{b{Cj}}}}}}{{{b{Bh}}}{{Cl{{b{Cj}}}}}}{{{b{Bj}}}{{Cl{{b{Cj}}}}}}{bc{}}0{bCn}00{c{{Ah{e}}}{}{}}0000{{}{{Ah{c}}}{}}0000{b}{bD`}0000```````","D":"Dh","p":[[1,"reference"],[5,"Private",101],[1,"unit"],[1,"bool"],[0,"mut"],[5,"ZstdCodec",0],[5,"ZstdLevel",0],[8,"AnyArrayView",102],[1,"u8"],[5,"Vec",103],[6,"ZstdCodecError",0],[6,"Result",104],[8,"AnyCowArray",102],[8,"AnyArray",102],[8,"AnyArrayViewMut",102],[1,"slice"],[10,"Deserializer",105],[5,"Formatter",106],[8,"Result",106],[5,"ZstdHeaderError",0],[5,"ZstdCodingError",0],[6,"AnyArrayAssignError",102],[5,"StaticCodecConfig",107],[10,"Serializer",108],[5,"SchemaGenerator",109],[5,"Schema",110],[1,"str"],[6,"Cow",111],[10,"Error",112],[6,"Option",113],[5,"String",114],[5,"TypeId",115],[15,"EncodedDataNotBytes",94],[15,"EncodedDataNotOneDimensional",94],[15,"HeaderEncodeFailed",94],[15,"ZstdEncodeFailed",94],[15,"HeaderDecodeFailed",94],[15,"ZstdDecodeFailed",94],[15,"MismatchedDecodeIntoArray",94]],"r":[],"b":[[41,"impl-Debug-for-ZstdCodecError"],[42,"impl-Display-for-ZstdCodecError"],[43,"impl-Debug-for-ZstdHeaderError"],[44,"impl-Display-for-ZstdHeaderError"],[45,"impl-Debug-for-ZstdCodingError"],[46,"impl-Display-for-ZstdCodingError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEEABwAPABIAIwABACcACAAyAAAANgACAD4AAQBBAB0A"}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[6620,2998,2579,2028,5599,2489,4059,3015,3011,5038,2551,172,3559,3824,3759]}